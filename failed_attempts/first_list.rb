ARM = {
  branching: {
    B: ["Branch", :thumb_conditions],
    BL: ["Branch with Link"],
    BLX: ["Branch with Link and Exchange"],
    BX: ["Branch and Exchange"],
    BXJ: ["Branch and Exchange Jazelle"],
    CBZ: ["Compare and Branch on Zero", :thumb_only, :unconditionnal],
    CBNZ: ["Compare and Branch on NonZero", :thumb_only, :unconditionnal],
    LDC: ["Load Coprocessor", :coprocessor_encodings],
    LDR: ["Load Register"],
    LDRB: ["Load Register Byte"],
    LDRD: ["Load Register Dual"],
    LDRH: ["Load Register Halfword"],
    LDRSB: ["Load Register Signed Byte"],
    LDRSH: ["Load Register Signed Halfword"],
    TBB: ["Table Branch Byte", :thumb_only],
    TBH: ["Table Branch Halfword", :thumb_only],
    PLD: ["Preload Data", :unconditionnal],
    PLDW: ["Preload Data (Wide)", :unconditionnal],
    PLI: ["Preload Instruction", :unconditionnal]
  },
  :"Data processing" => {
    :"Standard data-processing instructions" => {
      ADC: ["Add With Carry", :flag_updater],
      ADD: ["Add", :flag_updater],
      ADR: ["Add to PC"],
      AND: ["Bitwise AND", :flag_updater],
      BIC: ["Bitwise Bit Clear", :flag_updater],
      CMN: ["Compare Negative"],
      CMP: ["Compare"],
      EOR: ["Bitwise Exclusive OR", :flag_updater],
      MOV: ["Move", :flag_updater],
      MVN: ["Bitwise NOT", :flag_updater],
      ORN: ["Bitwise OR NOT", :flag_updater],
      ORR: ["Bitwise OR", :flag_updater],
      RSB: ["Reverse Subtract", :flag_updater],
      RSC: ["Reverse Subtract with Carry", :flag_updater],
      SBC: ["Subtract with Carry", :flag_updater],
      SUB: ["Subtract", :flag_updater],
      TEQ: ["Test Equivalence"],
      TST: ["Test"]
    },
    :"Shift instructions" => {
      ASR: ["Arithmetic Shift Right", :flag_updater],
      LSL: ["Logical Shift Left", :flag_updater],
      LSR: ["Logical Shift Right", :flag_updater],
      ROR: ["Rotate Right", :flag_updater],
      RRX: ["Rotate Right with Extend", :flag_updater]
    },
    :"Multiply instructions" => {
      :"General" => {
        MLA: ["Multiply Accumulate", :flag_updater],
        MLS: ["Multiply and Subtract", :flag_updater],
        MUL: ["Multiply", :flag_updater]
      },
      :"Signed" => {
        SMLABB: ["Signed Multiply Accumulate (halfwords)", :two_half_parts],
        SMLAD: ["Signed Multiply Accumulate Dual", :cross_parts],
        SMLAL: ["Signed Multiply Accumulate Long", :flag_updater],
        SMLALBB: ["Signed Multiply Accumulate Long (halfwords)", :two_half_parts],
        SMLALD: ["Signed Multiply Accumulate Dual", :cross_parts],
        SMLAWB: ["Signed Multiply Accumulate (word by halfword)", :last_half_part],
        SMLSD: ["Signed Multiply Subtract Dual", :cross_parts],
        SMLSLD: ["Signed Multiply Subtract Long Dual", :cross_parts],
        SMMLA: ["Signed Most Significant Word Multiply Accumulate", :rounded],
        SMMLS: ["Signed Most Significant Word Multiply Subtract", :rounded],
        SMMUL: ["Signed Most Significant Word Multiply", :rounded],
        SMUAD: ["Signed Dual Multiply Add", :cross_parts],
        SMULBB: ["Signed Multiply (halfwords)", :two_half_parts],
        SMULL: ["Signed Multiply Long", :flag_updater],
        SMULWB: ["Signed Multiply (word by halfword)", :last_half_part],
        SMUSD: ["Signed Multiply Subtract Dual", :cross_parts]
      },
      :"Unsigned" => {
        UMAAL: ["Unsigned Multiply Accumulate Accumulate Long"],
        UMLAL: ["Unsigned Multiply Accumulate Long", :flag_updater],
        UMULL: ["Unsigned Multiply Long", :flag_updater]
      }
    },
    :"Saturating instructions" => {
      SSAT: ["Signed Saturate"],
      SSAT16: ["Signed Saturate 16"],
      USAT: ["Unsigned Saturate"],
      USAT16: ["Unsigned Saturate 16"]
    },
    :"Saturating addition and substraction instructions" => {
      QADD: ["Saturating Add"],
      QSUB: ["Saturating Subtract"],
      QDADD: ["Saturating Double and Add"],
      QDSUB: ["Saturating Double and Subtract"]
    },
    :"Packing and unpacking instructions" => {
      PKH: ["Pack Halfword", :half_and_half],
      SXTAB: ["Signed Extend and Add Byte"],
      SXTAB16: ["Signed Extend and Add Byte 16"],
      SXTAH: ["Signed Extend and Add Halfword"],
      SXTB: ["Signed Extend Byte"],
      SXTB16: ["Signed Extend Byte 16"],
      SXTH: ["Signed Extend Halfword"],
      UXTAB: ["Unsigned Extend and Add Byte"],
      UXTAB16: ["Unsigned Extend and Add Byte 16"],
      UXTAH: ["Unsigned Extend and Add Halfword"],
      UXTB: ["Unsigned Extend Byte"],
      UXTB16: ["Unsigned Extend Byte 16"],
      UXTH: ["Unsigned Extend Halfword"]
    },
    :"Parallel addition and substraction instructions" => {
      SADD16: ["Signed Add 16"],
      QADD16: ["Saturating Add 16"],
      SHADD16: ["Signed Halving Add 16"],
      UADD16: ["Unsigned Add 16"],
      UQADD16: ["Unsigned Saturating Add 16"],
      UHADD16: ["Unsigned Halving Add 16"],
      SASX: ["Signed Add and Subtract with Exchange"],
      QASX: ["Saturating Add and Subtract with Exchange"],
      SHASX: ["Signed Halving Add and Subtract with Exchange"],
      UASX: ["Unsigned Add and Subtract with Exchange"],
      UQASX: ["Unsigned Saturating Add and Subtract with Exchange"],
      UHASX: ["Unsigned Halving Add and Subtract with Exchange"],
      SSAX: ["Signed Subtract and Add with Exchange"],
      QSAX: ["Saturating Subtract and Add with Exchange"],
      SHSAX: ["Signed Halving Subtract and Add with Exchange"],
      USAX: ["Unsigned Subtract and Add with Exchange"],
      UQSAX: ["Unsigned Saturating Subtract and Add with Exchange"],
      UHSAX: ["Unsigned Halving Subtract and Add with Exchange"],
      SSUB16: ["Signed Subtract 16"],
      QSUB16: ["Saturating Subtract 16"],
      SHSUB16: ["Signed Halving Subtract 16"],
      USUB16: ["Unsigned Subtract 16"],
      UQSUB16: ["Unsigned Saturating Subtract 16"],
      UHSUB16: ["Unsigned Halving Subtract 16"],
      SADD8: ["Signed Add 8"],
      QADD8: ["Saturating Add 8"],
      SHADD8: ["Signed Halving Add 8"],
      UADD8: ["Unsigned Add 8"],
      UQADD8: ["Unsigned Saturating Add 8"],
      UHADD8: ["Unsigned Halving Add 8"],
      SSUB8: ["Signed Subtract 8"],
      QSUB8: ["Saturating Subtract 8"],
      SHSUB8: ["Signed Halving Subtract 8"],
      USUB8: ["Unsigned Subtract 8"],
      UQSUB8: ["Unsigned Saturating Subtract 8"],
      UHSUB8: ["Unsigned Halving Subtract 8"]
    },
    :"Divide instructions" => {
      SDIV: ["Signed Divide"],
      UDIV: ["Unsigned Divide"]
    },
    :"Miscellaneous data-processing instructions" => {
      BFC: ["Bit Field Clear"],
      BFI: ["Bit Field Insert"],
      CLZ: ["Count Leading Zeros"],
      MOVT: ["Move Top"],
      RBIT: ["Reverse Bits"],
      REV: ["Byte-Reverse Word"],
      REV16: ["Byte-Reverse Packed Halfword"],
      REVSH: ["Byte-Reverse Signed Halfword"],
      SBFX: ["Signed Bit Field Extract"],
      SEL: ["Select Bytes"],
      UBFX: ["Unsigned Bit Field Extract"],
      USAD8: ["Unsigned Sum of Absolute Differences"],
      USADA8: ["Unsigned Sum of Absolute Differences and Accumulate"]
    }
  },
  :"Status register access instructions" => {
    :"Banked register access instructions" => {
      MRS: ["Move to Register from Special register"],
      MSR: ["Move to Special register from ARM core register"]
    },
  },
  :"Load/store instructions" => {
    LDR: ["Load Register"],
    STR: ["Store Register"],
    LDRT: ["Load Register Unprivileged"],
    STRT: ["Store Register Unprivileged"],
    LDREX: ["Load Register Exclusive"],
    STREX: ["Store Register Exclusive"],
    STRH: ["Store Register Halfword"],
    STRHT: ["Store Register Halfword Unprivileged"],
    STREXH: ["Store Register Exclusive Halfword"],
    LDRH: ["Load Register Halfword"],
    LDRHT: ["Load Register Halfword Unprivileged"],
    LDREXH: ["Load Register Exclusive Halfword"],
    LDRSH: ["Load Register Signed Halfword"],
    LDRSHT: ["Load Register Signed Halfword Unprivileged"],
    STRB: ["Store Register Byte"],
    STRBT: ["Store Register Byte Unprivileged"],
    STREXB: ["Store Register Exclusive Byte"],
    LDRB: ["Load Register Byte"],
    LDRBT: ["Load Register Byte Unprivileged"],
    LDREXB: ["Load Register Exclusive Byte"],
    LDRSB: ["Load Register Signed Byte"],
    LDRSBT: ["Load Register Signed Byte Unprivileged"],
    LDRD: ["Load Register Dual"],
    STRD: ["Store Register Dual"],
    LDREXD: ["Load Register Exclusive Dual"],
    STREXD: ["Store Register Exclusive Dual"]
  },
  :"Load/store multiple instructions" => {
    LDM: ["Load Multiple", amode: {default: :da, da: :fa, db: :ea, ia: :fd, ib: :ed}],
    POP: ["Pop Multiple Registers"],
    PUSH: ["Push Multiple Registers"],
    STM: ["Store Multiple", amode: {default: :ia, da: :ed, db: :fd, ia: :ea, ib: :fa}]
  },
  :"Miscellaneous instructions" => {
    CLREX: ["Clear-Exclusive", :unconditionnal],
    DBG: ["Debug Hint"],
    DMB: ["Data Memory Barrier", :unconditionnal],
    DSB: ["Data Synchronization Barrier", :unconditionnal],
    ISB: ["Instruction Synchronization Barrier", :unconditionnal],
    IT: ["If-Then", :thumb_only, :it_conditions],
    NOP: ["No Operation"],
    PLD: ["Preload Data", :unconditionnal],
    PLDW: ["Preload Data Wide", :unconditionnal],
    PLI: ["Preload Instruction", :unconditionnal],
    SETEND: ["Set Endianness", :unconditionnal],
    SEV: ["Send Event"],
    SWP: ["Swap", :deprecated, :byte_suffix],
    WFE: ["Wait for Event"],
    WFI: ["Wait for Interrupt"],
    YIELD: ["Yield"]
  },
  :"Exception-generating and exception-handling instructions" => {
    SVC: ["Supervisor Call"],
    BKPT: ["Breakpoint", :unconditionnal],
    SMC: ["Secure Monitor Call"],
    RFE: ["Return From Exception", {amode: {da: :fa, db: :ea, ia: :fd, ib: :ed} }],
    SUBS: ["Subtract"],
    HVC: ["Hypervisor Call", :unconditionnal],
    ERET: ["Exception Return"],
    LDM: ["Load Multiple", {amode: {ia: :fd, da: :fa, db: :ea, ib: :ed}}],
    SRS: ["Store Return State", {amode: {da: :ed, db: :fd, ia: :ea, ib: :fa}}]
  },
  :"Coprocessor instructions" => {
    CDP: ["Coprocessor Data Processing", :coprocessor_encodings, :unconditionnal],
    MCR: ["Move to Coprocessor from ARM core register", :coprocessor_encodings, :unconditionnal],
    MCRR: ["Move to Coprocessor from two ARM core registers", :coprocessor_encodings, :unconditionnal],
    MRC: ["Move to ARM core register from Coprocessor", :coprocessor_encodings, :unconditionnal],
    MRRC: ["Move to two ARM core registers from Coprocessor", :coprocessor_encodings, :unconditionnal],
    LDC: ["Load Coprocessor", :coprocessor_encodings, :unconditionnal],
    STC: ["Store Coprocessor", :coprocessor_encodings, :unconditionnal, :stc_l_encoding]
  },
  :"Advanced SIMD and Floating-point load/store instructions" => {
    :"Extension register load/store instructions" => {
      VLDM: ["Vector Load Multiple", {amode: [:ia, :db], vector_sizes: [32, 64]}],
      VLDR: ["Vector Load Register", {vector_sizes: [32, 64]}],
      VSTM: ["Vector Store Multiple", {amode: [:ia, :db], vector_sizes: [32, 64]}],
      VSTR: ["Vector Store Register", {vector_sizes: [32, 64]}]
    },
    :"Element and structure load/store instructions" => {
      VLD1: ["Vector Load (multiple single elements)", {vector_sizes: [8, 16, 32, 64]}, :simd_conditions],
      VLD2: ["Vector Load (multiple 2-elements structures)", {vector_sizes: [8, 16, 32]}, :simd_conditions],
      VLD3: ["Vector Load (multiple 3-elements structures)", {vector_sizes: [8, 16, 32, 64]}, :simd_conditions],
      VLD4: ["Vector Load (multiple 4-elements structures)", {vector_sizes: [8, 16, 32, 64]}, :simd_conditions],
      VST1: ["Vector Store (multiple single elements)", {vector_sizes: [8, 16, 32, 64]}, :simd_conditions],
      VST2: ["Vector Store (multiple 2-elements structures)", {vector_sizes: [8, 16, 32]}, :simd_conditions],
      VST3: ["Vector Store (multiple 3-elements structures)", {vector_sizes: [8, 16, 32]}, :simd_conditions],
      VST4: ["Vector Store (multiple 4-elements structures)", {vector_sizes: [8, 16, 32]}, :simd_conditions]
    }
  },
  :"Advanced SIMD and Floating-point register transfer instructions" => {
    VDUP: ["Vector Duplicate", :vector_size, :simd_conditions],
    VMOV: ["Vector Move", {vector_types: [:i8, :i16, :i32, :i64, :f32, :f64]}],
    VMRS: ["Vector Move to ARM core register"],
    VMSR: ["Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register"]
  },
  :"Advanced SIMD data-processing instructions" => {
    :"Advanced SIMD parallel addition and substraction" => {
      VADD: ["Vector Add", {vector_types: [:i8, :i16, :i32, :i64]}, :simd_conditions],
      VADDHN: ["Vector Add and Narrow", {vector_types: [:i16, :i32, :i64]}, :simd_conditions],
      VADDL: ["Vector Add Long", {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VADDW: ["Vector Add Wide", {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VH: ["Vector Halving", {vector_operations: [:add, :sub], vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VPADAL: ["Vector Pairwise Add and Accumulate Long", {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VPADD: ["Vector Pairwise Add", {vector_types: [:i8, :i16, :i32]}, :simd_conditions],
      VPADDL: ["Vector Pairwise Add Long", {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VRADDHN: ["Vector Rounding Add and Narrow", {vector_types: [:i16, :i32, :i64]}, :simd_conditions],
      VRHADD: ["Vector Rounding Halving Add", {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VRSUBHN: ["Vector Rounding Subtract and Narrow", {vector_types: [:i16, :i32, :i64]}, :simd_conditions],
      VQADD: ["Vector Saturating Add", {vector_types: [:s8, :s16, :s32, :s64, :u8, :u16, :u32, :u64]}, :simd_conditions],
      VQSUB: ["Vector Saturating Subtract", {vector_types: [:s8, :s16, :s32, :s64, :u8, :u16, :u32, :u64]}, :simd_conditions],
      VSUB: ["Vector Subtract", {vector_types: [:i8, :i16, :i32, :i64]}, :simd_conditions],
      VSUBHN: ["Vector Subtract and Narrow", {vector_types: [:i16, :i32, :i64]}, :simd_conditions],
      VSUBL: ["Vector Subtract Long", {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VSUBW: ["Vector Subtract Wide", {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions]
    },
    :"Bitwise Advanced SIMD data-processing instructions" => {
      VAND: ["Vector Bitwise AND", :simd_conditions],
      VBIC: ["Vector Bitwise Bit Clear", {vector_types: [:i16, :i32]}],
      VEOR: ["Vector Bitwise Exclusive OR", :simd_conditions],
      VBIF: ["Vector Bitwise Insert if False", :simd_conditions],
      VBIT: ["Vector Bitwise Insert if True", :simd_conditions],
      VBSL: ["Vector Bitwise Select", :simd_conditions],
      VMOV: ["Vector Move", {vector_types: [:s8, :s16, :u8, :u16, :"32", :i8, :i16, :i32, :i64, :f32]}, :simd_conditions],
      VMVN: ["Vector Bitwise NOT", {vector_types: [:i16, :i32]}, :simd_conditions],
      VORR: ["Vector Bitwise OR", {vector_types: [:i16, :i32]}, :simd_conditions],
      VORN: ["Vector Bitwise OR NOT", {vector_types: [:i16, :i32]}, :simd_conditions]
    },
    :"Advanced SIMD comparison instructions" => {
      VAC: ["Vector Absolute Compare", {comparaisons: [:ge, :gt, :le, :lt], vector_types: [:f32]}, :simd_conditions],
      VC: ["Vector Compare", {comparaisons: [:eq, :ge, :gt, :le, :lt], vector_types: [:i8, :i16, :i32, :f32]}, :simd_conditions],
      VTST: ["Vector Test", {vector_sizes: [8, 16, 32]}, :simd_conditions]
    },
    :"Advanced SIMD shift instructions" => {
      VQRSHL: ["Vector Saturating Rounding Shift Left", {vector_types: [:s8, :s16, :s32, :s64, :u8, :u16, :u32, :u64]}, :simd_conditions],
      VQRSHRN: ["Vector Saturating Rounding Shift Right Narrow", {vector_types: [:s16, :s32, :s64, :u16, :u32, :u64]}, :simd_conditions],
      VQRSHRUN: ["Vector Saturating Rounding Shift Right Unsigned Narrow", {vector_types: [:s16, :s32, :s64]}, :simd_conditions],
      VQSHL: ["Vector Saturating Shift Left", {vector_types: [:s8, :s16, :s32, :s64, :u8, :u16, :u32, :u64]}, :simd_conditions],
      VQSHLU: ["Vector Saturating Shift Left Unsigned", {vector_types: [:s8, :s16, :s32, :s64]}, :simd_conditions],
      VQSHRN: ["Vector Saturating Shift Right Narrow", {vector_types: [:s16, :s32, :s64, :u16, :u32, :u64]}, :simd_conditions],
      VQSHRUN: ["Vector Saturating Shift Right Unsigned Narrow",{vector_types: [:s8, :s16, :s32, :s64]}, :simd_conditions],
      VRSHL: ["Vector Rounding Shift Left", {vector_types: [:s8, :s16, :s32, :s64, :u8, :u16, :u32, :u64]}, :simd_conditions],
      VRSHR: ["Vector Rounding Shift Right", {vector_types: [:s8, :s16, :s32, :s64, :u8, :u16, :u32, :u64]}, :simd_conditions],
      VRSRA: ["Vector Rounding Shift Right and Accumulate", {vector_types: [:s8, :s16, :s32, :s64, :u8, :u16, :u32, :u64]}, :simd_conditions],
      VRSHRN: ["Vector Rounding Shift Right and Narrow", {vector_types: [:i16, :i32, :i64]}, :simd_conditions],
      VSHL: ["Vector Shift Left", {vector_types: [:s8, :s16, :s32, :s64, :u8, :u16, :u32, :u64, :i8, :i16, :i32, :i64]}, :simd_conditions],
      VSHLL: ["Vector Shift Left Long", {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32, :i8, :i16, :i32]}, :simd_conditions],
      VSHR: ["Vector Shift Right", {vector_types: [:s8, :s16, :s32, :s64, :u8, :u16, :u32, :u64]}, :simd_conditions],
      VSHRN: ["Vector Shift Right Narrow", {vector_types: [:i16, :i32, :i64]}, :simd_conditions],
      VSLI: ["Vector Shift Left and Insert", {vector_sizes: [8, 16, 32, 64]}, :simd_conditions],
      VSRA: ["Vector Shift Right and Accumulate", {vector_sizes: [:s8, :s16, :s32, :s64, :u8, :u16, :u32, :u64]}, :simd_conditions],
      VSRI: ["Vector Shift Right and Insert", {vector_sizes: [8, 16, 32, 64]}, :simd_conditions]
    },
    :"Advanced SIMD multiply instructions" => {
      VML: ["Vector Multiply and ", {operations: [:accumulate, :accumulate_long, :subtract, :subtract_long], vector_types: [:s8, :s16, :s32, :u8, :u16, :u32, :i8, :i16, :i32]}, :simd_conditions],
      VMUL: ["Vector Multiply", :long, {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32, :i8, :i16, :i32, :p8]}, :simd_conditions],
      VFMA: ["Vector Fused Multiply ", {operations: [:accumulate, :subtract], vector_types: [:f32, :f64]}, :simd_conditions],
      VQDMLAL: ["Vector Saturating Doubling Multiply", {operations: [:accumulate_long, :subtract_long], vector_types: [:s16, :s32]}, :simd_conditions],
      VQDMULH: ["Vector Saturating Doubling Multiply Returning High Half", {vector_types: [:s16, :s32]}, :simd_conditions],
      VQRDMULH: ["Vector Saturating Rounding Doubling Multiply Returning High Half", {vector_types: [:s16, :s32]}, :simd_conditions],
      VQDMULL: ["Vector Saturating Doubling Multiply Long", {vector_types: [:s16, :s32]}, :simd_conditions]
    },
    :"Miscellaneous Advanced SIMD data-processing instructions" => {
      VABA: ["Vector Absolute Difference and Accumulate", {suffixes: [:long], vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VABD: ["Vector Absolute Difference", {suffixes: [:long], vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VABS: ["Vector Absolute", {vector_types: [:s8, :s16, :s32, :f32, :f64]}, :simd_conditions],
      VCVT: ["Vector Convert between integer and floating-point", {vector_conversions: [:s32, :f32, :u32, :f32, :s32, :f64, :u32, :f64, :f16, :f32, :s16, :f32, :s16, :f64, :u16, :f32, :u16, :f64]}],
      VCLS: ["Vector Count Leading Sign Bits", {vector_types: [:s8, :s16, :s32]}, :simd_conditions],
      VCLZ: ["Vector Count Leading Zeros", {vector_types: [:i8, :i16, :i32]}, :simd_conditions],
      VCNT: ["Vector Count 1 bits", {vector_sizes: [8]}, :simd_conditions],
      VDUP: ["Vector Duplicate", {vector_sizes: [8,16,32]}, :simd_conditions],
      VEXT: ["Vector Extract", {vector_sizes: [8,16,32,64]}, :simd_conditions],
      VMOVN: ["Vector Move and Narrow", {vector_types: [:i16, :i32, :i64]}, :simd_conditions],
      VMOVL: ["Vector Move Long", {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VMAX: ["Vector Maximum", {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VMIN: ["Vector Minimum", {vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VNEG: ["Vector Negate", {vector_types: [:s8, :s16, :s32, :f32]}, :simd_conditions],
      VPMAX: ["Vector Pairwise", {operations: [:min, :max], vector_types: [:s8, :s16, :s32, :u8, :u16, :u32]}, :simd_conditions],
      VRECPE: ["Vector Reciprocal Estimate", {vector_types: [:u32, :f32]}, :simd_conditions],
      VRECPS: ["Vector Reciprocal Step", {vector_types: [:f32]}, :simd_conditions],
      VRSQRTE: ["Vector Reciprocal Square Root Estimate", {vector_types: [:u32, :f32]}, :simd_conditions],
      VRSQRTS: ["Vector Reciprocal Square Root Step", {vector_types: [:f32]}, :simd_conditions],
      VREV16: ["Vector Reverse in", {vector_reverse: [16, 32, 64], vector_sizes: [8, 16, 32]}, :simd_conditions],
      VQABS: ["Vector Saturating Absolute", {vector_types: [:s16, :s32, :s64]}, :simd_conditions],
      VQMOVN: ["Vector Move and Narrow", {vector_types: [:s16, :s32, :s64, :u16, :u32, :u64]}, :simd_conditions],
      VQMOVUN: ["Vector Move Unsigned and Narrow", {vector_types: [:s16, :s32, :s64]}, :simd_conditions],
      VQNEG: ["Vector Saturate Negate", {vector_types: [:s16, :s32, :s64]}, :simd_conditions],
      VSWP: ["Vector Swap", :simd_conditions],
      VTBL: ["Vector Table Lookup", :simd_conditions],
      VTBX: ["Vector Table Extension", :simd_conditions],
      VTRN: ["Vector Transpose", {vector_sizes: [8, 16, 32]}, :simd_conditions],
      VUZP: ["Vector Unzip", {vector_sizes: [8, 16, 32]}, :simd_conditions],
      VZIP: ["Vector Zip", {vector_sizes: [8, 16, 32]}, :simd_conditions]
    },
  },
  :"Floating-point data-processing instructions" => {
    VABS: ["Vector Absolute", {vector_types: [:f32, :f64]}],
    VADD: ["Vector Add", {vector_types: [:f32, :f64]}, :simd_conditions],
    VCMP: ["Vector Compare", {vector_types: [:f32, :f64], operations: [:exception]}],
    VCVT: ["Vector Convert", {vector_conversions: [:f32, :f64, :f16, :f32]}],
    VCVTR: ["Vector Convert Rounding", {vector_conversions: [:s32, :f32, :u32, :f32, :s32, :f64, :u32, :f64]}],
    VCVTT: ["Vector Convert Top", {vector_conversions: [:f16, :f32]}],
    VCVTB: ["Vector Convert Bottom", {vector_conversions: [:f16, :f32]}],
    VDIV: ["Vector Divide", {vector_types: [:f32, :f64]}],
    VMLA: ["Vector Multiply and ", {operations: [:accumulate, :subtract], vector_types: [:f32, :f64]}, :simd_conditions],
    VFMA: ["Vector Fused Multiply ", {operations: [:accumulate, :subtract], vector_types: [:f32, :f64]}],
    VMOV: ["Vector Move", {vector_types: [:f32, :f64]}, :simd_conditions],
    VMUL: ["Vector Multiply", {vector_types: [:f32, :f64]}, :simd_conditions],
    VNEG: ["Vector Negate", {vector_types: [:s8, :s16, :s32, :f32]}, :simd_conditions],
    VNMLA: ["Vector Negate Multiply and ", {operations: [:accumulate, :subtract], vector_types: [:f32, :f64]}],
    VNMUL: ["Vector Negate Multiply", {vector_types: [:f32, :f64]}],
    VFNM: ["Vector Fused Negate Multiply ", {operations: [:accumulate, :subtract], vector_types: [:f32, :f64]}],
    VSQRT: ["Vector Square Root", {vector_types: [:f32, :f64]}],
    VSUB: ["Vector Subtract", {vector_types: [:f32, :f64]}, :simd_conditions],
  }
}
