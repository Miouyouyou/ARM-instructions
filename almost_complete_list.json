{
  "substitutions": {
    "variants": {
      "c": {
        "": "",
        "eq": "(If APSR.Z == 1 [Equal])",
        "ne": "(If APSR.Z == 0 [Not Equal])",
        "cs": "(If APSR.C == 1 [Carry Set])",
        "cc": "(If APSR.C == 0 [Carry Clear])",
        "mi": "(If APSR.N == 1 [Minus])",
        "pl": "(If APSR.N == 0 [Plus])",
        "vs": "(If APSR.V == 1 [Overflow])",
        "vc": "(If APSR.V == 0 [No Overflow])",
        "hi": "(If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ls": "(If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ge": "(If APSR.N == APSR.V [Signed Greater or Equal])",
        "lt": "(If APSR.N != APSR.V [Signed Lesser Than])",
        "gt": "(If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "le": "(If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "al": "(Always)"
      },
      "d": {
        "": "",
        "d": "Dual"
      },
      "dt": {
        ".f16": "(16 bits Float components)",
        ".f32": "(32 bits Float components)",
        ".f64": "(64 bits Float components)",
        ".i8": "(8 bits Integer components)",
        ".i16": "(16 bits Integer components)",
        ".i32": "(32 bits Integer components)",
        ".i64": "(64 bits Integer components)",
        ".s8": "(8 bits Signed Integer components)",
        ".s16": "(16 bits Signed Integer components)",
        ".s32": "(32 bits Signed Integer components)",
        ".s64": "(64 bits Signed Integer components)",
        ".u8": "(8 bits Unsigned Integer components)",
        ".u16": "(16 bits Unsigned Integer components)",
        ".u32": "(32 bits Unsigned Integer components)",
        ".u64": "(64 bits Unsigned Integer components)"
      },
      "h": {
        "": "",
        "h": "Halving"
      },
      "l": {
        "": "",
        "l": "Long"
      },
      "q": {
        "": "",
        ".n": "(T 16bits encoding)",
        ".w": "(T/A 32bits encoding)"
      },
      "s": {
        "": "",
        "s": "(Update APSR)"
      },
      "u": {
        "": "",
        "u": "Unsigned"
      },
      "x": {
        "": "",
        "x": "with Exchange"
      },
      "amode": {
        "db": "Decrement Before",
        "da": "Decrement After",
        "ea": "Empty Ascending",
        "ed": "Empty Descending",
        "fa": "Full Ascending",
        "fd": "Full Descending",
        "ia": "Increment After",
        "ib": "Increment Before"
      },
      "bsize": {
        "": "",
        ".8": ".8",
        ".16": ".16",
        ".32": ".32",
        ".64": ".64"
      },
      "bwsize": {
        "": "",
        ".8": "Bytes",
        ".16": "Halfwords",
        ".32": "Words",
        ".64": "Doublewords"
      },
      "comparaisons": {
        "gt": "Greater Than",
        "ge": "Greater than or Equal",
        "eq": "Equal",
        "le": "Lesser than or Equal",
        "lt": "Lesser Than"
      },
      "coproc_2": {
        "": "",
        "2": "(2nd T/A encoding)"
      },
      "coproc_l": {
        "": "",
        "l": "(D == 1 encoding)"
      },
      "cross_mult": {
        "": "(Top x Top | Bottom x Bottom)",
        "x": "(Top x Bottom | Bottom x Top)"
      },
      "exception": {
        "": "",
        "e": "(trigger Exceptions)"
      },
      "exclusive": {
        "": "",
        "ex": "Exclusive"
      },
      "half_parts": {
        "": "",
        "b": "(with Bottom half)",
        "t": "(with Bottom top)",
        "bb": "(Bottom half with Bottom half)",
        "bt": "(Bottom half with Top half)",
        "tb": "(Top half with Bottom half)",
        "tt": "(Top half with Top half)"
      },
      "interrupt_state": {
        "": "",
        "ia": "(Enable Interrupt)",
        "ID": "(Disable Interrupt)"
      },
      "it_conditions": {
        "": "",
        "t": "True",
        "e": "False",
        "tt": "True True",
        "te": "True False",
        "et": "False True",
        "ee": "False False",
        "ttt": "True True True",
        "tte": "True True False",
        "tet": "True False True",
        "tee": "True False False",
        "ett": "False True True",
        "ete": "False True False",
        "eet": "False False True",
        "eee": "False False False",
        "tttt": "True True True True",
        "ttte": "True True True False",
        "ttet": "True True False True",
        "ttee": "True True False False",
        "tett": "True False True True",
        "tete": "True False True False",
        "teet": "True False False True",
        "teee": "True False False False",
        "ettt": "False True True True",
        "ette": "False True True False",
        "etet": "False True False True",
        "etee": "False True False False",
        "eett": "False False True True",
        "eete": "False False True False",
        "eeet": "False False False True",
        "eeee": "False False False False"
      },
      "mul_r": {
        "": "(truncated results)",
        "r": "(Rounded results)"
      },
      "negate": {
        "": "",
        "n": "Negate"
      },
      "non": {
        "": "",
        "n": "Non-"
      },
      "operations": {
        "add": [
          "A",
          "Add"
        ],
        "sub": [
          "S",
          "Subtract"
        ],
        "accumulate": [
          "A",
          "Accumulate"
        ],
        "min": [
          "MIN",
          "Minimum"
        ],
        "max": [
          "MAX",
          "Maximum"
        ]
      },
      "opmode": {
        "": "",
        "h": "Halving",
        "q": "Saturating"
      },
      "pld_w": {
        "": "(Read intent)",
        "w": "(Write intent)"
      },
      "with_link": {
        "": ""
      },
      "wsize": {
        "": "",
        "b": "Byte",
        "sb": "Signed Byte",
        "h": "Halfword",
        "sh": "Signed Halfword",
        "w": "Word",
        "d": "Doubleword"
      },
      "vector_conversions": {
        "": ""
      },
      "vsize": {
        ".8": "(8 bits components)",
        ".16": "(16 bits components)",
        ".32": "(32 bits components)",
        ".64": "(64 bits components)"
      }
    },
    "flags": {
      "uncondtionnal": {
        "c": {
          "": "",
          "al": "(Always)"
        }
      },
      "simd_conditions": {
        "c": {
          "": "",
          "al": "(Always)"
        },
        "q": {
          "": "",
          ".w": ""
        }
      },
      "arm_only": {
        "q": {
          "": ""
        }
      }
    }
  },
  "instructions": {
    "ADC%{s}%{c}%{q}": {
      "description": "Add With Carry %{q} %{c} %{s}",
      "variants": {
        "ADC": "Add With Carry",
        "ADC.n": "Add With Carry (T 16bits encoding)",
        "ADC.w": "Add With Carry (T/A 32bits encoding)",
        "ADCeq": "Add With Carry (If APSR.Z == 1 [Equal])",
        "ADCeq.n": "Add With Carry (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "ADCeq.w": "Add With Carry (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "ADCne": "Add With Carry (If APSR.Z == 0 [Not Equal])",
        "ADCne.n": "Add With Carry (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ADCne.w": "Add With Carry (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ADCcs": "Add With Carry (If APSR.C == 1 [Carry Set])",
        "ADCcs.n": "Add With Carry (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "ADCcs.w": "Add With Carry (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "ADCcc": "Add With Carry (If APSR.C == 0 [Carry Clear])",
        "ADCcc.n": "Add With Carry (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ADCcc.w": "Add With Carry (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ADCmi": "Add With Carry (If APSR.N == 1 [Minus])",
        "ADCmi.n": "Add With Carry (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "ADCmi.w": "Add With Carry (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "ADCpl": "Add With Carry (If APSR.N == 0 [Plus])",
        "ADCpl.n": "Add With Carry (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "ADCpl.w": "Add With Carry (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "ADCvs": "Add With Carry (If APSR.V == 1 [Overflow])",
        "ADCvs.n": "Add With Carry (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "ADCvs.w": "Add With Carry (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "ADCvc": "Add With Carry (If APSR.V == 0 [No Overflow])",
        "ADCvc.n": "Add With Carry (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "ADCvc.w": "Add With Carry (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "ADChi": "Add With Carry (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ADChi.n": "Add With Carry (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ADChi.w": "Add With Carry (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ADCls": "Add With Carry (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ADCls.n": "Add With Carry (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ADCls.w": "Add With Carry (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ADCge": "Add With Carry (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ADCge.n": "Add With Carry (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ADCge.w": "Add With Carry (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ADClt": "Add With Carry (If APSR.N != APSR.V [Signed Lesser Than])",
        "ADClt.n": "Add With Carry (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ADClt.w": "Add With Carry (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ADCgt": "Add With Carry (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ADCgt.n": "Add With Carry (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ADCgt.w": "Add With Carry (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ADCle": "Add With Carry (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ADCle.n": "Add With Carry (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ADCle.w": "Add With Carry (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ADCal": "Add With Carry (Always)",
        "ADCal.n": "Add With Carry (T 16bits encoding) (Always)",
        "ADCal.w": "Add With Carry (T/A 32bits encoding) (Always)",
        "ADCs": "Add With Carry (Update APSR)",
        "ADCs.n": "Add With Carry (T 16bits encoding) (Update APSR)",
        "ADCs.w": "Add With Carry (T/A 32bits encoding) (Update APSR)",
        "ADCseq": "Add With Carry (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ADCseq.n": "Add With Carry (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ADCseq.w": "Add With Carry (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ADCsne": "Add With Carry (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ADCsne.n": "Add With Carry (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ADCsne.w": "Add With Carry (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ADCscs": "Add With Carry (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ADCscs.n": "Add With Carry (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ADCscs.w": "Add With Carry (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ADCscc": "Add With Carry (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ADCscc.n": "Add With Carry (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ADCscc.w": "Add With Carry (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ADCsmi": "Add With Carry (If APSR.N == 1 [Minus]) (Update APSR)",
        "ADCsmi.n": "Add With Carry (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ADCsmi.w": "Add With Carry (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ADCspl": "Add With Carry (If APSR.N == 0 [Plus]) (Update APSR)",
        "ADCspl.n": "Add With Carry (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ADCspl.w": "Add With Carry (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ADCsvs": "Add With Carry (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ADCsvs.n": "Add With Carry (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ADCsvs.w": "Add With Carry (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ADCsvc": "Add With Carry (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ADCsvc.n": "Add With Carry (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ADCsvc.w": "Add With Carry (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ADCshi": "Add With Carry (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ADCshi.n": "Add With Carry (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ADCshi.w": "Add With Carry (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ADCsls": "Add With Carry (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ADCsls.n": "Add With Carry (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ADCsls.w": "Add With Carry (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ADCsge": "Add With Carry (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ADCsge.n": "Add With Carry (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ADCsge.w": "Add With Carry (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ADCslt": "Add With Carry (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ADCslt.n": "Add With Carry (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ADCslt.w": "Add With Carry (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ADCsgt": "Add With Carry (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ADCsgt.n": "Add With Carry (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ADCsgt.w": "Add With Carry (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ADCsle": "Add With Carry (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ADCsle.n": "Add With Carry (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ADCsle.w": "Add With Carry (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ADCsal": "Add With Carry (Always) (Update APSR)",
        "ADCsal.n": "Add With Carry (T 16bits encoding) (Always) (Update APSR)",
        "ADCsal.w": "Add With Carry (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "ADD%{s}%{c}%{q}": {
      "description": "Add %{q} %{c} %{s}",
      "variants": {
        "ADD": "Add",
        "ADD.n": "Add (T 16bits encoding)",
        "ADD.w": "Add (T/A 32bits encoding)",
        "ADDeq": "Add (If APSR.Z == 1 [Equal])",
        "ADDeq.n": "Add (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "ADDeq.w": "Add (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "ADDne": "Add (If APSR.Z == 0 [Not Equal])",
        "ADDne.n": "Add (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ADDne.w": "Add (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ADDcs": "Add (If APSR.C == 1 [Carry Set])",
        "ADDcs.n": "Add (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "ADDcs.w": "Add (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "ADDcc": "Add (If APSR.C == 0 [Carry Clear])",
        "ADDcc.n": "Add (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ADDcc.w": "Add (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ADDmi": "Add (If APSR.N == 1 [Minus])",
        "ADDmi.n": "Add (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "ADDmi.w": "Add (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "ADDpl": "Add (If APSR.N == 0 [Plus])",
        "ADDpl.n": "Add (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "ADDpl.w": "Add (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "ADDvs": "Add (If APSR.V == 1 [Overflow])",
        "ADDvs.n": "Add (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "ADDvs.w": "Add (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "ADDvc": "Add (If APSR.V == 0 [No Overflow])",
        "ADDvc.n": "Add (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "ADDvc.w": "Add (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "ADDhi": "Add (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ADDhi.n": "Add (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ADDhi.w": "Add (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ADDls": "Add (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ADDls.n": "Add (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ADDls.w": "Add (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ADDge": "Add (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ADDge.n": "Add (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ADDge.w": "Add (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ADDlt": "Add (If APSR.N != APSR.V [Signed Lesser Than])",
        "ADDlt.n": "Add (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ADDlt.w": "Add (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ADDgt": "Add (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ADDgt.n": "Add (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ADDgt.w": "Add (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ADDle": "Add (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ADDle.n": "Add (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ADDle.w": "Add (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ADDal": "Add (Always)",
        "ADDal.n": "Add (T 16bits encoding) (Always)",
        "ADDal.w": "Add (T/A 32bits encoding) (Always)",
        "ADDs": "Add (Update APSR)",
        "ADDs.n": "Add (T 16bits encoding) (Update APSR)",
        "ADDs.w": "Add (T/A 32bits encoding) (Update APSR)",
        "ADDseq": "Add (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ADDseq.n": "Add (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ADDseq.w": "Add (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ADDsne": "Add (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ADDsne.n": "Add (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ADDsne.w": "Add (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ADDscs": "Add (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ADDscs.n": "Add (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ADDscs.w": "Add (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ADDscc": "Add (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ADDscc.n": "Add (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ADDscc.w": "Add (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ADDsmi": "Add (If APSR.N == 1 [Minus]) (Update APSR)",
        "ADDsmi.n": "Add (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ADDsmi.w": "Add (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ADDspl": "Add (If APSR.N == 0 [Plus]) (Update APSR)",
        "ADDspl.n": "Add (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ADDspl.w": "Add (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ADDsvs": "Add (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ADDsvs.n": "Add (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ADDsvs.w": "Add (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ADDsvc": "Add (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ADDsvc.n": "Add (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ADDsvc.w": "Add (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ADDshi": "Add (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ADDshi.n": "Add (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ADDshi.w": "Add (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ADDsls": "Add (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ADDsls.n": "Add (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ADDsls.w": "Add (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ADDsge": "Add (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ADDsge.n": "Add (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ADDsge.w": "Add (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ADDslt": "Add (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ADDslt.n": "Add (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ADDslt.w": "Add (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ADDsgt": "Add (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ADDsgt.n": "Add (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ADDsgt.w": "Add (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ADDsle": "Add (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ADDsle.n": "Add (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ADDsle.w": "Add (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ADDsal": "Add (Always) (Update APSR)",
        "ADDsal.n": "Add (T 16bits encoding) (Always) (Update APSR)",
        "ADDsal.w": "Add (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "ADR%{c}%{q}": {
      "description": "Add to PC %{q} %{c}",
      "variants": {
        "ADR": "Add to PC",
        "ADR.n": "Add to PC (T 16bits encoding)",
        "ADR.w": "Add to PC (T/A 32bits encoding)",
        "ADReq": "Add to PC (If APSR.Z == 1 [Equal])",
        "ADReq.n": "Add to PC (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "ADReq.w": "Add to PC (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "ADRne": "Add to PC (If APSR.Z == 0 [Not Equal])",
        "ADRne.n": "Add to PC (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ADRne.w": "Add to PC (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ADRcs": "Add to PC (If APSR.C == 1 [Carry Set])",
        "ADRcs.n": "Add to PC (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "ADRcs.w": "Add to PC (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "ADRcc": "Add to PC (If APSR.C == 0 [Carry Clear])",
        "ADRcc.n": "Add to PC (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ADRcc.w": "Add to PC (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ADRmi": "Add to PC (If APSR.N == 1 [Minus])",
        "ADRmi.n": "Add to PC (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "ADRmi.w": "Add to PC (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "ADRpl": "Add to PC (If APSR.N == 0 [Plus])",
        "ADRpl.n": "Add to PC (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "ADRpl.w": "Add to PC (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "ADRvs": "Add to PC (If APSR.V == 1 [Overflow])",
        "ADRvs.n": "Add to PC (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "ADRvs.w": "Add to PC (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "ADRvc": "Add to PC (If APSR.V == 0 [No Overflow])",
        "ADRvc.n": "Add to PC (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "ADRvc.w": "Add to PC (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "ADRhi": "Add to PC (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ADRhi.n": "Add to PC (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ADRhi.w": "Add to PC (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ADRls": "Add to PC (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ADRls.n": "Add to PC (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ADRls.w": "Add to PC (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ADRge": "Add to PC (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ADRge.n": "Add to PC (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ADRge.w": "Add to PC (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ADRlt": "Add to PC (If APSR.N != APSR.V [Signed Lesser Than])",
        "ADRlt.n": "Add to PC (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ADRlt.w": "Add to PC (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ADRgt": "Add to PC (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ADRgt.n": "Add to PC (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ADRgt.w": "Add to PC (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ADRle": "Add to PC (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ADRle.n": "Add to PC (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ADRle.w": "Add to PC (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ADRal": "Add to PC (Always)",
        "ADRal.n": "Add to PC (T 16bits encoding) (Always)",
        "ADRal.w": "Add to PC (T/A 32bits encoding) (Always)"
      }
    },
    "AND%{s}%{c}%{q}": {
      "description": "Bitwise AND %{q} %{c} %{s}",
      "variants": {
        "AND": "Bitwise AND",
        "AND.n": "Bitwise AND (T 16bits encoding)",
        "AND.w": "Bitwise AND (T/A 32bits encoding)",
        "ANDeq": "Bitwise AND (If APSR.Z == 1 [Equal])",
        "ANDeq.n": "Bitwise AND (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "ANDeq.w": "Bitwise AND (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "ANDne": "Bitwise AND (If APSR.Z == 0 [Not Equal])",
        "ANDne.n": "Bitwise AND (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ANDne.w": "Bitwise AND (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ANDcs": "Bitwise AND (If APSR.C == 1 [Carry Set])",
        "ANDcs.n": "Bitwise AND (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "ANDcs.w": "Bitwise AND (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "ANDcc": "Bitwise AND (If APSR.C == 0 [Carry Clear])",
        "ANDcc.n": "Bitwise AND (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ANDcc.w": "Bitwise AND (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ANDmi": "Bitwise AND (If APSR.N == 1 [Minus])",
        "ANDmi.n": "Bitwise AND (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "ANDmi.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "ANDpl": "Bitwise AND (If APSR.N == 0 [Plus])",
        "ANDpl.n": "Bitwise AND (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "ANDpl.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "ANDvs": "Bitwise AND (If APSR.V == 1 [Overflow])",
        "ANDvs.n": "Bitwise AND (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "ANDvs.w": "Bitwise AND (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "ANDvc": "Bitwise AND (If APSR.V == 0 [No Overflow])",
        "ANDvc.n": "Bitwise AND (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "ANDvc.w": "Bitwise AND (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "ANDhi": "Bitwise AND (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ANDhi.n": "Bitwise AND (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ANDhi.w": "Bitwise AND (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ANDls": "Bitwise AND (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ANDls.n": "Bitwise AND (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ANDls.w": "Bitwise AND (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ANDge": "Bitwise AND (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ANDge.n": "Bitwise AND (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ANDge.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ANDlt": "Bitwise AND (If APSR.N != APSR.V [Signed Lesser Than])",
        "ANDlt.n": "Bitwise AND (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ANDlt.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ANDgt": "Bitwise AND (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ANDgt.n": "Bitwise AND (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ANDgt.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ANDle": "Bitwise AND (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ANDle.n": "Bitwise AND (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ANDle.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ANDal": "Bitwise AND (Always)",
        "ANDal.n": "Bitwise AND (T 16bits encoding) (Always)",
        "ANDal.w": "Bitwise AND (T/A 32bits encoding) (Always)",
        "ANDs": "Bitwise AND (Update APSR)",
        "ANDs.n": "Bitwise AND (T 16bits encoding) (Update APSR)",
        "ANDs.w": "Bitwise AND (T/A 32bits encoding) (Update APSR)",
        "ANDseq": "Bitwise AND (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ANDseq.n": "Bitwise AND (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ANDseq.w": "Bitwise AND (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ANDsne": "Bitwise AND (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ANDsne.n": "Bitwise AND (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ANDsne.w": "Bitwise AND (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ANDscs": "Bitwise AND (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ANDscs.n": "Bitwise AND (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ANDscs.w": "Bitwise AND (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ANDscc": "Bitwise AND (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ANDscc.n": "Bitwise AND (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ANDscc.w": "Bitwise AND (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ANDsmi": "Bitwise AND (If APSR.N == 1 [Minus]) (Update APSR)",
        "ANDsmi.n": "Bitwise AND (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ANDsmi.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ANDspl": "Bitwise AND (If APSR.N == 0 [Plus]) (Update APSR)",
        "ANDspl.n": "Bitwise AND (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ANDspl.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ANDsvs": "Bitwise AND (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ANDsvs.n": "Bitwise AND (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ANDsvs.w": "Bitwise AND (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ANDsvc": "Bitwise AND (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ANDsvc.n": "Bitwise AND (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ANDsvc.w": "Bitwise AND (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ANDshi": "Bitwise AND (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ANDshi.n": "Bitwise AND (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ANDshi.w": "Bitwise AND (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ANDsls": "Bitwise AND (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ANDsls.n": "Bitwise AND (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ANDsls.w": "Bitwise AND (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ANDsge": "Bitwise AND (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ANDsge.n": "Bitwise AND (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ANDsge.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ANDslt": "Bitwise AND (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ANDslt.n": "Bitwise AND (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ANDslt.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ANDsgt": "Bitwise AND (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ANDsgt.n": "Bitwise AND (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ANDsgt.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ANDsle": "Bitwise AND (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ANDsle.n": "Bitwise AND (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ANDsle.w": "Bitwise AND (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ANDsal": "Bitwise AND (Always) (Update APSR)",
        "ANDsal.n": "Bitwise AND (T 16bits encoding) (Always) (Update APSR)",
        "ANDsal.w": "Bitwise AND (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "ASR%{s}%{c}%{q}": {
      "description": "Arithmetic Shift Right %{q} %{c}  %{s}",
      "variants": {
        "ASR": "Arithmetic Shift Right",
        "ASR.n": "Arithmetic Shift Right (T 16bits encoding)",
        "ASR.w": "Arithmetic Shift Right (T/A 32bits encoding)",
        "ASReq": "Arithmetic Shift Right (If APSR.Z == 1 [Equal])",
        "ASReq.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "ASReq.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "ASRne": "Arithmetic Shift Right (If APSR.Z == 0 [Not Equal])",
        "ASRne.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ASRne.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ASRcs": "Arithmetic Shift Right (If APSR.C == 1 [Carry Set])",
        "ASRcs.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "ASRcs.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "ASRcc": "Arithmetic Shift Right (If APSR.C == 0 [Carry Clear])",
        "ASRcc.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ASRcc.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ASRmi": "Arithmetic Shift Right (If APSR.N == 1 [Minus])",
        "ASRmi.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "ASRmi.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "ASRpl": "Arithmetic Shift Right (If APSR.N == 0 [Plus])",
        "ASRpl.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "ASRpl.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "ASRvs": "Arithmetic Shift Right (If APSR.V == 1 [Overflow])",
        "ASRvs.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "ASRvs.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "ASRvc": "Arithmetic Shift Right (If APSR.V == 0 [No Overflow])",
        "ASRvc.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "ASRvc.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "ASRhi": "Arithmetic Shift Right (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ASRhi.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ASRhi.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ASRls": "Arithmetic Shift Right (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ASRls.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ASRls.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ASRge": "Arithmetic Shift Right (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ASRge.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ASRge.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ASRlt": "Arithmetic Shift Right (If APSR.N != APSR.V [Signed Lesser Than])",
        "ASRlt.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ASRlt.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ASRgt": "Arithmetic Shift Right (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ASRgt.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ASRgt.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ASRle": "Arithmetic Shift Right (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ASRle.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ASRle.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ASRal": "Arithmetic Shift Right (Always)",
        "ASRal.n": "Arithmetic Shift Right (T 16bits encoding) (Always)",
        "ASRal.w": "Arithmetic Shift Right (T/A 32bits encoding) (Always)",
        "ASRs": "Arithmetic Shift Right (Update APSR)",
        "ASRs.n": "Arithmetic Shift Right (T 16bits encoding) (Update APSR)",
        "ASRs.w": "Arithmetic Shift Right (T/A 32bits encoding) (Update APSR)",
        "ASRseq": "Arithmetic Shift Right (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ASRseq.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ASRseq.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ASRsne": "Arithmetic Shift Right (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ASRsne.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ASRsne.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ASRscs": "Arithmetic Shift Right (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ASRscs.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ASRscs.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ASRscc": "Arithmetic Shift Right (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ASRscc.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ASRscc.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ASRsmi": "Arithmetic Shift Right (If APSR.N == 1 [Minus]) (Update APSR)",
        "ASRsmi.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ASRsmi.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ASRspl": "Arithmetic Shift Right (If APSR.N == 0 [Plus]) (Update APSR)",
        "ASRspl.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ASRspl.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ASRsvs": "Arithmetic Shift Right (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ASRsvs.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ASRsvs.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ASRsvc": "Arithmetic Shift Right (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ASRsvc.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ASRsvc.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ASRshi": "Arithmetic Shift Right (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ASRshi.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ASRshi.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ASRsls": "Arithmetic Shift Right (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ASRsls.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ASRsls.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ASRsge": "Arithmetic Shift Right (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ASRsge.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ASRsge.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ASRslt": "Arithmetic Shift Right (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ASRslt.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ASRslt.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ASRsgt": "Arithmetic Shift Right (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ASRsgt.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ASRsgt.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ASRsle": "Arithmetic Shift Right (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ASRsle.n": "Arithmetic Shift Right (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ASRsle.w": "Arithmetic Shift Right (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ASRsal": "Arithmetic Shift Right (Always) (Update APSR)",
        "ASRsal.n": "Arithmetic Shift Right (T 16bits encoding) (Always) (Update APSR)",
        "ASRsal.w": "Arithmetic Shift Right (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "B%{c}%{q}": {
      "description": "Branch %{q} %{c}",
      "variants": {
        "B": "Branch",
        "B.n": "Branch (T 16bits encoding)",
        "B.w": "Branch (T/A 32bits encoding)",
        "Beq": "Branch (If APSR.Z == 1 [Equal])",
        "Beq.n": "Branch (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "Beq.w": "Branch (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "Bne": "Branch (If APSR.Z == 0 [Not Equal])",
        "Bne.n": "Branch (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "Bne.w": "Branch (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "Bcs": "Branch (If APSR.C == 1 [Carry Set])",
        "Bcs.n": "Branch (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "Bcs.w": "Branch (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "Bcc": "Branch (If APSR.C == 0 [Carry Clear])",
        "Bcc.n": "Branch (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "Bcc.w": "Branch (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "Bmi": "Branch (If APSR.N == 1 [Minus])",
        "Bmi.n": "Branch (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "Bmi.w": "Branch (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "Bpl": "Branch (If APSR.N == 0 [Plus])",
        "Bpl.n": "Branch (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "Bpl.w": "Branch (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "Bvs": "Branch (If APSR.V == 1 [Overflow])",
        "Bvs.n": "Branch (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "Bvs.w": "Branch (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "Bvc": "Branch (If APSR.V == 0 [No Overflow])",
        "Bvc.n": "Branch (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "Bvc.w": "Branch (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "Bhi": "Branch (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "Bhi.n": "Branch (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "Bhi.w": "Branch (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "Bls": "Branch (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "Bls.n": "Branch (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "Bls.w": "Branch (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "Bge": "Branch (If APSR.N == APSR.V [Signed Greater or Equal])",
        "Bge.n": "Branch (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "Bge.w": "Branch (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "Blt": "Branch (If APSR.N != APSR.V [Signed Lesser Than])",
        "Blt.n": "Branch (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "Blt.w": "Branch (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "Bgt": "Branch (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "Bgt.n": "Branch (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "Bgt.w": "Branch (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "Ble": "Branch (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "Ble.n": "Branch (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "Ble.w": "Branch (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "Bal": "Branch (Always)",
        "Bal.n": "Branch (T 16bits encoding) (Always)",
        "Bal.w": "Branch (T/A 32bits encoding) (Always)"
      }
    },
    "BFC%{c}%{q}": {
      "description": "Bit Field Clear %{q} %{c}",
      "variants": {
        "BFC": "Bit Field Clear",
        "BFC.n": "Bit Field Clear (T 16bits encoding)",
        "BFC.w": "Bit Field Clear (T/A 32bits encoding)",
        "BFCeq": "Bit Field Clear (If APSR.Z == 1 [Equal])",
        "BFCeq.n": "Bit Field Clear (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "BFCeq.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "BFCne": "Bit Field Clear (If APSR.Z == 0 [Not Equal])",
        "BFCne.n": "Bit Field Clear (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BFCne.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BFCcs": "Bit Field Clear (If APSR.C == 1 [Carry Set])",
        "BFCcs.n": "Bit Field Clear (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "BFCcs.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "BFCcc": "Bit Field Clear (If APSR.C == 0 [Carry Clear])",
        "BFCcc.n": "Bit Field Clear (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BFCcc.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BFCmi": "Bit Field Clear (If APSR.N == 1 [Minus])",
        "BFCmi.n": "Bit Field Clear (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "BFCmi.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "BFCpl": "Bit Field Clear (If APSR.N == 0 [Plus])",
        "BFCpl.n": "Bit Field Clear (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "BFCpl.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "BFCvs": "Bit Field Clear (If APSR.V == 1 [Overflow])",
        "BFCvs.n": "Bit Field Clear (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "BFCvs.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "BFCvc": "Bit Field Clear (If APSR.V == 0 [No Overflow])",
        "BFCvc.n": "Bit Field Clear (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "BFCvc.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "BFChi": "Bit Field Clear (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BFChi.n": "Bit Field Clear (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BFChi.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BFCls": "Bit Field Clear (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BFCls.n": "Bit Field Clear (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BFCls.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BFCge": "Bit Field Clear (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BFCge.n": "Bit Field Clear (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BFCge.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BFClt": "Bit Field Clear (If APSR.N != APSR.V [Signed Lesser Than])",
        "BFClt.n": "Bit Field Clear (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BFClt.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BFCgt": "Bit Field Clear (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BFCgt.n": "Bit Field Clear (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BFCgt.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BFCle": "Bit Field Clear (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BFCle.n": "Bit Field Clear (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BFCle.w": "Bit Field Clear (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BFCal": "Bit Field Clear (Always)",
        "BFCal.n": "Bit Field Clear (T 16bits encoding) (Always)",
        "BFCal.w": "Bit Field Clear (T/A 32bits encoding) (Always)"
      }
    },
    "BFI%{c}%{q}": {
      "description": "Bit Field Insert %{q} %{c}",
      "variants": {
        "BFI": "Bit Field Insert",
        "BFI.n": "Bit Field Insert (T 16bits encoding)",
        "BFI.w": "Bit Field Insert (T/A 32bits encoding)",
        "BFIeq": "Bit Field Insert (If APSR.Z == 1 [Equal])",
        "BFIeq.n": "Bit Field Insert (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "BFIeq.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "BFIne": "Bit Field Insert (If APSR.Z == 0 [Not Equal])",
        "BFIne.n": "Bit Field Insert (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BFIne.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BFIcs": "Bit Field Insert (If APSR.C == 1 [Carry Set])",
        "BFIcs.n": "Bit Field Insert (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "BFIcs.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "BFIcc": "Bit Field Insert (If APSR.C == 0 [Carry Clear])",
        "BFIcc.n": "Bit Field Insert (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BFIcc.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BFImi": "Bit Field Insert (If APSR.N == 1 [Minus])",
        "BFImi.n": "Bit Field Insert (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "BFImi.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "BFIpl": "Bit Field Insert (If APSR.N == 0 [Plus])",
        "BFIpl.n": "Bit Field Insert (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "BFIpl.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "BFIvs": "Bit Field Insert (If APSR.V == 1 [Overflow])",
        "BFIvs.n": "Bit Field Insert (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "BFIvs.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "BFIvc": "Bit Field Insert (If APSR.V == 0 [No Overflow])",
        "BFIvc.n": "Bit Field Insert (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "BFIvc.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "BFIhi": "Bit Field Insert (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BFIhi.n": "Bit Field Insert (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BFIhi.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BFIls": "Bit Field Insert (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BFIls.n": "Bit Field Insert (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BFIls.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BFIge": "Bit Field Insert (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BFIge.n": "Bit Field Insert (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BFIge.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BFIlt": "Bit Field Insert (If APSR.N != APSR.V [Signed Lesser Than])",
        "BFIlt.n": "Bit Field Insert (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BFIlt.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BFIgt": "Bit Field Insert (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BFIgt.n": "Bit Field Insert (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BFIgt.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BFIle": "Bit Field Insert (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BFIle.n": "Bit Field Insert (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BFIle.w": "Bit Field Insert (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BFIal": "Bit Field Insert (Always)",
        "BFIal.n": "Bit Field Insert (T 16bits encoding) (Always)",
        "BFIal.w": "Bit Field Insert (T/A 32bits encoding) (Always)"
      }
    },
    "BIC%{s}%{c}%{q}": {
      "description": "Bitwise Bit Clear %{q} %{c} %{s}",
      "variants": {
        "BIC": "Bitwise Bit Clear",
        "BIC.n": "Bitwise Bit Clear (T 16bits encoding)",
        "BIC.w": "Bitwise Bit Clear (T/A 32bits encoding)",
        "BICeq": "Bitwise Bit Clear (If APSR.Z == 1 [Equal])",
        "BICeq.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "BICeq.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "BICne": "Bitwise Bit Clear (If APSR.Z == 0 [Not Equal])",
        "BICne.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BICne.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BICcs": "Bitwise Bit Clear (If APSR.C == 1 [Carry Set])",
        "BICcs.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "BICcs.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "BICcc": "Bitwise Bit Clear (If APSR.C == 0 [Carry Clear])",
        "BICcc.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BICcc.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BICmi": "Bitwise Bit Clear (If APSR.N == 1 [Minus])",
        "BICmi.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "BICmi.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "BICpl": "Bitwise Bit Clear (If APSR.N == 0 [Plus])",
        "BICpl.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "BICpl.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "BICvs": "Bitwise Bit Clear (If APSR.V == 1 [Overflow])",
        "BICvs.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "BICvs.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "BICvc": "Bitwise Bit Clear (If APSR.V == 0 [No Overflow])",
        "BICvc.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "BICvc.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "BIChi": "Bitwise Bit Clear (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BIChi.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BIChi.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BICls": "Bitwise Bit Clear (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BICls.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BICls.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BICge": "Bitwise Bit Clear (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BICge.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BICge.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BIClt": "Bitwise Bit Clear (If APSR.N != APSR.V [Signed Lesser Than])",
        "BIClt.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BIClt.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BICgt": "Bitwise Bit Clear (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BICgt.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BICgt.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BICle": "Bitwise Bit Clear (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BICle.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BICle.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BICal": "Bitwise Bit Clear (Always)",
        "BICal.n": "Bitwise Bit Clear (T 16bits encoding) (Always)",
        "BICal.w": "Bitwise Bit Clear (T/A 32bits encoding) (Always)",
        "BICs": "Bitwise Bit Clear (Update APSR)",
        "BICs.n": "Bitwise Bit Clear (T 16bits encoding) (Update APSR)",
        "BICs.w": "Bitwise Bit Clear (T/A 32bits encoding) (Update APSR)",
        "BICseq": "Bitwise Bit Clear (If APSR.Z == 1 [Equal]) (Update APSR)",
        "BICseq.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "BICseq.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "BICsne": "Bitwise Bit Clear (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "BICsne.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "BICsne.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "BICscs": "Bitwise Bit Clear (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "BICscs.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "BICscs.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "BICscc": "Bitwise Bit Clear (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "BICscc.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "BICscc.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "BICsmi": "Bitwise Bit Clear (If APSR.N == 1 [Minus]) (Update APSR)",
        "BICsmi.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "BICsmi.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "BICspl": "Bitwise Bit Clear (If APSR.N == 0 [Plus]) (Update APSR)",
        "BICspl.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "BICspl.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "BICsvs": "Bitwise Bit Clear (If APSR.V == 1 [Overflow]) (Update APSR)",
        "BICsvs.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "BICsvs.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "BICsvc": "Bitwise Bit Clear (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "BICsvc.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "BICsvc.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "BICshi": "Bitwise Bit Clear (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "BICshi.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "BICshi.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "BICsls": "Bitwise Bit Clear (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "BICsls.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "BICsls.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "BICsge": "Bitwise Bit Clear (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "BICsge.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "BICsge.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "BICslt": "Bitwise Bit Clear (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "BICslt.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "BICslt.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "BICsgt": "Bitwise Bit Clear (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "BICsgt.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "BICsgt.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "BICsle": "Bitwise Bit Clear (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "BICsle.n": "Bitwise Bit Clear (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "BICsle.w": "Bitwise Bit Clear (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "BICsal": "Bitwise Bit Clear (Always) (Update APSR)",
        "BICsal.n": "Bitwise Bit Clear (T 16bits encoding) (Always) (Update APSR)",
        "BICsal.w": "Bitwise Bit Clear (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "BKPT%{q}": {
      "description": "Breakpoint %{q}",
      "variants": {
        "BKPT": "Breakpoint",
        "BKPT.n": "Breakpoint (T 16bits encoding)",
        "BKPT.w": "Breakpoint (T/A 32bits encoding)"
      }
    },
    "BL%{x}%{c}%{q}": {
      "description": "Branch with Link %{x} %{q} %{c}",
      "variants": {
        "BL": "Branch with Link",
        "BL.n": "Branch with Link (T 16bits encoding)",
        "BL.w": "Branch with Link (T/A 32bits encoding)",
        "BLeq": "Branch with Link (If APSR.Z == 1 [Equal])",
        "BLeq.n": "Branch with Link (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "BLeq.w": "Branch with Link (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "BLne": "Branch with Link (If APSR.Z == 0 [Not Equal])",
        "BLne.n": "Branch with Link (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BLne.w": "Branch with Link (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BLcs": "Branch with Link (If APSR.C == 1 [Carry Set])",
        "BLcs.n": "Branch with Link (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "BLcs.w": "Branch with Link (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "BLcc": "Branch with Link (If APSR.C == 0 [Carry Clear])",
        "BLcc.n": "Branch with Link (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BLcc.w": "Branch with Link (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BLmi": "Branch with Link (If APSR.N == 1 [Minus])",
        "BLmi.n": "Branch with Link (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "BLmi.w": "Branch with Link (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "BLpl": "Branch with Link (If APSR.N == 0 [Plus])",
        "BLpl.n": "Branch with Link (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "BLpl.w": "Branch with Link (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "BLvs": "Branch with Link (If APSR.V == 1 [Overflow])",
        "BLvs.n": "Branch with Link (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "BLvs.w": "Branch with Link (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "BLvc": "Branch with Link (If APSR.V == 0 [No Overflow])",
        "BLvc.n": "Branch with Link (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "BLvc.w": "Branch with Link (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "BLhi": "Branch with Link (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BLhi.n": "Branch with Link (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BLhi.w": "Branch with Link (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BLls": "Branch with Link (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BLls.n": "Branch with Link (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BLls.w": "Branch with Link (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BLge": "Branch with Link (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BLge.n": "Branch with Link (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BLge.w": "Branch with Link (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BLlt": "Branch with Link (If APSR.N != APSR.V [Signed Lesser Than])",
        "BLlt.n": "Branch with Link (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BLlt.w": "Branch with Link (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BLgt": "Branch with Link (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BLgt.n": "Branch with Link (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BLgt.w": "Branch with Link (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BLle": "Branch with Link (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BLle.n": "Branch with Link (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BLle.w": "Branch with Link (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BLal": "Branch with Link (Always)",
        "BLal.n": "Branch with Link (T 16bits encoding) (Always)",
        "BLal.w": "Branch with Link (T/A 32bits encoding) (Always)",
        "BLx": "Branch with Link with Exchange",
        "BLx.n": "Branch with Link with Exchange (T 16bits encoding)",
        "BLx.w": "Branch with Link with Exchange (T/A 32bits encoding)",
        "BLxeq": "Branch with Link with Exchange (If APSR.Z == 1 [Equal])",
        "BLxeq.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "BLxeq.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "BLxne": "Branch with Link with Exchange (If APSR.Z == 0 [Not Equal])",
        "BLxne.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BLxne.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BLxcs": "Branch with Link with Exchange (If APSR.C == 1 [Carry Set])",
        "BLxcs.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "BLxcs.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "BLxcc": "Branch with Link with Exchange (If APSR.C == 0 [Carry Clear])",
        "BLxcc.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BLxcc.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BLxmi": "Branch with Link with Exchange (If APSR.N == 1 [Minus])",
        "BLxmi.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "BLxmi.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "BLxpl": "Branch with Link with Exchange (If APSR.N == 0 [Plus])",
        "BLxpl.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "BLxpl.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "BLxvs": "Branch with Link with Exchange (If APSR.V == 1 [Overflow])",
        "BLxvs.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "BLxvs.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "BLxvc": "Branch with Link with Exchange (If APSR.V == 0 [No Overflow])",
        "BLxvc.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "BLxvc.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "BLxhi": "Branch with Link with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BLxhi.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BLxhi.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BLxls": "Branch with Link with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BLxls.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BLxls.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BLxge": "Branch with Link with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BLxge.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BLxge.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BLxlt": "Branch with Link with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "BLxlt.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BLxlt.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BLxgt": "Branch with Link with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BLxgt.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BLxgt.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BLxle": "Branch with Link with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BLxle.n": "Branch with Link with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BLxle.w": "Branch with Link with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BLxal": "Branch with Link with Exchange (Always)",
        "BLxal.n": "Branch with Link with Exchange (T 16bits encoding) (Always)",
        "BLxal.w": "Branch with Link with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "BX%{c}%{q}": {
      "description": "Branch and Exchange %{q} %{c}",
      "variants": {
        "BX": "Branch and Exchange",
        "BX.n": "Branch and Exchange (T 16bits encoding)",
        "BX.w": "Branch and Exchange (T/A 32bits encoding)",
        "BXeq": "Branch and Exchange (If APSR.Z == 1 [Equal])",
        "BXeq.n": "Branch and Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "BXeq.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "BXne": "Branch and Exchange (If APSR.Z == 0 [Not Equal])",
        "BXne.n": "Branch and Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BXne.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BXcs": "Branch and Exchange (If APSR.C == 1 [Carry Set])",
        "BXcs.n": "Branch and Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "BXcs.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "BXcc": "Branch and Exchange (If APSR.C == 0 [Carry Clear])",
        "BXcc.n": "Branch and Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BXcc.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BXmi": "Branch and Exchange (If APSR.N == 1 [Minus])",
        "BXmi.n": "Branch and Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "BXmi.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "BXpl": "Branch and Exchange (If APSR.N == 0 [Plus])",
        "BXpl.n": "Branch and Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "BXpl.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "BXvs": "Branch and Exchange (If APSR.V == 1 [Overflow])",
        "BXvs.n": "Branch and Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "BXvs.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "BXvc": "Branch and Exchange (If APSR.V == 0 [No Overflow])",
        "BXvc.n": "Branch and Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "BXvc.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "BXhi": "Branch and Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BXhi.n": "Branch and Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BXhi.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BXls": "Branch and Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BXls.n": "Branch and Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BXls.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BXge": "Branch and Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BXge.n": "Branch and Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BXge.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BXlt": "Branch and Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "BXlt.n": "Branch and Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BXlt.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BXgt": "Branch and Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BXgt.n": "Branch and Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BXgt.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BXle": "Branch and Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BXle.n": "Branch and Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BXle.w": "Branch and Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BXal": "Branch and Exchange (Always)",
        "BXal.n": "Branch and Exchange (T 16bits encoding) (Always)",
        "BXal.w": "Branch and Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "BXJ%{c}%{q}": {
      "description": "Branch and Exchange Jazelle %{q} %{c}",
      "variants": {
        "BXJ": "Branch and Exchange Jazelle",
        "BXJ.n": "Branch and Exchange Jazelle (T 16bits encoding)",
        "BXJ.w": "Branch and Exchange Jazelle (T/A 32bits encoding)",
        "BXJeq": "Branch and Exchange Jazelle (If APSR.Z == 1 [Equal])",
        "BXJeq.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "BXJeq.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "BXJne": "Branch and Exchange Jazelle (If APSR.Z == 0 [Not Equal])",
        "BXJne.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BXJne.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "BXJcs": "Branch and Exchange Jazelle (If APSR.C == 1 [Carry Set])",
        "BXJcs.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "BXJcs.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "BXJcc": "Branch and Exchange Jazelle (If APSR.C == 0 [Carry Clear])",
        "BXJcc.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BXJcc.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "BXJmi": "Branch and Exchange Jazelle (If APSR.N == 1 [Minus])",
        "BXJmi.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "BXJmi.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "BXJpl": "Branch and Exchange Jazelle (If APSR.N == 0 [Plus])",
        "BXJpl.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "BXJpl.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "BXJvs": "Branch and Exchange Jazelle (If APSR.V == 1 [Overflow])",
        "BXJvs.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "BXJvs.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "BXJvc": "Branch and Exchange Jazelle (If APSR.V == 0 [No Overflow])",
        "BXJvc.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "BXJvc.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "BXJhi": "Branch and Exchange Jazelle (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BXJhi.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BXJhi.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "BXJls": "Branch and Exchange Jazelle (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BXJls.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BXJls.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "BXJge": "Branch and Exchange Jazelle (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BXJge.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BXJge.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "BXJlt": "Branch and Exchange Jazelle (If APSR.N != APSR.V [Signed Lesser Than])",
        "BXJlt.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BXJlt.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "BXJgt": "Branch and Exchange Jazelle (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BXJgt.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BXJgt.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "BXJle": "Branch and Exchange Jazelle (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BXJle.n": "Branch and Exchange Jazelle (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BXJle.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "BXJal": "Branch and Exchange Jazelle (Always)",
        "BXJal.n": "Branch and Exchange Jazelle (T 16bits encoding) (Always)",
        "BXJal.w": "Branch and Exchange Jazelle (T/A 32bits encoding) (Always)"
      }
    },
    "CB%{non}Z": {
      "description": "Compare and Branch on %{non}Zero",
      "variants": {
        "CBZ": "Compare and Branch on Zero",
        "CBnZ": "Compare and Branch on Non-Zero"
      }
    },
    "CDP%{coproc_2}%{c}%{q}": {
      "description": "Coprocessor Data Processing %{coproc_2} %{q} %{c}",
      "variants": {
        "CDP": "Coprocessor Data Processing",
        "CDP.n": "Coprocessor Data Processing (T 16bits encoding)",
        "CDP.w": "Coprocessor Data Processing (T/A 32bits encoding)",
        "CDPeq": "Coprocessor Data Processing (If APSR.Z == 1 [Equal])",
        "CDPeq.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "CDPeq.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "CDPne": "Coprocessor Data Processing (If APSR.Z == 0 [Not Equal])",
        "CDPne.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CDPne.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CDPcs": "Coprocessor Data Processing (If APSR.C == 1 [Carry Set])",
        "CDPcs.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "CDPcs.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "CDPcc": "Coprocessor Data Processing (If APSR.C == 0 [Carry Clear])",
        "CDPcc.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CDPcc.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CDPmi": "Coprocessor Data Processing (If APSR.N == 1 [Minus])",
        "CDPmi.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "CDPmi.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "CDPpl": "Coprocessor Data Processing (If APSR.N == 0 [Plus])",
        "CDPpl.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "CDPpl.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "CDPvs": "Coprocessor Data Processing (If APSR.V == 1 [Overflow])",
        "CDPvs.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "CDPvs.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "CDPvc": "Coprocessor Data Processing (If APSR.V == 0 [No Overflow])",
        "CDPvc.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "CDPvc.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "CDPhi": "Coprocessor Data Processing (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CDPhi.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CDPhi.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CDPls": "Coprocessor Data Processing (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CDPls.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CDPls.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CDPge": "Coprocessor Data Processing (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CDPge.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CDPge.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CDPlt": "Coprocessor Data Processing (If APSR.N != APSR.V [Signed Lesser Than])",
        "CDPlt.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CDPlt.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CDPgt": "Coprocessor Data Processing (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CDPgt.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CDPgt.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CDPle": "Coprocessor Data Processing (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CDPle.n": "Coprocessor Data Processing (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CDPle.w": "Coprocessor Data Processing (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CDPal": "Coprocessor Data Processing (Always)",
        "CDPal.n": "Coprocessor Data Processing (T 16bits encoding) (Always)",
        "CDPal.w": "Coprocessor Data Processing (T/A 32bits encoding) (Always)",
        "CDP2": "Coprocessor Data Processing (2nd T/A encoding)",
        "CDP2.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding)",
        "CDP2.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding)",
        "CDP2eq": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.Z == 1 [Equal])",
        "CDP2eq.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "CDP2eq.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "CDP2ne": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.Z == 0 [Not Equal])",
        "CDP2ne.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CDP2ne.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CDP2cs": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.C == 1 [Carry Set])",
        "CDP2cs.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "CDP2cs.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "CDP2cc": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.C == 0 [Carry Clear])",
        "CDP2cc.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CDP2cc.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CDP2mi": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.N == 1 [Minus])",
        "CDP2mi.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "CDP2mi.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "CDP2pl": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.N == 0 [Plus])",
        "CDP2pl.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "CDP2pl.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "CDP2vs": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.V == 1 [Overflow])",
        "CDP2vs.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "CDP2vs.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "CDP2vc": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.V == 0 [No Overflow])",
        "CDP2vc.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "CDP2vc.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "CDP2hi": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CDP2hi.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CDP2hi.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CDP2ls": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CDP2ls.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CDP2ls.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CDP2ge": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CDP2ge.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CDP2ge.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CDP2lt": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CDP2lt.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CDP2lt.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CDP2gt": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CDP2gt.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CDP2gt.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CDP2le": "Coprocessor Data Processing (2nd T/A encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CDP2le.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CDP2le.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CDP2al": "Coprocessor Data Processing (2nd T/A encoding) (Always)",
        "CDP2al.n": "Coprocessor Data Processing (2nd T/A encoding) (T 16bits encoding) (Always)",
        "CDP2al.w": "Coprocessor Data Processing (2nd T/A encoding) (T/A 32bits encoding) (Always)"
      }
    },
    "CHKA%{c}%{q}": {
      "description": "Check Array %{q} %{c}",
      "variants": {
        "CHKA": "Check Array",
        "CHKA.n": "Check Array (T 16bits encoding)",
        "CHKA.w": "Check Array (T/A 32bits encoding)",
        "CHKAeq": "Check Array (If APSR.Z == 1 [Equal])",
        "CHKAeq.n": "Check Array (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "CHKAeq.w": "Check Array (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "CHKAne": "Check Array (If APSR.Z == 0 [Not Equal])",
        "CHKAne.n": "Check Array (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CHKAne.w": "Check Array (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CHKAcs": "Check Array (If APSR.C == 1 [Carry Set])",
        "CHKAcs.n": "Check Array (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "CHKAcs.w": "Check Array (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "CHKAcc": "Check Array (If APSR.C == 0 [Carry Clear])",
        "CHKAcc.n": "Check Array (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CHKAcc.w": "Check Array (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CHKAmi": "Check Array (If APSR.N == 1 [Minus])",
        "CHKAmi.n": "Check Array (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "CHKAmi.w": "Check Array (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "CHKApl": "Check Array (If APSR.N == 0 [Plus])",
        "CHKApl.n": "Check Array (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "CHKApl.w": "Check Array (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "CHKAvs": "Check Array (If APSR.V == 1 [Overflow])",
        "CHKAvs.n": "Check Array (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "CHKAvs.w": "Check Array (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "CHKAvc": "Check Array (If APSR.V == 0 [No Overflow])",
        "CHKAvc.n": "Check Array (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "CHKAvc.w": "Check Array (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "CHKAhi": "Check Array (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CHKAhi.n": "Check Array (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CHKAhi.w": "Check Array (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CHKAls": "Check Array (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CHKAls.n": "Check Array (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CHKAls.w": "Check Array (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CHKAge": "Check Array (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CHKAge.n": "Check Array (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CHKAge.w": "Check Array (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CHKAlt": "Check Array (If APSR.N != APSR.V [Signed Lesser Than])",
        "CHKAlt.n": "Check Array (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CHKAlt.w": "Check Array (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CHKAgt": "Check Array (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CHKAgt.n": "Check Array (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CHKAgt.w": "Check Array (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CHKAle": "Check Array (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CHKAle.n": "Check Array (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CHKAle.w": "Check Array (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CHKAal": "Check Array (Always)",
        "CHKAal.n": "Check Array (T 16bits encoding) (Always)",
        "CHKAal.w": "Check Array (T/A 32bits encoding) (Always)"
      }
    },
    "CLREX%{c}%{q}": {
      "description": "Clear-Exclusive %{q} %{c}",
      "variants": {
        "CLREX": "Clear-Exclusive",
        "CLREX.n": "Clear-Exclusive (T 16bits encoding)",
        "CLREX.w": "Clear-Exclusive (T/A 32bits encoding)",
        "CLREXeq": "Clear-Exclusive (If APSR.Z == 1 [Equal])",
        "CLREXeq.n": "Clear-Exclusive (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "CLREXeq.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "CLREXne": "Clear-Exclusive (If APSR.Z == 0 [Not Equal])",
        "CLREXne.n": "Clear-Exclusive (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CLREXne.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CLREXcs": "Clear-Exclusive (If APSR.C == 1 [Carry Set])",
        "CLREXcs.n": "Clear-Exclusive (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "CLREXcs.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "CLREXcc": "Clear-Exclusive (If APSR.C == 0 [Carry Clear])",
        "CLREXcc.n": "Clear-Exclusive (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CLREXcc.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CLREXmi": "Clear-Exclusive (If APSR.N == 1 [Minus])",
        "CLREXmi.n": "Clear-Exclusive (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "CLREXmi.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "CLREXpl": "Clear-Exclusive (If APSR.N == 0 [Plus])",
        "CLREXpl.n": "Clear-Exclusive (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "CLREXpl.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "CLREXvs": "Clear-Exclusive (If APSR.V == 1 [Overflow])",
        "CLREXvs.n": "Clear-Exclusive (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "CLREXvs.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "CLREXvc": "Clear-Exclusive (If APSR.V == 0 [No Overflow])",
        "CLREXvc.n": "Clear-Exclusive (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "CLREXvc.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "CLREXhi": "Clear-Exclusive (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CLREXhi.n": "Clear-Exclusive (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CLREXhi.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CLREXls": "Clear-Exclusive (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CLREXls.n": "Clear-Exclusive (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CLREXls.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CLREXge": "Clear-Exclusive (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CLREXge.n": "Clear-Exclusive (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CLREXge.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CLREXlt": "Clear-Exclusive (If APSR.N != APSR.V [Signed Lesser Than])",
        "CLREXlt.n": "Clear-Exclusive (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CLREXlt.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CLREXgt": "Clear-Exclusive (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CLREXgt.n": "Clear-Exclusive (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CLREXgt.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CLREXle": "Clear-Exclusive (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CLREXle.n": "Clear-Exclusive (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CLREXle.w": "Clear-Exclusive (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CLREXal": "Clear-Exclusive (Always)",
        "CLREXal.n": "Clear-Exclusive (T 16bits encoding) (Always)",
        "CLREXal.w": "Clear-Exclusive (T/A 32bits encoding) (Always)"
      }
    },
    "CLZ%{c}%{q}": {
      "description": "Count Leading Zeros %{q} %{c}",
      "variants": {
        "CLZ": "Count Leading Zeros",
        "CLZ.n": "Count Leading Zeros (T 16bits encoding)",
        "CLZ.w": "Count Leading Zeros (T/A 32bits encoding)",
        "CLZeq": "Count Leading Zeros (If APSR.Z == 1 [Equal])",
        "CLZeq.n": "Count Leading Zeros (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "CLZeq.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "CLZne": "Count Leading Zeros (If APSR.Z == 0 [Not Equal])",
        "CLZne.n": "Count Leading Zeros (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CLZne.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CLZcs": "Count Leading Zeros (If APSR.C == 1 [Carry Set])",
        "CLZcs.n": "Count Leading Zeros (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "CLZcs.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "CLZcc": "Count Leading Zeros (If APSR.C == 0 [Carry Clear])",
        "CLZcc.n": "Count Leading Zeros (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CLZcc.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CLZmi": "Count Leading Zeros (If APSR.N == 1 [Minus])",
        "CLZmi.n": "Count Leading Zeros (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "CLZmi.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "CLZpl": "Count Leading Zeros (If APSR.N == 0 [Plus])",
        "CLZpl.n": "Count Leading Zeros (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "CLZpl.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "CLZvs": "Count Leading Zeros (If APSR.V == 1 [Overflow])",
        "CLZvs.n": "Count Leading Zeros (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "CLZvs.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "CLZvc": "Count Leading Zeros (If APSR.V == 0 [No Overflow])",
        "CLZvc.n": "Count Leading Zeros (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "CLZvc.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "CLZhi": "Count Leading Zeros (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CLZhi.n": "Count Leading Zeros (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CLZhi.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CLZls": "Count Leading Zeros (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CLZls.n": "Count Leading Zeros (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CLZls.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CLZge": "Count Leading Zeros (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CLZge.n": "Count Leading Zeros (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CLZge.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CLZlt": "Count Leading Zeros (If APSR.N != APSR.V [Signed Lesser Than])",
        "CLZlt.n": "Count Leading Zeros (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CLZlt.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CLZgt": "Count Leading Zeros (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CLZgt.n": "Count Leading Zeros (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CLZgt.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CLZle": "Count Leading Zeros (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CLZle.n": "Count Leading Zeros (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CLZle.w": "Count Leading Zeros (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CLZal": "Count Leading Zeros (Always)",
        "CLZal.n": "Count Leading Zeros (T 16bits encoding) (Always)",
        "CLZal.w": "Count Leading Zeros (T/A 32bits encoding) (Always)"
      }
    },
    "CMN%{c}%{q}": {
      "description": "Compare Negative %{q} %{c}",
      "variants": {
        "CMN": "Compare Negative",
        "CMN.n": "Compare Negative (T 16bits encoding)",
        "CMN.w": "Compare Negative (T/A 32bits encoding)",
        "CMNeq": "Compare Negative (If APSR.Z == 1 [Equal])",
        "CMNeq.n": "Compare Negative (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "CMNeq.w": "Compare Negative (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "CMNne": "Compare Negative (If APSR.Z == 0 [Not Equal])",
        "CMNne.n": "Compare Negative (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CMNne.w": "Compare Negative (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CMNcs": "Compare Negative (If APSR.C == 1 [Carry Set])",
        "CMNcs.n": "Compare Negative (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "CMNcs.w": "Compare Negative (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "CMNcc": "Compare Negative (If APSR.C == 0 [Carry Clear])",
        "CMNcc.n": "Compare Negative (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CMNcc.w": "Compare Negative (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CMNmi": "Compare Negative (If APSR.N == 1 [Minus])",
        "CMNmi.n": "Compare Negative (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "CMNmi.w": "Compare Negative (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "CMNpl": "Compare Negative (If APSR.N == 0 [Plus])",
        "CMNpl.n": "Compare Negative (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "CMNpl.w": "Compare Negative (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "CMNvs": "Compare Negative (If APSR.V == 1 [Overflow])",
        "CMNvs.n": "Compare Negative (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "CMNvs.w": "Compare Negative (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "CMNvc": "Compare Negative (If APSR.V == 0 [No Overflow])",
        "CMNvc.n": "Compare Negative (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "CMNvc.w": "Compare Negative (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "CMNhi": "Compare Negative (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CMNhi.n": "Compare Negative (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CMNhi.w": "Compare Negative (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CMNls": "Compare Negative (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CMNls.n": "Compare Negative (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CMNls.w": "Compare Negative (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CMNge": "Compare Negative (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CMNge.n": "Compare Negative (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CMNge.w": "Compare Negative (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CMNlt": "Compare Negative (If APSR.N != APSR.V [Signed Lesser Than])",
        "CMNlt.n": "Compare Negative (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CMNlt.w": "Compare Negative (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CMNgt": "Compare Negative (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CMNgt.n": "Compare Negative (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CMNgt.w": "Compare Negative (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CMNle": "Compare Negative (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CMNle.n": "Compare Negative (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CMNle.w": "Compare Negative (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CMNal": "Compare Negative (Always)",
        "CMNal.n": "Compare Negative (T 16bits encoding) (Always)",
        "CMNal.w": "Compare Negative (T/A 32bits encoding) (Always)"
      }
    },
    "CMP%{c}%{q}": {
      "description": "Compare %{q} %{c}",
      "variants": {
        "CMP": "Compare",
        "CMP.n": "Compare (T 16bits encoding)",
        "CMP.w": "Compare (T/A 32bits encoding)",
        "CMPeq": "Compare (If APSR.Z == 1 [Equal])",
        "CMPeq.n": "Compare (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "CMPeq.w": "Compare (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "CMPne": "Compare (If APSR.Z == 0 [Not Equal])",
        "CMPne.n": "Compare (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CMPne.w": "Compare (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "CMPcs": "Compare (If APSR.C == 1 [Carry Set])",
        "CMPcs.n": "Compare (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "CMPcs.w": "Compare (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "CMPcc": "Compare (If APSR.C == 0 [Carry Clear])",
        "CMPcc.n": "Compare (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CMPcc.w": "Compare (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "CMPmi": "Compare (If APSR.N == 1 [Minus])",
        "CMPmi.n": "Compare (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "CMPmi.w": "Compare (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "CMPpl": "Compare (If APSR.N == 0 [Plus])",
        "CMPpl.n": "Compare (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "CMPpl.w": "Compare (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "CMPvs": "Compare (If APSR.V == 1 [Overflow])",
        "CMPvs.n": "Compare (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "CMPvs.w": "Compare (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "CMPvc": "Compare (If APSR.V == 0 [No Overflow])",
        "CMPvc.n": "Compare (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "CMPvc.w": "Compare (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "CMPhi": "Compare (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CMPhi.n": "Compare (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CMPhi.w": "Compare (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "CMPls": "Compare (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CMPls.n": "Compare (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CMPls.w": "Compare (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "CMPge": "Compare (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CMPge.n": "Compare (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CMPge.w": "Compare (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "CMPlt": "Compare (If APSR.N != APSR.V [Signed Lesser Than])",
        "CMPlt.n": "Compare (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CMPlt.w": "Compare (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "CMPgt": "Compare (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CMPgt.n": "Compare (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CMPgt.w": "Compare (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "CMPle": "Compare (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CMPle.n": "Compare (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CMPle.w": "Compare (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "CMPal": "Compare (Always)",
        "CMPal.n": "Compare (T 16bits encoding) (Always)",
        "CMPal.w": "Compare (T/A 32bits encoding) (Always)"
      }
    },
    "CPS%{interrupt_state}%{q}": {
      "description": "Change Processor State %{interrupt_state}",
      "variants": {
        "CPS": "Change Processor State",
        "CPS.n": "Change Processor State",
        "CPS.w": "Change Processor State",
        "CPSia": "Change Processor State (Enable Interrupt)",
        "CPSia.n": "Change Processor State (Enable Interrupt)",
        "CPSia.w": "Change Processor State (Enable Interrupt)",
        "CPSID": "Change Processor State (Disable Interrupt)",
        "CPSID.n": "Change Processor State (Disable Interrupt)",
        "CPSID.w": "Change Processor State (Disable Interrupt)"
      }
    },
    "CPY": {
      "description": "Copy (pre-UAL equivalent to MOV)",
      "variants": {
        "CPY": "Copy (pre-UAL equivalent to MOV)"
      }
    },
    "DBG%{c}%{q}": {
      "description": "Debug Hint %{q} %{c}",
      "variants": {
        "DBG": "Debug Hint",
        "DBG.n": "Debug Hint (T 16bits encoding)",
        "DBG.w": "Debug Hint (T/A 32bits encoding)",
        "DBGeq": "Debug Hint (If APSR.Z == 1 [Equal])",
        "DBGeq.n": "Debug Hint (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "DBGeq.w": "Debug Hint (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "DBGne": "Debug Hint (If APSR.Z == 0 [Not Equal])",
        "DBGne.n": "Debug Hint (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "DBGne.w": "Debug Hint (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "DBGcs": "Debug Hint (If APSR.C == 1 [Carry Set])",
        "DBGcs.n": "Debug Hint (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "DBGcs.w": "Debug Hint (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "DBGcc": "Debug Hint (If APSR.C == 0 [Carry Clear])",
        "DBGcc.n": "Debug Hint (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "DBGcc.w": "Debug Hint (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "DBGmi": "Debug Hint (If APSR.N == 1 [Minus])",
        "DBGmi.n": "Debug Hint (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "DBGmi.w": "Debug Hint (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "DBGpl": "Debug Hint (If APSR.N == 0 [Plus])",
        "DBGpl.n": "Debug Hint (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "DBGpl.w": "Debug Hint (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "DBGvs": "Debug Hint (If APSR.V == 1 [Overflow])",
        "DBGvs.n": "Debug Hint (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "DBGvs.w": "Debug Hint (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "DBGvc": "Debug Hint (If APSR.V == 0 [No Overflow])",
        "DBGvc.n": "Debug Hint (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "DBGvc.w": "Debug Hint (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "DBGhi": "Debug Hint (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "DBGhi.n": "Debug Hint (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "DBGhi.w": "Debug Hint (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "DBGls": "Debug Hint (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "DBGls.n": "Debug Hint (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "DBGls.w": "Debug Hint (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "DBGge": "Debug Hint (If APSR.N == APSR.V [Signed Greater or Equal])",
        "DBGge.n": "Debug Hint (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "DBGge.w": "Debug Hint (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "DBGlt": "Debug Hint (If APSR.N != APSR.V [Signed Lesser Than])",
        "DBGlt.n": "Debug Hint (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "DBGlt.w": "Debug Hint (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "DBGgt": "Debug Hint (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "DBGgt.n": "Debug Hint (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "DBGgt.w": "Debug Hint (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "DBGle": "Debug Hint (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "DBGle.n": "Debug Hint (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "DBGle.w": "Debug Hint (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "DBGal": "Debug Hint (Always)",
        "DBGal.n": "Debug Hint (T 16bits encoding) (Always)",
        "DBGal.w": "Debug Hint (T/A 32bits encoding) (Always)"
      }
    },
    "DMB%{c}%{q}": {
      "description": "Data Memory Barrier %{q} %{c}",
      "variants": {
        "DMB": "Data Memory Barrier",
        "DMB.n": "Data Memory Barrier (T 16bits encoding)",
        "DMB.w": "Data Memory Barrier (T/A 32bits encoding)",
        "DMBeq": "Data Memory Barrier (If APSR.Z == 1 [Equal])",
        "DMBeq.n": "Data Memory Barrier (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "DMBeq.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "DMBne": "Data Memory Barrier (If APSR.Z == 0 [Not Equal])",
        "DMBne.n": "Data Memory Barrier (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "DMBne.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "DMBcs": "Data Memory Barrier (If APSR.C == 1 [Carry Set])",
        "DMBcs.n": "Data Memory Barrier (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "DMBcs.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "DMBcc": "Data Memory Barrier (If APSR.C == 0 [Carry Clear])",
        "DMBcc.n": "Data Memory Barrier (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "DMBcc.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "DMBmi": "Data Memory Barrier (If APSR.N == 1 [Minus])",
        "DMBmi.n": "Data Memory Barrier (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "DMBmi.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "DMBpl": "Data Memory Barrier (If APSR.N == 0 [Plus])",
        "DMBpl.n": "Data Memory Barrier (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "DMBpl.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "DMBvs": "Data Memory Barrier (If APSR.V == 1 [Overflow])",
        "DMBvs.n": "Data Memory Barrier (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "DMBvs.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "DMBvc": "Data Memory Barrier (If APSR.V == 0 [No Overflow])",
        "DMBvc.n": "Data Memory Barrier (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "DMBvc.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "DMBhi": "Data Memory Barrier (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "DMBhi.n": "Data Memory Barrier (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "DMBhi.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "DMBls": "Data Memory Barrier (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "DMBls.n": "Data Memory Barrier (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "DMBls.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "DMBge": "Data Memory Barrier (If APSR.N == APSR.V [Signed Greater or Equal])",
        "DMBge.n": "Data Memory Barrier (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "DMBge.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "DMBlt": "Data Memory Barrier (If APSR.N != APSR.V [Signed Lesser Than])",
        "DMBlt.n": "Data Memory Barrier (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "DMBlt.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "DMBgt": "Data Memory Barrier (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "DMBgt.n": "Data Memory Barrier (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "DMBgt.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "DMBle": "Data Memory Barrier (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "DMBle.n": "Data Memory Barrier (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "DMBle.w": "Data Memory Barrier (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "DMBal": "Data Memory Barrier (Always)",
        "DMBal.n": "Data Memory Barrier (T 16bits encoding) (Always)",
        "DMBal.w": "Data Memory Barrier (T/A 32bits encoding) (Always)"
      }
    },
    "DSB%{c}%{q}": {
      "description": "Data Synchronization Barrier %{q} %{c}",
      "variants": {
        "DSB": "Data Synchronization Barrier",
        "DSB.n": "Data Synchronization Barrier (T 16bits encoding)",
        "DSB.w": "Data Synchronization Barrier (T/A 32bits encoding)",
        "DSBeq": "Data Synchronization Barrier (If APSR.Z == 1 [Equal])",
        "DSBeq.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "DSBeq.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "DSBne": "Data Synchronization Barrier (If APSR.Z == 0 [Not Equal])",
        "DSBne.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "DSBne.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "DSBcs": "Data Synchronization Barrier (If APSR.C == 1 [Carry Set])",
        "DSBcs.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "DSBcs.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "DSBcc": "Data Synchronization Barrier (If APSR.C == 0 [Carry Clear])",
        "DSBcc.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "DSBcc.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "DSBmi": "Data Synchronization Barrier (If APSR.N == 1 [Minus])",
        "DSBmi.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "DSBmi.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "DSBpl": "Data Synchronization Barrier (If APSR.N == 0 [Plus])",
        "DSBpl.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "DSBpl.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "DSBvs": "Data Synchronization Barrier (If APSR.V == 1 [Overflow])",
        "DSBvs.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "DSBvs.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "DSBvc": "Data Synchronization Barrier (If APSR.V == 0 [No Overflow])",
        "DSBvc.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "DSBvc.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "DSBhi": "Data Synchronization Barrier (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "DSBhi.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "DSBhi.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "DSBls": "Data Synchronization Barrier (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "DSBls.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "DSBls.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "DSBge": "Data Synchronization Barrier (If APSR.N == APSR.V [Signed Greater or Equal])",
        "DSBge.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "DSBge.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "DSBlt": "Data Synchronization Barrier (If APSR.N != APSR.V [Signed Lesser Than])",
        "DSBlt.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "DSBlt.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "DSBgt": "Data Synchronization Barrier (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "DSBgt.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "DSBgt.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "DSBle": "Data Synchronization Barrier (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "DSBle.n": "Data Synchronization Barrier (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "DSBle.w": "Data Synchronization Barrier (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "DSBal": "Data Synchronization Barrier (Always)",
        "DSBal.n": "Data Synchronization Barrier (T 16bits encoding) (Always)",
        "DSBal.w": "Data Synchronization Barrier (T/A 32bits encoding) (Always)"
      }
    },
    "ENTERX%{q}": {
      "description": "Change Thumb state to ThumbEE state",
      "variants": {
        "ENTERX": "Change Thumb state to ThumbEE state",
        "ENTERX.n": "Change Thumb state to ThumbEE state",
        "ENTERX.w": "Change Thumb state to ThumbEE state"
      }
    },
    "EOR%{s}%{c}%{q}": {
      "description": "Bitwise Exclusive OR %{q} %{c} %{s}",
      "variants": {
        "EOR": "Bitwise Exclusive OR",
        "EOR.n": "Bitwise Exclusive OR (T 16bits encoding)",
        "EOR.w": "Bitwise Exclusive OR (T/A 32bits encoding)",
        "EOReq": "Bitwise Exclusive OR (If APSR.Z == 1 [Equal])",
        "EOReq.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "EOReq.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "EORne": "Bitwise Exclusive OR (If APSR.Z == 0 [Not Equal])",
        "EORne.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "EORne.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "EORcs": "Bitwise Exclusive OR (If APSR.C == 1 [Carry Set])",
        "EORcs.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "EORcs.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "EORcc": "Bitwise Exclusive OR (If APSR.C == 0 [Carry Clear])",
        "EORcc.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "EORcc.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "EORmi": "Bitwise Exclusive OR (If APSR.N == 1 [Minus])",
        "EORmi.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "EORmi.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "EORpl": "Bitwise Exclusive OR (If APSR.N == 0 [Plus])",
        "EORpl.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "EORpl.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "EORvs": "Bitwise Exclusive OR (If APSR.V == 1 [Overflow])",
        "EORvs.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "EORvs.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "EORvc": "Bitwise Exclusive OR (If APSR.V == 0 [No Overflow])",
        "EORvc.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "EORvc.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "EORhi": "Bitwise Exclusive OR (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "EORhi.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "EORhi.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "EORls": "Bitwise Exclusive OR (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "EORls.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "EORls.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "EORge": "Bitwise Exclusive OR (If APSR.N == APSR.V [Signed Greater or Equal])",
        "EORge.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "EORge.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "EORlt": "Bitwise Exclusive OR (If APSR.N != APSR.V [Signed Lesser Than])",
        "EORlt.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "EORlt.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "EORgt": "Bitwise Exclusive OR (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "EORgt.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "EORgt.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "EORle": "Bitwise Exclusive OR (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "EORle.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "EORle.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "EORal": "Bitwise Exclusive OR (Always)",
        "EORal.n": "Bitwise Exclusive OR (T 16bits encoding) (Always)",
        "EORal.w": "Bitwise Exclusive OR (T/A 32bits encoding) (Always)",
        "EORs": "Bitwise Exclusive OR (Update APSR)",
        "EORs.n": "Bitwise Exclusive OR (T 16bits encoding) (Update APSR)",
        "EORs.w": "Bitwise Exclusive OR (T/A 32bits encoding) (Update APSR)",
        "EORseq": "Bitwise Exclusive OR (If APSR.Z == 1 [Equal]) (Update APSR)",
        "EORseq.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "EORseq.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "EORsne": "Bitwise Exclusive OR (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "EORsne.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "EORsne.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "EORscs": "Bitwise Exclusive OR (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "EORscs.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "EORscs.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "EORscc": "Bitwise Exclusive OR (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "EORscc.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "EORscc.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "EORsmi": "Bitwise Exclusive OR (If APSR.N == 1 [Minus]) (Update APSR)",
        "EORsmi.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "EORsmi.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "EORspl": "Bitwise Exclusive OR (If APSR.N == 0 [Plus]) (Update APSR)",
        "EORspl.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "EORspl.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "EORsvs": "Bitwise Exclusive OR (If APSR.V == 1 [Overflow]) (Update APSR)",
        "EORsvs.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "EORsvs.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "EORsvc": "Bitwise Exclusive OR (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "EORsvc.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "EORsvc.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "EORshi": "Bitwise Exclusive OR (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "EORshi.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "EORshi.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "EORsls": "Bitwise Exclusive OR (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "EORsls.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "EORsls.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "EORsge": "Bitwise Exclusive OR (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "EORsge.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "EORsge.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "EORslt": "Bitwise Exclusive OR (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "EORslt.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "EORslt.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "EORsgt": "Bitwise Exclusive OR (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "EORsgt.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "EORsgt.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "EORsle": "Bitwise Exclusive OR (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "EORsle.n": "Bitwise Exclusive OR (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "EORsle.w": "Bitwise Exclusive OR (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "EORsal": "Bitwise Exclusive OR (Always) (Update APSR)",
        "EORsal.n": "Bitwise Exclusive OR (T 16bits encoding) (Always) (Update APSR)",
        "EORsal.w": "Bitwise Exclusive OR (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "ERET%{c}%{q}": {
      "description": "Exception Return %{q} %{c}",
      "variants": {
        "ERET": "Exception Return",
        "ERET.n": "Exception Return (T 16bits encoding)",
        "ERET.w": "Exception Return (T/A 32bits encoding)",
        "ERETeq": "Exception Return (If APSR.Z == 1 [Equal])",
        "ERETeq.n": "Exception Return (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "ERETeq.w": "Exception Return (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "ERETne": "Exception Return (If APSR.Z == 0 [Not Equal])",
        "ERETne.n": "Exception Return (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ERETne.w": "Exception Return (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ERETcs": "Exception Return (If APSR.C == 1 [Carry Set])",
        "ERETcs.n": "Exception Return (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "ERETcs.w": "Exception Return (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "ERETcc": "Exception Return (If APSR.C == 0 [Carry Clear])",
        "ERETcc.n": "Exception Return (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ERETcc.w": "Exception Return (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ERETmi": "Exception Return (If APSR.N == 1 [Minus])",
        "ERETmi.n": "Exception Return (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "ERETmi.w": "Exception Return (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "ERETpl": "Exception Return (If APSR.N == 0 [Plus])",
        "ERETpl.n": "Exception Return (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "ERETpl.w": "Exception Return (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "ERETvs": "Exception Return (If APSR.V == 1 [Overflow])",
        "ERETvs.n": "Exception Return (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "ERETvs.w": "Exception Return (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "ERETvc": "Exception Return (If APSR.V == 0 [No Overflow])",
        "ERETvc.n": "Exception Return (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "ERETvc.w": "Exception Return (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "EREThi": "Exception Return (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "EREThi.n": "Exception Return (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "EREThi.w": "Exception Return (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ERETls": "Exception Return (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ERETls.n": "Exception Return (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ERETls.w": "Exception Return (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ERETge": "Exception Return (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ERETge.n": "Exception Return (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ERETge.w": "Exception Return (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ERETlt": "Exception Return (If APSR.N != APSR.V [Signed Lesser Than])",
        "ERETlt.n": "Exception Return (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ERETlt.w": "Exception Return (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ERETgt": "Exception Return (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ERETgt.n": "Exception Return (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ERETgt.w": "Exception Return (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ERETle": "Exception Return (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ERETle.n": "Exception Return (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ERETle.w": "Exception Return (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ERETal": "Exception Return (Always)",
        "ERETal.n": "Exception Return (T 16bits encoding) (Always)",
        "ERETal.w": "Exception Return (T/A 32bits encoding) (Always)"
      }
    },
    "HB%{with_link}%{c}%{q}": {
      "description": "Handler Branch %{with_link} %{q} %{c}",
      "variants": {
        "HB": "Handler Branch",
        "HB.n": "Handler Branch (T 16bits encoding)",
        "HB.w": "Handler Branch (T/A 32bits encoding)",
        "HBeq": "Handler Branch (If APSR.Z == 1 [Equal])",
        "HBeq.n": "Handler Branch (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "HBeq.w": "Handler Branch (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "HBne": "Handler Branch (If APSR.Z == 0 [Not Equal])",
        "HBne.n": "Handler Branch (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "HBne.w": "Handler Branch (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "HBcs": "Handler Branch (If APSR.C == 1 [Carry Set])",
        "HBcs.n": "Handler Branch (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "HBcs.w": "Handler Branch (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "HBcc": "Handler Branch (If APSR.C == 0 [Carry Clear])",
        "HBcc.n": "Handler Branch (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "HBcc.w": "Handler Branch (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "HBmi": "Handler Branch (If APSR.N == 1 [Minus])",
        "HBmi.n": "Handler Branch (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "HBmi.w": "Handler Branch (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "HBpl": "Handler Branch (If APSR.N == 0 [Plus])",
        "HBpl.n": "Handler Branch (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "HBpl.w": "Handler Branch (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "HBvs": "Handler Branch (If APSR.V == 1 [Overflow])",
        "HBvs.n": "Handler Branch (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "HBvs.w": "Handler Branch (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "HBvc": "Handler Branch (If APSR.V == 0 [No Overflow])",
        "HBvc.n": "Handler Branch (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "HBvc.w": "Handler Branch (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "HBhi": "Handler Branch (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "HBhi.n": "Handler Branch (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "HBhi.w": "Handler Branch (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "HBls": "Handler Branch (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "HBls.n": "Handler Branch (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "HBls.w": "Handler Branch (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "HBge": "Handler Branch (If APSR.N == APSR.V [Signed Greater or Equal])",
        "HBge.n": "Handler Branch (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "HBge.w": "Handler Branch (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "HBlt": "Handler Branch (If APSR.N != APSR.V [Signed Lesser Than])",
        "HBlt.n": "Handler Branch (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "HBlt.w": "Handler Branch (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "HBgt": "Handler Branch (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "HBgt.n": "Handler Branch (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "HBgt.w": "Handler Branch (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "HBle": "Handler Branch (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "HBle.n": "Handler Branch (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "HBle.w": "Handler Branch (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "HBal": "Handler Branch (Always)",
        "HBal.n": "Handler Branch (T 16bits encoding) (Always)",
        "HBal.w": "Handler Branch (T/A 32bits encoding) (Always)"
      }
    },
    "HBLP%{c}%{q}": {
      "description": "Handler Branch with Link and Parameter %{q} %{c}",
      "variants": {
        "HBLP": "Handler Branch with Link and Parameter",
        "HBLP.n": "Handler Branch with Link and Parameter (T 16bits encoding)",
        "HBLP.w": "Handler Branch with Link and Parameter (T/A 32bits encoding)",
        "HBLPeq": "Handler Branch with Link and Parameter (If APSR.Z == 1 [Equal])",
        "HBLPeq.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "HBLPeq.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "HBLPne": "Handler Branch with Link and Parameter (If APSR.Z == 0 [Not Equal])",
        "HBLPne.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "HBLPne.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "HBLPcs": "Handler Branch with Link and Parameter (If APSR.C == 1 [Carry Set])",
        "HBLPcs.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "HBLPcs.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "HBLPcc": "Handler Branch with Link and Parameter (If APSR.C == 0 [Carry Clear])",
        "HBLPcc.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "HBLPcc.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "HBLPmi": "Handler Branch with Link and Parameter (If APSR.N == 1 [Minus])",
        "HBLPmi.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "HBLPmi.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "HBLPpl": "Handler Branch with Link and Parameter (If APSR.N == 0 [Plus])",
        "HBLPpl.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "HBLPpl.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "HBLPvs": "Handler Branch with Link and Parameter (If APSR.V == 1 [Overflow])",
        "HBLPvs.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "HBLPvs.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "HBLPvc": "Handler Branch with Link and Parameter (If APSR.V == 0 [No Overflow])",
        "HBLPvc.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "HBLPvc.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "HBLPhi": "Handler Branch with Link and Parameter (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "HBLPhi.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "HBLPhi.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "HBLPls": "Handler Branch with Link and Parameter (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "HBLPls.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "HBLPls.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "HBLPge": "Handler Branch with Link and Parameter (If APSR.N == APSR.V [Signed Greater or Equal])",
        "HBLPge.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "HBLPge.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "HBLPlt": "Handler Branch with Link and Parameter (If APSR.N != APSR.V [Signed Lesser Than])",
        "HBLPlt.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "HBLPlt.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "HBLPgt": "Handler Branch with Link and Parameter (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "HBLPgt.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "HBLPgt.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "HBLPle": "Handler Branch with Link and Parameter (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "HBLPle.n": "Handler Branch with Link and Parameter (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "HBLPle.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "HBLPal": "Handler Branch with Link and Parameter (Always)",
        "HBLPal.n": "Handler Branch with Link and Parameter (T 16bits encoding) (Always)",
        "HBLPal.w": "Handler Branch with Link and Parameter (T/A 32bits encoding) (Always)"
      }
    },
    "HBP%{c}%{q}": {
      "description": "Handler Branch with Parameter %{q} %{c}",
      "variants": {
        "HBP": "Handler Branch with Parameter",
        "HBP.n": "Handler Branch with Parameter (T 16bits encoding)",
        "HBP.w": "Handler Branch with Parameter (T/A 32bits encoding)",
        "HBPeq": "Handler Branch with Parameter (If APSR.Z == 1 [Equal])",
        "HBPeq.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "HBPeq.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "HBPne": "Handler Branch with Parameter (If APSR.Z == 0 [Not Equal])",
        "HBPne.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "HBPne.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "HBPcs": "Handler Branch with Parameter (If APSR.C == 1 [Carry Set])",
        "HBPcs.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "HBPcs.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "HBPcc": "Handler Branch with Parameter (If APSR.C == 0 [Carry Clear])",
        "HBPcc.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "HBPcc.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "HBPmi": "Handler Branch with Parameter (If APSR.N == 1 [Minus])",
        "HBPmi.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "HBPmi.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "HBPpl": "Handler Branch with Parameter (If APSR.N == 0 [Plus])",
        "HBPpl.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "HBPpl.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "HBPvs": "Handler Branch with Parameter (If APSR.V == 1 [Overflow])",
        "HBPvs.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "HBPvs.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "HBPvc": "Handler Branch with Parameter (If APSR.V == 0 [No Overflow])",
        "HBPvc.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "HBPvc.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "HBPhi": "Handler Branch with Parameter (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "HBPhi.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "HBPhi.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "HBPls": "Handler Branch with Parameter (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "HBPls.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "HBPls.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "HBPge": "Handler Branch with Parameter (If APSR.N == APSR.V [Signed Greater or Equal])",
        "HBPge.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "HBPge.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "HBPlt": "Handler Branch with Parameter (If APSR.N != APSR.V [Signed Lesser Than])",
        "HBPlt.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "HBPlt.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "HBPgt": "Handler Branch with Parameter (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "HBPgt.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "HBPgt.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "HBPle": "Handler Branch with Parameter (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "HBPle.n": "Handler Branch with Parameter (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "HBPle.w": "Handler Branch with Parameter (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "HBPal": "Handler Branch with Parameter (Always)",
        "HBPal.n": "Handler Branch with Parameter (T 16bits encoding) (Always)",
        "HBPal.w": "Handler Branch with Parameter (T/A 32bits encoding) (Always)"
      }
    },
    "HVC%{q}": {
      "description": "Hypervisor Call %{q}",
      "variants": {
        "HVC": "Hypervisor Call",
        "HVC.n": "Hypervisor Call (T 16bits encoding)",
        "HVC.w": "Hypervisor Call (T/A 32bits encoding)"
      }
    },
    "ISB%{c}%{q}": {
      "description": "Instruction Synchronization Barrier %{q} %{c}",
      "variants": {
        "ISB": "Instruction Synchronization Barrier",
        "ISB.n": "Instruction Synchronization Barrier (T 16bits encoding)",
        "ISB.w": "Instruction Synchronization Barrier (T/A 32bits encoding)",
        "ISBeq": "Instruction Synchronization Barrier (If APSR.Z == 1 [Equal])",
        "ISBeq.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "ISBeq.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "ISBne": "Instruction Synchronization Barrier (If APSR.Z == 0 [Not Equal])",
        "ISBne.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ISBne.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ISBcs": "Instruction Synchronization Barrier (If APSR.C == 1 [Carry Set])",
        "ISBcs.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "ISBcs.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "ISBcc": "Instruction Synchronization Barrier (If APSR.C == 0 [Carry Clear])",
        "ISBcc.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ISBcc.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ISBmi": "Instruction Synchronization Barrier (If APSR.N == 1 [Minus])",
        "ISBmi.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "ISBmi.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "ISBpl": "Instruction Synchronization Barrier (If APSR.N == 0 [Plus])",
        "ISBpl.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "ISBpl.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "ISBvs": "Instruction Synchronization Barrier (If APSR.V == 1 [Overflow])",
        "ISBvs.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "ISBvs.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "ISBvc": "Instruction Synchronization Barrier (If APSR.V == 0 [No Overflow])",
        "ISBvc.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "ISBvc.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "ISBhi": "Instruction Synchronization Barrier (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ISBhi.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ISBhi.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ISBls": "Instruction Synchronization Barrier (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ISBls.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ISBls.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ISBge": "Instruction Synchronization Barrier (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ISBge.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ISBge.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ISBlt": "Instruction Synchronization Barrier (If APSR.N != APSR.V [Signed Lesser Than])",
        "ISBlt.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ISBlt.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ISBgt": "Instruction Synchronization Barrier (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ISBgt.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ISBgt.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ISBle": "Instruction Synchronization Barrier (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ISBle.n": "Instruction Synchronization Barrier (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ISBle.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ISBal": "Instruction Synchronization Barrier (Always)",
        "ISBal.n": "Instruction Synchronization Barrier (T 16bits encoding) (Always)",
        "ISBal.w": "Instruction Synchronization Barrier (T/A 32bits encoding) (Always)"
      }
    },
    "IT%{it_conditions}%{q}": {
      "description": "If-Then %{it_conditions} %{q}",
      "variants": {
        "IT": "If-Then",
        "IT.n": "If-Then (T 16bits encoding)",
        "IT.w": "If-Then (T/A 32bits encoding)",
        "ITt": "If-Then True",
        "ITt.n": "If-Then True (T 16bits encoding)",
        "ITt.w": "If-Then True (T/A 32bits encoding)",
        "ITe": "If-Then False",
        "ITe.n": "If-Then False (T 16bits encoding)",
        "ITe.w": "If-Then False (T/A 32bits encoding)",
        "ITtt": "If-Then True True",
        "ITtt.n": "If-Then True True (T 16bits encoding)",
        "ITtt.w": "If-Then True True (T/A 32bits encoding)",
        "ITte": "If-Then True False",
        "ITte.n": "If-Then True False (T 16bits encoding)",
        "ITte.w": "If-Then True False (T/A 32bits encoding)",
        "ITet": "If-Then False True",
        "ITet.n": "If-Then False True (T 16bits encoding)",
        "ITet.w": "If-Then False True (T/A 32bits encoding)",
        "ITee": "If-Then False False",
        "ITee.n": "If-Then False False (T 16bits encoding)",
        "ITee.w": "If-Then False False (T/A 32bits encoding)",
        "ITttt": "If-Then True True True",
        "ITttt.n": "If-Then True True True (T 16bits encoding)",
        "ITttt.w": "If-Then True True True (T/A 32bits encoding)",
        "ITtte": "If-Then True True False",
        "ITtte.n": "If-Then True True False (T 16bits encoding)",
        "ITtte.w": "If-Then True True False (T/A 32bits encoding)",
        "ITtet": "If-Then True False True",
        "ITtet.n": "If-Then True False True (T 16bits encoding)",
        "ITtet.w": "If-Then True False True (T/A 32bits encoding)",
        "ITtee": "If-Then True False False",
        "ITtee.n": "If-Then True False False (T 16bits encoding)",
        "ITtee.w": "If-Then True False False (T/A 32bits encoding)",
        "ITett": "If-Then False True True",
        "ITett.n": "If-Then False True True (T 16bits encoding)",
        "ITett.w": "If-Then False True True (T/A 32bits encoding)",
        "ITete": "If-Then False True False",
        "ITete.n": "If-Then False True False (T 16bits encoding)",
        "ITete.w": "If-Then False True False (T/A 32bits encoding)",
        "ITeet": "If-Then False False True",
        "ITeet.n": "If-Then False False True (T 16bits encoding)",
        "ITeet.w": "If-Then False False True (T/A 32bits encoding)",
        "ITeee": "If-Then False False False",
        "ITeee.n": "If-Then False False False (T 16bits encoding)",
        "ITeee.w": "If-Then False False False (T/A 32bits encoding)",
        "ITtttt": "If-Then True True True True",
        "ITtttt.n": "If-Then True True True True (T 16bits encoding)",
        "ITtttt.w": "If-Then True True True True (T/A 32bits encoding)",
        "ITttte": "If-Then True True True False",
        "ITttte.n": "If-Then True True True False (T 16bits encoding)",
        "ITttte.w": "If-Then True True True False (T/A 32bits encoding)",
        "ITttet": "If-Then True True False True",
        "ITttet.n": "If-Then True True False True (T 16bits encoding)",
        "ITttet.w": "If-Then True True False True (T/A 32bits encoding)",
        "ITttee": "If-Then True True False False",
        "ITttee.n": "If-Then True True False False (T 16bits encoding)",
        "ITttee.w": "If-Then True True False False (T/A 32bits encoding)",
        "ITtett": "If-Then True False True True",
        "ITtett.n": "If-Then True False True True (T 16bits encoding)",
        "ITtett.w": "If-Then True False True True (T/A 32bits encoding)",
        "ITtete": "If-Then True False True False",
        "ITtete.n": "If-Then True False True False (T 16bits encoding)",
        "ITtete.w": "If-Then True False True False (T/A 32bits encoding)",
        "ITteet": "If-Then True False False True",
        "ITteet.n": "If-Then True False False True (T 16bits encoding)",
        "ITteet.w": "If-Then True False False True (T/A 32bits encoding)",
        "ITteee": "If-Then True False False False",
        "ITteee.n": "If-Then True False False False (T 16bits encoding)",
        "ITteee.w": "If-Then True False False False (T/A 32bits encoding)",
        "ITettt": "If-Then False True True True",
        "ITettt.n": "If-Then False True True True (T 16bits encoding)",
        "ITettt.w": "If-Then False True True True (T/A 32bits encoding)",
        "ITette": "If-Then False True True False",
        "ITette.n": "If-Then False True True False (T 16bits encoding)",
        "ITette.w": "If-Then False True True False (T/A 32bits encoding)",
        "ITetet": "If-Then False True False True",
        "ITetet.n": "If-Then False True False True (T 16bits encoding)",
        "ITetet.w": "If-Then False True False True (T/A 32bits encoding)",
        "ITetee": "If-Then False True False False",
        "ITetee.n": "If-Then False True False False (T 16bits encoding)",
        "ITetee.w": "If-Then False True False False (T/A 32bits encoding)",
        "ITeett": "If-Then False False True True",
        "ITeett.n": "If-Then False False True True (T 16bits encoding)",
        "ITeett.w": "If-Then False False True True (T/A 32bits encoding)",
        "ITeete": "If-Then False False True False",
        "ITeete.n": "If-Then False False True False (T 16bits encoding)",
        "ITeete.w": "If-Then False False True False (T/A 32bits encoding)",
        "ITeeet": "If-Then False False False True",
        "ITeeet.n": "If-Then False False False True (T 16bits encoding)",
        "ITeeet.w": "If-Then False False False True (T/A 32bits encoding)",
        "ITeeee": "If-Then False False False False",
        "ITeeee.n": "If-Then False False False False (T 16bits encoding)",
        "ITeeee.w": "If-Then False False False False (T/A 32bits encoding)"
      }
    },
    "LDC%{coproc_2}%{coproc_l}%{c}%{q}": {
      "description": "Load Coprocessor %{coproc_2} %{coproc_l} %{q} %{c}",
      "variants": {
        "LDC": "Load Coprocessor",
        "LDC.n": "Load Coprocessor (T 16bits encoding)",
        "LDC.w": "Load Coprocessor (T/A 32bits encoding)",
        "LDCal": "Load Coprocessor (Always)",
        "LDCal.n": "Load Coprocessor (T 16bits encoding) (Always)",
        "LDCal.w": "Load Coprocessor (T/A 32bits encoding) (Always)",
        "LDCl": "Load Coprocessor (D == 1 encoding)",
        "LDCl.n": "Load Coprocessor (D == 1 encoding) (T 16bits encoding)",
        "LDCl.w": "Load Coprocessor (D == 1 encoding) (T/A 32bits encoding)",
        "LDClal": "Load Coprocessor (D == 1 encoding) (Always)",
        "LDClal.n": "Load Coprocessor (D == 1 encoding) (T 16bits encoding) (Always)",
        "LDClal.w": "Load Coprocessor (D == 1 encoding) (T/A 32bits encoding) (Always)",
        "LDC2": "Load Coprocessor (2nd T/A encoding)",
        "LDC2.n": "Load Coprocessor (2nd T/A encoding) (T 16bits encoding)",
        "LDC2.w": "Load Coprocessor (2nd T/A encoding) (T/A 32bits encoding)",
        "LDC2al": "Load Coprocessor (2nd T/A encoding) (Always)",
        "LDC2al.n": "Load Coprocessor (2nd T/A encoding) (T 16bits encoding) (Always)",
        "LDC2al.w": "Load Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (Always)",
        "LDC2l": "Load Coprocessor (2nd T/A encoding) (D == 1 encoding)",
        "LDC2l.n": "Load Coprocessor (2nd T/A encoding) (D == 1 encoding) (T 16bits encoding)",
        "LDC2l.w": "Load Coprocessor (2nd T/A encoding) (D == 1 encoding) (T/A 32bits encoding)",
        "LDC2lal": "Load Coprocessor (2nd T/A encoding) (D == 1 encoding) (Always)",
        "LDC2lal.n": "Load Coprocessor (2nd T/A encoding) (D == 1 encoding) (T 16bits encoding) (Always)",
        "LDC2lal.w": "Load Coprocessor (2nd T/A encoding) (D == 1 encoding) (T/A 32bits encoding) (Always)"
      }
    },
    "LDM%{amode}%{c}%{q}": {
      "description": "Load Multiple %{amode} %{q} %{c}",
      "variants": {
        "LDM": "Load Multiple Increment After",
        "LDM.n": "Load Multiple Increment After (T 16bits encoding)",
        "LDM.w": "Load Multiple Increment After (T/A 32bits encoding)",
        "LDMeq": "Load Multiple Increment After (If APSR.Z == 1 [Equal])",
        "LDMeq.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMeq.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMne": "Load Multiple Increment After (If APSR.Z == 0 [Not Equal])",
        "LDMne.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMne.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMcs": "Load Multiple Increment After (If APSR.C == 1 [Carry Set])",
        "LDMcs.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMcs.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMcc": "Load Multiple Increment After (If APSR.C == 0 [Carry Clear])",
        "LDMcc.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMcc.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMmi": "Load Multiple Increment After (If APSR.N == 1 [Minus])",
        "LDMmi.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDMmi.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDMpl": "Load Multiple Increment After (If APSR.N == 0 [Plus])",
        "LDMpl.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDMpl.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDMvs": "Load Multiple Increment After (If APSR.V == 1 [Overflow])",
        "LDMvs.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMvs.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMvc": "Load Multiple Increment After (If APSR.V == 0 [No Overflow])",
        "LDMvc.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMvc.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMhi": "Load Multiple Increment After (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMhi.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMhi.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMls": "Load Multiple Increment After (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMls.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMls.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMge": "Load Multiple Increment After (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMge.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMge.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMlt": "Load Multiple Increment After (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMlt.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMlt.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMgt": "Load Multiple Increment After (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMgt.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMgt.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMle": "Load Multiple Increment After (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMle.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMle.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMal": "Load Multiple Increment After (Always)",
        "LDMal.n": "Load Multiple Increment After (T 16bits encoding) (Always)",
        "LDMal.w": "Load Multiple Increment After (T/A 32bits encoding) (Always)",
        "LDMia": "Load Multiple Increment After",
        "LDMia.n": "Load Multiple Increment After (T 16bits encoding)",
        "LDMia.w": "Load Multiple Increment After (T/A 32bits encoding)",
        "LDMiaeq": "Load Multiple Increment After (If APSR.Z == 1 [Equal])",
        "LDMiaeq.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMiaeq.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMiane": "Load Multiple Increment After (If APSR.Z == 0 [Not Equal])",
        "LDMiane.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMiane.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMiacs": "Load Multiple Increment After (If APSR.C == 1 [Carry Set])",
        "LDMiacs.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMiacs.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMiacc": "Load Multiple Increment After (If APSR.C == 0 [Carry Clear])",
        "LDMiacc.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMiacc.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMiami": "Load Multiple Increment After (If APSR.N == 1 [Minus])",
        "LDMiami.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDMiami.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDMiapl": "Load Multiple Increment After (If APSR.N == 0 [Plus])",
        "LDMiapl.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDMiapl.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDMiavs": "Load Multiple Increment After (If APSR.V == 1 [Overflow])",
        "LDMiavs.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMiavs.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMiavc": "Load Multiple Increment After (If APSR.V == 0 [No Overflow])",
        "LDMiavc.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMiavc.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMiahi": "Load Multiple Increment After (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMiahi.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMiahi.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMials": "Load Multiple Increment After (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMials.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMials.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMiage": "Load Multiple Increment After (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMiage.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMiage.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMialt": "Load Multiple Increment After (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMialt.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMialt.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMiagt": "Load Multiple Increment After (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMiagt.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMiagt.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMiale": "Load Multiple Increment After (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMiale.n": "Load Multiple Increment After (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMiale.w": "Load Multiple Increment After (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMiaal": "Load Multiple Increment After (Always)",
        "LDMiaal.n": "Load Multiple Increment After (T 16bits encoding) (Always)",
        "LDMiaal.w": "Load Multiple Increment After (T/A 32bits encoding) (Always)",
        "LDMfd": "Load Multiple Full Descending",
        "LDMfd.n": "Load Multiple Full Descending (T 16bits encoding)",
        "LDMfd.w": "Load Multiple Full Descending (T/A 32bits encoding)",
        "LDMfdeq": "Load Multiple Full Descending (If APSR.Z == 1 [Equal])",
        "LDMfdeq.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMfdeq.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMfdne": "Load Multiple Full Descending (If APSR.Z == 0 [Not Equal])",
        "LDMfdne.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMfdne.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMfdcs": "Load Multiple Full Descending (If APSR.C == 1 [Carry Set])",
        "LDMfdcs.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMfdcs.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMfdcc": "Load Multiple Full Descending (If APSR.C == 0 [Carry Clear])",
        "LDMfdcc.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMfdcc.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMfdmi": "Load Multiple Full Descending (If APSR.N == 1 [Minus])",
        "LDMfdmi.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDMfdmi.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDMfdpl": "Load Multiple Full Descending (If APSR.N == 0 [Plus])",
        "LDMfdpl.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDMfdpl.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDMfdvs": "Load Multiple Full Descending (If APSR.V == 1 [Overflow])",
        "LDMfdvs.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMfdvs.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMfdvc": "Load Multiple Full Descending (If APSR.V == 0 [No Overflow])",
        "LDMfdvc.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMfdvc.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMfdhi": "Load Multiple Full Descending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMfdhi.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMfdhi.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMfdls": "Load Multiple Full Descending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMfdls.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMfdls.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMfdge": "Load Multiple Full Descending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMfdge.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMfdge.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMfdlt": "Load Multiple Full Descending (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMfdlt.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMfdlt.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMfdgt": "Load Multiple Full Descending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMfdgt.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMfdgt.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMfdle": "Load Multiple Full Descending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMfdle.n": "Load Multiple Full Descending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMfdle.w": "Load Multiple Full Descending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMfdal": "Load Multiple Full Descending (Always)",
        "LDMfdal.n": "Load Multiple Full Descending (T 16bits encoding) (Always)",
        "LDMfdal.w": "Load Multiple Full Descending (T/A 32bits encoding) (Always)",
        "LDMda": "Load Multiple Decrement After",
        "LDMda.n": "Load Multiple Decrement After (T 16bits encoding)",
        "LDMda.w": "Load Multiple Decrement After (T/A 32bits encoding)",
        "LDMdaeq": "Load Multiple Decrement After (If APSR.Z == 1 [Equal])",
        "LDMdaeq.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMdaeq.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMdane": "Load Multiple Decrement After (If APSR.Z == 0 [Not Equal])",
        "LDMdane.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMdane.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMdacs": "Load Multiple Decrement After (If APSR.C == 1 [Carry Set])",
        "LDMdacs.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMdacs.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMdacc": "Load Multiple Decrement After (If APSR.C == 0 [Carry Clear])",
        "LDMdacc.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMdacc.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMdami": "Load Multiple Decrement After (If APSR.N == 1 [Minus])",
        "LDMdami.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDMdami.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDMdapl": "Load Multiple Decrement After (If APSR.N == 0 [Plus])",
        "LDMdapl.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDMdapl.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDMdavs": "Load Multiple Decrement After (If APSR.V == 1 [Overflow])",
        "LDMdavs.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMdavs.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMdavc": "Load Multiple Decrement After (If APSR.V == 0 [No Overflow])",
        "LDMdavc.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMdavc.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMdahi": "Load Multiple Decrement After (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMdahi.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMdahi.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMdals": "Load Multiple Decrement After (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMdals.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMdals.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMdage": "Load Multiple Decrement After (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMdage.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMdage.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMdalt": "Load Multiple Decrement After (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMdalt.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMdalt.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMdagt": "Load Multiple Decrement After (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMdagt.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMdagt.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMdale": "Load Multiple Decrement After (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMdale.n": "Load Multiple Decrement After (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMdale.w": "Load Multiple Decrement After (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMdaal": "Load Multiple Decrement After (Always)",
        "LDMdaal.n": "Load Multiple Decrement After (T 16bits encoding) (Always)",
        "LDMdaal.w": "Load Multiple Decrement After (T/A 32bits encoding) (Always)",
        "LDMfa": "Load Multiple Full Ascending",
        "LDMfa.n": "Load Multiple Full Ascending (T 16bits encoding)",
        "LDMfa.w": "Load Multiple Full Ascending (T/A 32bits encoding)",
        "LDMfaeq": "Load Multiple Full Ascending (If APSR.Z == 1 [Equal])",
        "LDMfaeq.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMfaeq.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMfane": "Load Multiple Full Ascending (If APSR.Z == 0 [Not Equal])",
        "LDMfane.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMfane.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMfacs": "Load Multiple Full Ascending (If APSR.C == 1 [Carry Set])",
        "LDMfacs.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMfacs.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMfacc": "Load Multiple Full Ascending (If APSR.C == 0 [Carry Clear])",
        "LDMfacc.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMfacc.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMfami": "Load Multiple Full Ascending (If APSR.N == 1 [Minus])",
        "LDMfami.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDMfami.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDMfapl": "Load Multiple Full Ascending (If APSR.N == 0 [Plus])",
        "LDMfapl.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDMfapl.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDMfavs": "Load Multiple Full Ascending (If APSR.V == 1 [Overflow])",
        "LDMfavs.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMfavs.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMfavc": "Load Multiple Full Ascending (If APSR.V == 0 [No Overflow])",
        "LDMfavc.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMfavc.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMfahi": "Load Multiple Full Ascending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMfahi.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMfahi.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMfals": "Load Multiple Full Ascending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMfals.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMfals.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMfage": "Load Multiple Full Ascending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMfage.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMfage.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMfalt": "Load Multiple Full Ascending (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMfalt.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMfalt.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMfagt": "Load Multiple Full Ascending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMfagt.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMfagt.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMfale": "Load Multiple Full Ascending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMfale.n": "Load Multiple Full Ascending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMfale.w": "Load Multiple Full Ascending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMfaal": "Load Multiple Full Ascending (Always)",
        "LDMfaal.n": "Load Multiple Full Ascending (T 16bits encoding) (Always)",
        "LDMfaal.w": "Load Multiple Full Ascending (T/A 32bits encoding) (Always)",
        "LDMdb": "Load Multiple Decrement Before",
        "LDMdb.n": "Load Multiple Decrement Before (T 16bits encoding)",
        "LDMdb.w": "Load Multiple Decrement Before (T/A 32bits encoding)",
        "LDMdbeq": "Load Multiple Decrement Before (If APSR.Z == 1 [Equal])",
        "LDMdbeq.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMdbeq.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMdbne": "Load Multiple Decrement Before (If APSR.Z == 0 [Not Equal])",
        "LDMdbne.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMdbne.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMdbcs": "Load Multiple Decrement Before (If APSR.C == 1 [Carry Set])",
        "LDMdbcs.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMdbcs.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMdbcc": "Load Multiple Decrement Before (If APSR.C == 0 [Carry Clear])",
        "LDMdbcc.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMdbcc.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMdbmi": "Load Multiple Decrement Before (If APSR.N == 1 [Minus])",
        "LDMdbmi.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDMdbmi.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDMdbpl": "Load Multiple Decrement Before (If APSR.N == 0 [Plus])",
        "LDMdbpl.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDMdbpl.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDMdbvs": "Load Multiple Decrement Before (If APSR.V == 1 [Overflow])",
        "LDMdbvs.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMdbvs.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMdbvc": "Load Multiple Decrement Before (If APSR.V == 0 [No Overflow])",
        "LDMdbvc.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMdbvc.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMdbhi": "Load Multiple Decrement Before (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMdbhi.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMdbhi.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMdbls": "Load Multiple Decrement Before (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMdbls.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMdbls.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMdbge": "Load Multiple Decrement Before (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMdbge.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMdbge.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMdblt": "Load Multiple Decrement Before (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMdblt.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMdblt.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMdbgt": "Load Multiple Decrement Before (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMdbgt.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMdbgt.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMdble": "Load Multiple Decrement Before (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMdble.n": "Load Multiple Decrement Before (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMdble.w": "Load Multiple Decrement Before (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMdbal": "Load Multiple Decrement Before (Always)",
        "LDMdbal.n": "Load Multiple Decrement Before (T 16bits encoding) (Always)",
        "LDMdbal.w": "Load Multiple Decrement Before (T/A 32bits encoding) (Always)",
        "LDMea": "Load Multiple Empty Ascending",
        "LDMea.n": "Load Multiple Empty Ascending (T 16bits encoding)",
        "LDMea.w": "Load Multiple Empty Ascending (T/A 32bits encoding)",
        "LDMeaeq": "Load Multiple Empty Ascending (If APSR.Z == 1 [Equal])",
        "LDMeaeq.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMeaeq.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMeane": "Load Multiple Empty Ascending (If APSR.Z == 0 [Not Equal])",
        "LDMeane.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMeane.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMeacs": "Load Multiple Empty Ascending (If APSR.C == 1 [Carry Set])",
        "LDMeacs.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMeacs.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMeacc": "Load Multiple Empty Ascending (If APSR.C == 0 [Carry Clear])",
        "LDMeacc.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMeacc.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMeami": "Load Multiple Empty Ascending (If APSR.N == 1 [Minus])",
        "LDMeami.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDMeami.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDMeapl": "Load Multiple Empty Ascending (If APSR.N == 0 [Plus])",
        "LDMeapl.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDMeapl.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDMeavs": "Load Multiple Empty Ascending (If APSR.V == 1 [Overflow])",
        "LDMeavs.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMeavs.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMeavc": "Load Multiple Empty Ascending (If APSR.V == 0 [No Overflow])",
        "LDMeavc.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMeavc.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMeahi": "Load Multiple Empty Ascending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMeahi.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMeahi.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMeals": "Load Multiple Empty Ascending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMeals.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMeals.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMeage": "Load Multiple Empty Ascending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMeage.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMeage.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMealt": "Load Multiple Empty Ascending (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMealt.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMealt.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMeagt": "Load Multiple Empty Ascending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMeagt.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMeagt.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMeale": "Load Multiple Empty Ascending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMeale.n": "Load Multiple Empty Ascending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMeale.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMeaal": "Load Multiple Empty Ascending (Always)",
        "LDMeaal.n": "Load Multiple Empty Ascending (T 16bits encoding) (Always)",
        "LDMeaal.w": "Load Multiple Empty Ascending (T/A 32bits encoding) (Always)",
        "LDMib": "Load Multiple Increment Before",
        "LDMib.n": "Load Multiple Increment Before (T 16bits encoding)",
        "LDMib.w": "Load Multiple Increment Before (T/A 32bits encoding)",
        "LDMibeq": "Load Multiple Increment Before (If APSR.Z == 1 [Equal])",
        "LDMibeq.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMibeq.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMibne": "Load Multiple Increment Before (If APSR.Z == 0 [Not Equal])",
        "LDMibne.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMibne.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMibcs": "Load Multiple Increment Before (If APSR.C == 1 [Carry Set])",
        "LDMibcs.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMibcs.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMibcc": "Load Multiple Increment Before (If APSR.C == 0 [Carry Clear])",
        "LDMibcc.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMibcc.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMibmi": "Load Multiple Increment Before (If APSR.N == 1 [Minus])",
        "LDMibmi.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDMibmi.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDMibpl": "Load Multiple Increment Before (If APSR.N == 0 [Plus])",
        "LDMibpl.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDMibpl.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDMibvs": "Load Multiple Increment Before (If APSR.V == 1 [Overflow])",
        "LDMibvs.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMibvs.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMibvc": "Load Multiple Increment Before (If APSR.V == 0 [No Overflow])",
        "LDMibvc.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMibvc.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMibhi": "Load Multiple Increment Before (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMibhi.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMibhi.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMibls": "Load Multiple Increment Before (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMibls.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMibls.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMibge": "Load Multiple Increment Before (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMibge.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMibge.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMiblt": "Load Multiple Increment Before (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMiblt.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMiblt.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMibgt": "Load Multiple Increment Before (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMibgt.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMibgt.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMible": "Load Multiple Increment Before (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMible.n": "Load Multiple Increment Before (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMible.w": "Load Multiple Increment Before (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMibal": "Load Multiple Increment Before (Always)",
        "LDMibal.n": "Load Multiple Increment Before (T 16bits encoding) (Always)",
        "LDMibal.w": "Load Multiple Increment Before (T/A 32bits encoding) (Always)",
        "LDMed": "Load Multiple Empty Descending",
        "LDMed.n": "Load Multiple Empty Descending (T 16bits encoding)",
        "LDMed.w": "Load Multiple Empty Descending (T/A 32bits encoding)",
        "LDMedeq": "Load Multiple Empty Descending (If APSR.Z == 1 [Equal])",
        "LDMedeq.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMedeq.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDMedne": "Load Multiple Empty Descending (If APSR.Z == 0 [Not Equal])",
        "LDMedne.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMedne.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDMedcs": "Load Multiple Empty Descending (If APSR.C == 1 [Carry Set])",
        "LDMedcs.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMedcs.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDMedcc": "Load Multiple Empty Descending (If APSR.C == 0 [Carry Clear])",
        "LDMedcc.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMedcc.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDMedmi": "Load Multiple Empty Descending (If APSR.N == 1 [Minus])",
        "LDMedmi.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDMedmi.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDMedpl": "Load Multiple Empty Descending (If APSR.N == 0 [Plus])",
        "LDMedpl.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDMedpl.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDMedvs": "Load Multiple Empty Descending (If APSR.V == 1 [Overflow])",
        "LDMedvs.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMedvs.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDMedvc": "Load Multiple Empty Descending (If APSR.V == 0 [No Overflow])",
        "LDMedvc.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMedvc.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDMedhi": "Load Multiple Empty Descending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMedhi.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMedhi.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDMedls": "Load Multiple Empty Descending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMedls.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMedls.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDMedge": "Load Multiple Empty Descending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMedge.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMedge.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDMedlt": "Load Multiple Empty Descending (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMedlt.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMedlt.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDMedgt": "Load Multiple Empty Descending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMedgt.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMedgt.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDMedle": "Load Multiple Empty Descending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMedle.n": "Load Multiple Empty Descending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMedle.w": "Load Multiple Empty Descending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDMedal": "Load Multiple Empty Descending (Always)",
        "LDMedal.n": "Load Multiple Empty Descending (T 16bits encoding) (Always)",
        "LDMedal.w": "Load Multiple Empty Descending (T/A 32bits encoding) (Always)"
      }
    },
    "LDR%{exclusive}%{wsize}%{c}%{q}": {
      "description": "Load Register %{exclusive} %{wsize} %{q} %{c}",
      "variants": {
        "LDR": "Load Register",
        "LDR.n": "Load Register (T 16bits encoding)",
        "LDR.w": "Load Register (T/A 32bits encoding)",
        "LDReq": "Load Register (If APSR.Z == 1 [Equal])",
        "LDReq.n": "Load Register (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDReq.w": "Load Register (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRne": "Load Register (If APSR.Z == 0 [Not Equal])",
        "LDRne.n": "Load Register (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRne.w": "Load Register (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRcs": "Load Register (If APSR.C == 1 [Carry Set])",
        "LDRcs.n": "Load Register (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRcs.w": "Load Register (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRcc": "Load Register (If APSR.C == 0 [Carry Clear])",
        "LDRcc.n": "Load Register (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRcc.w": "Load Register (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRmi": "Load Register (If APSR.N == 1 [Minus])",
        "LDRmi.n": "Load Register (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRmi.w": "Load Register (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRpl": "Load Register (If APSR.N == 0 [Plus])",
        "LDRpl.n": "Load Register (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRpl.w": "Load Register (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRvs": "Load Register (If APSR.V == 1 [Overflow])",
        "LDRvs.n": "Load Register (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRvs.w": "Load Register (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRvc": "Load Register (If APSR.V == 0 [No Overflow])",
        "LDRvc.n": "Load Register (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRvc.w": "Load Register (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRhi": "Load Register (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhi.n": "Load Register (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhi.w": "Load Register (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRls": "Load Register (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRls.n": "Load Register (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRls.w": "Load Register (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRge": "Load Register (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRge.n": "Load Register (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRge.w": "Load Register (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRlt": "Load Register (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRlt.n": "Load Register (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRlt.w": "Load Register (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRgt": "Load Register (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRgt.n": "Load Register (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRgt.w": "Load Register (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRle": "Load Register (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRle.n": "Load Register (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRle.w": "Load Register (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRal": "Load Register (Always)",
        "LDRal.n": "Load Register (T 16bits encoding) (Always)",
        "LDRal.w": "Load Register (T/A 32bits encoding) (Always)",
        "LDRb": "Load Register Byte",
        "LDRb.n": "Load Register Byte (T 16bits encoding)",
        "LDRb.w": "Load Register Byte (T/A 32bits encoding)",
        "LDRbeq": "Load Register Byte (If APSR.Z == 1 [Equal])",
        "LDRbeq.n": "Load Register Byte (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRbeq.w": "Load Register Byte (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRbne": "Load Register Byte (If APSR.Z == 0 [Not Equal])",
        "LDRbne.n": "Load Register Byte (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRbne.w": "Load Register Byte (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRbcs": "Load Register Byte (If APSR.C == 1 [Carry Set])",
        "LDRbcs.n": "Load Register Byte (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRbcs.w": "Load Register Byte (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRbcc": "Load Register Byte (If APSR.C == 0 [Carry Clear])",
        "LDRbcc.n": "Load Register Byte (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRbcc.w": "Load Register Byte (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRbmi": "Load Register Byte (If APSR.N == 1 [Minus])",
        "LDRbmi.n": "Load Register Byte (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRbmi.w": "Load Register Byte (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRbpl": "Load Register Byte (If APSR.N == 0 [Plus])",
        "LDRbpl.n": "Load Register Byte (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRbpl.w": "Load Register Byte (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRbvs": "Load Register Byte (If APSR.V == 1 [Overflow])",
        "LDRbvs.n": "Load Register Byte (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRbvs.w": "Load Register Byte (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRbvc": "Load Register Byte (If APSR.V == 0 [No Overflow])",
        "LDRbvc.n": "Load Register Byte (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRbvc.w": "Load Register Byte (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRbhi": "Load Register Byte (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRbhi.n": "Load Register Byte (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRbhi.w": "Load Register Byte (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRbls": "Load Register Byte (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRbls.n": "Load Register Byte (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRbls.w": "Load Register Byte (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRbge": "Load Register Byte (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRbge.n": "Load Register Byte (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRbge.w": "Load Register Byte (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRblt": "Load Register Byte (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRblt.n": "Load Register Byte (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRblt.w": "Load Register Byte (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRbgt": "Load Register Byte (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRbgt.n": "Load Register Byte (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRbgt.w": "Load Register Byte (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRble": "Load Register Byte (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRble.n": "Load Register Byte (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRble.w": "Load Register Byte (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRbal": "Load Register Byte (Always)",
        "LDRbal.n": "Load Register Byte (T 16bits encoding) (Always)",
        "LDRbal.w": "Load Register Byte (T/A 32bits encoding) (Always)",
        "LDRh": "Load Register Halfword",
        "LDRh.n": "Load Register Halfword (T 16bits encoding)",
        "LDRh.w": "Load Register Halfword (T/A 32bits encoding)",
        "LDRheq": "Load Register Halfword (If APSR.Z == 1 [Equal])",
        "LDRheq.n": "Load Register Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRheq.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRhne": "Load Register Halfword (If APSR.Z == 0 [Not Equal])",
        "LDRhne.n": "Load Register Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRhne.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRhcs": "Load Register Halfword (If APSR.C == 1 [Carry Set])",
        "LDRhcs.n": "Load Register Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRhcs.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRhcc": "Load Register Halfword (If APSR.C == 0 [Carry Clear])",
        "LDRhcc.n": "Load Register Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRhcc.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRhmi": "Load Register Halfword (If APSR.N == 1 [Minus])",
        "LDRhmi.n": "Load Register Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRhmi.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRhpl": "Load Register Halfword (If APSR.N == 0 [Plus])",
        "LDRhpl.n": "Load Register Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRhpl.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRhvs": "Load Register Halfword (If APSR.V == 1 [Overflow])",
        "LDRhvs.n": "Load Register Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRhvs.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRhvc": "Load Register Halfword (If APSR.V == 0 [No Overflow])",
        "LDRhvc.n": "Load Register Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRhvc.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRhhi": "Load Register Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhhi.n": "Load Register Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhhi.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhls": "Load Register Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRhls.n": "Load Register Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRhls.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRhge": "Load Register Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRhge.n": "Load Register Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRhge.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRhlt": "Load Register Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRhlt.n": "Load Register Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRhlt.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRhgt": "Load Register Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRhgt.n": "Load Register Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRhgt.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRhle": "Load Register Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRhle.n": "Load Register Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRhle.w": "Load Register Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRhal": "Load Register Halfword (Always)",
        "LDRhal.n": "Load Register Halfword (T 16bits encoding) (Always)",
        "LDRhal.w": "Load Register Halfword (T/A 32bits encoding) (Always)",
        "LDRd": "Load Register Doubleword",
        "LDRd.n": "Load Register Doubleword (T 16bits encoding)",
        "LDRd.w": "Load Register Doubleword (T/A 32bits encoding)",
        "LDRdeq": "Load Register Doubleword (If APSR.Z == 1 [Equal])",
        "LDRdeq.n": "Load Register Doubleword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRdeq.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRdne": "Load Register Doubleword (If APSR.Z == 0 [Not Equal])",
        "LDRdne.n": "Load Register Doubleword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRdne.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRdcs": "Load Register Doubleword (If APSR.C == 1 [Carry Set])",
        "LDRdcs.n": "Load Register Doubleword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRdcs.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRdcc": "Load Register Doubleword (If APSR.C == 0 [Carry Clear])",
        "LDRdcc.n": "Load Register Doubleword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRdcc.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRdmi": "Load Register Doubleword (If APSR.N == 1 [Minus])",
        "LDRdmi.n": "Load Register Doubleword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRdmi.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRdpl": "Load Register Doubleword (If APSR.N == 0 [Plus])",
        "LDRdpl.n": "Load Register Doubleword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRdpl.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRdvs": "Load Register Doubleword (If APSR.V == 1 [Overflow])",
        "LDRdvs.n": "Load Register Doubleword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRdvs.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRdvc": "Load Register Doubleword (If APSR.V == 0 [No Overflow])",
        "LDRdvc.n": "Load Register Doubleword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRdvc.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRdhi": "Load Register Doubleword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRdhi.n": "Load Register Doubleword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRdhi.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRdls": "Load Register Doubleword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRdls.n": "Load Register Doubleword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRdls.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRdge": "Load Register Doubleword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRdge.n": "Load Register Doubleword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRdge.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRdlt": "Load Register Doubleword (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRdlt.n": "Load Register Doubleword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRdlt.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRdgt": "Load Register Doubleword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRdgt.n": "Load Register Doubleword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRdgt.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRdle": "Load Register Doubleword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRdle.n": "Load Register Doubleword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRdle.w": "Load Register Doubleword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRdal": "Load Register Doubleword (Always)",
        "LDRdal.n": "Load Register Doubleword (T 16bits encoding) (Always)",
        "LDRdal.w": "Load Register Doubleword (T/A 32bits encoding) (Always)",
        "LDRex": "Load Register Exclusive",
        "LDRex.n": "Load Register Exclusive (T 16bits encoding)",
        "LDRex.w": "Load Register Exclusive (T/A 32bits encoding)",
        "LDRexeq": "Load Register Exclusive (If APSR.Z == 1 [Equal])",
        "LDRexeq.n": "Load Register Exclusive (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRexeq.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRexne": "Load Register Exclusive (If APSR.Z == 0 [Not Equal])",
        "LDRexne.n": "Load Register Exclusive (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRexne.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRexcs": "Load Register Exclusive (If APSR.C == 1 [Carry Set])",
        "LDRexcs.n": "Load Register Exclusive (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRexcs.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRexcc": "Load Register Exclusive (If APSR.C == 0 [Carry Clear])",
        "LDRexcc.n": "Load Register Exclusive (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRexcc.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRexmi": "Load Register Exclusive (If APSR.N == 1 [Minus])",
        "LDRexmi.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRexmi.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRexpl": "Load Register Exclusive (If APSR.N == 0 [Plus])",
        "LDRexpl.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRexpl.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRexvs": "Load Register Exclusive (If APSR.V == 1 [Overflow])",
        "LDRexvs.n": "Load Register Exclusive (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRexvs.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRexvc": "Load Register Exclusive (If APSR.V == 0 [No Overflow])",
        "LDRexvc.n": "Load Register Exclusive (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRexvc.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRexhi": "Load Register Exclusive (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexhi.n": "Load Register Exclusive (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexhi.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexls": "Load Register Exclusive (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexls.n": "Load Register Exclusive (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexls.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexge": "Load Register Exclusive (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexge.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexge.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexlt": "Load Register Exclusive (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexlt.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexlt.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexgt": "Load Register Exclusive (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexgt.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexgt.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexle": "Load Register Exclusive (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexle.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexle.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexal": "Load Register Exclusive (Always)",
        "LDRexal.n": "Load Register Exclusive (T 16bits encoding) (Always)",
        "LDRexal.w": "Load Register Exclusive (T/A 32bits encoding) (Always)",
        "LDRexb": "Load Register Exclusive Byte",
        "LDRexb.n": "Load Register Exclusive Byte (T 16bits encoding)",
        "LDRexb.w": "Load Register Exclusive Byte (T/A 32bits encoding)",
        "LDRexbeq": "Load Register Exclusive Byte (If APSR.Z == 1 [Equal])",
        "LDRexbeq.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRexbeq.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRexbne": "Load Register Exclusive Byte (If APSR.Z == 0 [Not Equal])",
        "LDRexbne.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRexbne.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRexbcs": "Load Register Exclusive Byte (If APSR.C == 1 [Carry Set])",
        "LDRexbcs.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRexbcs.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRexbcc": "Load Register Exclusive Byte (If APSR.C == 0 [Carry Clear])",
        "LDRexbcc.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRexbcc.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRexbmi": "Load Register Exclusive Byte (If APSR.N == 1 [Minus])",
        "LDRexbmi.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRexbmi.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRexbpl": "Load Register Exclusive Byte (If APSR.N == 0 [Plus])",
        "LDRexbpl.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRexbpl.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRexbvs": "Load Register Exclusive Byte (If APSR.V == 1 [Overflow])",
        "LDRexbvs.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRexbvs.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRexbvc": "Load Register Exclusive Byte (If APSR.V == 0 [No Overflow])",
        "LDRexbvc.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRexbvc.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRexbhi": "Load Register Exclusive Byte (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexbhi.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexbhi.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexbls": "Load Register Exclusive Byte (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexbls.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexbls.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexbge": "Load Register Exclusive Byte (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexbge.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexbge.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexblt": "Load Register Exclusive Byte (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexblt.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexblt.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexbgt": "Load Register Exclusive Byte (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexbgt.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexbgt.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexble": "Load Register Exclusive Byte (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexble.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexble.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexbal": "Load Register Exclusive Byte (Always)",
        "LDRexbal.n": "Load Register Exclusive Byte (T 16bits encoding) (Always)",
        "LDRexbal.w": "Load Register Exclusive Byte (T/A 32bits encoding) (Always)",
        "LDRexh": "Load Register Exclusive Halfword",
        "LDRexh.n": "Load Register Exclusive Halfword (T 16bits encoding)",
        "LDRexh.w": "Load Register Exclusive Halfword (T/A 32bits encoding)",
        "LDRexheq": "Load Register Exclusive Halfword (If APSR.Z == 1 [Equal])",
        "LDRexheq.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRexheq.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRexhne": "Load Register Exclusive Halfword (If APSR.Z == 0 [Not Equal])",
        "LDRexhne.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRexhne.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRexhcs": "Load Register Exclusive Halfword (If APSR.C == 1 [Carry Set])",
        "LDRexhcs.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRexhcs.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRexhcc": "Load Register Exclusive Halfword (If APSR.C == 0 [Carry Clear])",
        "LDRexhcc.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRexhcc.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRexhmi": "Load Register Exclusive Halfword (If APSR.N == 1 [Minus])",
        "LDRexhmi.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRexhmi.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRexhpl": "Load Register Exclusive Halfword (If APSR.N == 0 [Plus])",
        "LDRexhpl.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRexhpl.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRexhvs": "Load Register Exclusive Halfword (If APSR.V == 1 [Overflow])",
        "LDRexhvs.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRexhvs.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRexhvc": "Load Register Exclusive Halfword (If APSR.V == 0 [No Overflow])",
        "LDRexhvc.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRexhvc.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRexhhi": "Load Register Exclusive Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexhhi.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexhhi.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexhls": "Load Register Exclusive Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexhls.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexhls.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexhge": "Load Register Exclusive Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexhge.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexhge.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexhlt": "Load Register Exclusive Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexhlt.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexhlt.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexhgt": "Load Register Exclusive Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexhgt.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexhgt.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexhle": "Load Register Exclusive Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexhle.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexhle.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexhal": "Load Register Exclusive Halfword (Always)",
        "LDRexhal.n": "Load Register Exclusive Halfword (T 16bits encoding) (Always)",
        "LDRexhal.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (Always)",
        "LDRexd": "Load Register Exclusive Doubleword",
        "LDRexd.n": "Load Register Exclusive Doubleword (T 16bits encoding)",
        "LDRexd.w": "Load Register Exclusive Doubleword (T/A 32bits encoding)",
        "LDRexdeq": "Load Register Exclusive Doubleword (If APSR.Z == 1 [Equal])",
        "LDRexdeq.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRexdeq.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRexdne": "Load Register Exclusive Doubleword (If APSR.Z == 0 [Not Equal])",
        "LDRexdne.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRexdne.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRexdcs": "Load Register Exclusive Doubleword (If APSR.C == 1 [Carry Set])",
        "LDRexdcs.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRexdcs.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRexdcc": "Load Register Exclusive Doubleword (If APSR.C == 0 [Carry Clear])",
        "LDRexdcc.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRexdcc.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRexdmi": "Load Register Exclusive Doubleword (If APSR.N == 1 [Minus])",
        "LDRexdmi.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRexdmi.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRexdpl": "Load Register Exclusive Doubleword (If APSR.N == 0 [Plus])",
        "LDRexdpl.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRexdpl.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRexdvs": "Load Register Exclusive Doubleword (If APSR.V == 1 [Overflow])",
        "LDRexdvs.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRexdvs.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRexdvc": "Load Register Exclusive Doubleword (If APSR.V == 0 [No Overflow])",
        "LDRexdvc.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRexdvc.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRexdhi": "Load Register Exclusive Doubleword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexdhi.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexdhi.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRexdls": "Load Register Exclusive Doubleword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexdls.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexdls.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRexdge": "Load Register Exclusive Doubleword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexdge.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexdge.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRexdlt": "Load Register Exclusive Doubleword (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexdlt.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexdlt.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRexdgt": "Load Register Exclusive Doubleword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexdgt.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexdgt.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRexdle": "Load Register Exclusive Doubleword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexdle.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexdle.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRexdal": "Load Register Exclusive Doubleword (Always)",
        "LDRexdal.n": "Load Register Exclusive Doubleword (T 16bits encoding) (Always)",
        "LDRexdal.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (Always)"
      }
    },
    "LDR%{wsize}T%{c}%{q}": {
      "description": "Load Register %{wsize} Unprivileged %{q} %{c}",
      "variants": {
        "LDRT": "Load Register Unprivileged",
        "LDRT.n": "Load Register Unprivileged (T 16bits encoding)",
        "LDRT.w": "Load Register Unprivileged (T/A 32bits encoding)",
        "LDRTeq": "Load Register Unprivileged (If APSR.Z == 1 [Equal])",
        "LDRTeq.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRTeq.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRTne": "Load Register Unprivileged (If APSR.Z == 0 [Not Equal])",
        "LDRTne.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRTne.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRTcs": "Load Register Unprivileged (If APSR.C == 1 [Carry Set])",
        "LDRTcs.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRTcs.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRTcc": "Load Register Unprivileged (If APSR.C == 0 [Carry Clear])",
        "LDRTcc.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRTcc.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRTmi": "Load Register Unprivileged (If APSR.N == 1 [Minus])",
        "LDRTmi.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRTmi.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRTpl": "Load Register Unprivileged (If APSR.N == 0 [Plus])",
        "LDRTpl.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRTpl.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRTvs": "Load Register Unprivileged (If APSR.V == 1 [Overflow])",
        "LDRTvs.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRTvs.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRTvc": "Load Register Unprivileged (If APSR.V == 0 [No Overflow])",
        "LDRTvc.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRTvc.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRThi": "Load Register Unprivileged (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRThi.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRThi.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRTls": "Load Register Unprivileged (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRTls.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRTls.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRTge": "Load Register Unprivileged (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRTge.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRTge.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRTlt": "Load Register Unprivileged (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRTlt.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRTlt.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRTgt": "Load Register Unprivileged (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRTgt.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRTgt.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRTle": "Load Register Unprivileged (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRTle.n": "Load Register Unprivileged (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRTle.w": "Load Register Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRTal": "Load Register Unprivileged (Always)",
        "LDRTal.n": "Load Register Unprivileged (T 16bits encoding) (Always)",
        "LDRTal.w": "Load Register Unprivileged (T/A 32bits encoding) (Always)",
        "LDRbT": "Load Register Byte Unprivileged",
        "LDRbT.n": "Load Register Byte Unprivileged (T 16bits encoding)",
        "LDRbT.w": "Load Register Byte Unprivileged (T/A 32bits encoding)",
        "LDRbTeq": "Load Register Byte Unprivileged (If APSR.Z == 1 [Equal])",
        "LDRbTeq.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRbTeq.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRbTne": "Load Register Byte Unprivileged (If APSR.Z == 0 [Not Equal])",
        "LDRbTne.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRbTne.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRbTcs": "Load Register Byte Unprivileged (If APSR.C == 1 [Carry Set])",
        "LDRbTcs.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRbTcs.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRbTcc": "Load Register Byte Unprivileged (If APSR.C == 0 [Carry Clear])",
        "LDRbTcc.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRbTcc.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRbTmi": "Load Register Byte Unprivileged (If APSR.N == 1 [Minus])",
        "LDRbTmi.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRbTmi.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRbTpl": "Load Register Byte Unprivileged (If APSR.N == 0 [Plus])",
        "LDRbTpl.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRbTpl.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRbTvs": "Load Register Byte Unprivileged (If APSR.V == 1 [Overflow])",
        "LDRbTvs.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRbTvs.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRbTvc": "Load Register Byte Unprivileged (If APSR.V == 0 [No Overflow])",
        "LDRbTvc.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRbTvc.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRbThi": "Load Register Byte Unprivileged (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRbThi.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRbThi.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRbTls": "Load Register Byte Unprivileged (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRbTls.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRbTls.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRbTge": "Load Register Byte Unprivileged (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRbTge.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRbTge.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRbTlt": "Load Register Byte Unprivileged (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRbTlt.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRbTlt.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRbTgt": "Load Register Byte Unprivileged (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRbTgt.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRbTgt.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRbTle": "Load Register Byte Unprivileged (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRbTle.n": "Load Register Byte Unprivileged (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRbTle.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRbTal": "Load Register Byte Unprivileged (Always)",
        "LDRbTal.n": "Load Register Byte Unprivileged (T 16bits encoding) (Always)",
        "LDRbTal.w": "Load Register Byte Unprivileged (T/A 32bits encoding) (Always)",
        "LDRsbT": "Load Register Signed Byte Unprivileged",
        "LDRsbT.n": "Load Register Signed Byte Unprivileged (T 16bits encoding)",
        "LDRsbT.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding)",
        "LDRsbTeq": "Load Register Signed Byte Unprivileged (If APSR.Z == 1 [Equal])",
        "LDRsbTeq.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRsbTeq.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRsbTne": "Load Register Signed Byte Unprivileged (If APSR.Z == 0 [Not Equal])",
        "LDRsbTne.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRsbTne.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRsbTcs": "Load Register Signed Byte Unprivileged (If APSR.C == 1 [Carry Set])",
        "LDRsbTcs.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRsbTcs.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRsbTcc": "Load Register Signed Byte Unprivileged (If APSR.C == 0 [Carry Clear])",
        "LDRsbTcc.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRsbTcc.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRsbTmi": "Load Register Signed Byte Unprivileged (If APSR.N == 1 [Minus])",
        "LDRsbTmi.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRsbTmi.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRsbTpl": "Load Register Signed Byte Unprivileged (If APSR.N == 0 [Plus])",
        "LDRsbTpl.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRsbTpl.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRsbTvs": "Load Register Signed Byte Unprivileged (If APSR.V == 1 [Overflow])",
        "LDRsbTvs.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRsbTvs.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRsbTvc": "Load Register Signed Byte Unprivileged (If APSR.V == 0 [No Overflow])",
        "LDRsbTvc.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRsbTvc.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRsbThi": "Load Register Signed Byte Unprivileged (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRsbThi.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRsbThi.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRsbTls": "Load Register Signed Byte Unprivileged (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRsbTls.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRsbTls.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRsbTge": "Load Register Signed Byte Unprivileged (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRsbTge.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRsbTge.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRsbTlt": "Load Register Signed Byte Unprivileged (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRsbTlt.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRsbTlt.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRsbTgt": "Load Register Signed Byte Unprivileged (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRsbTgt.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRsbTgt.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRsbTle": "Load Register Signed Byte Unprivileged (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRsbTle.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRsbTle.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRsbTal": "Load Register Signed Byte Unprivileged (Always)",
        "LDRsbTal.n": "Load Register Signed Byte Unprivileged (T 16bits encoding) (Always)",
        "LDRsbTal.w": "Load Register Signed Byte Unprivileged (T/A 32bits encoding) (Always)",
        "LDRhT": "Load Register Halfword Unprivileged",
        "LDRhT.n": "Load Register Halfword Unprivileged (T 16bits encoding)",
        "LDRhT.w": "Load Register Halfword Unprivileged (T/A 32bits encoding)",
        "LDRhTeq": "Load Register Halfword Unprivileged (If APSR.Z == 1 [Equal])",
        "LDRhTeq.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRhTeq.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRhTne": "Load Register Halfword Unprivileged (If APSR.Z == 0 [Not Equal])",
        "LDRhTne.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRhTne.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRhTcs": "Load Register Halfword Unprivileged (If APSR.C == 1 [Carry Set])",
        "LDRhTcs.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRhTcs.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRhTcc": "Load Register Halfword Unprivileged (If APSR.C == 0 [Carry Clear])",
        "LDRhTcc.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRhTcc.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRhTmi": "Load Register Halfword Unprivileged (If APSR.N == 1 [Minus])",
        "LDRhTmi.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRhTmi.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRhTpl": "Load Register Halfword Unprivileged (If APSR.N == 0 [Plus])",
        "LDRhTpl.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRhTpl.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRhTvs": "Load Register Halfword Unprivileged (If APSR.V == 1 [Overflow])",
        "LDRhTvs.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRhTvs.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRhTvc": "Load Register Halfword Unprivileged (If APSR.V == 0 [No Overflow])",
        "LDRhTvc.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRhTvc.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRhThi": "Load Register Halfword Unprivileged (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhThi.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhThi.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhTls": "Load Register Halfword Unprivileged (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRhTls.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRhTls.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRhTge": "Load Register Halfword Unprivileged (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRhTge.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRhTge.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRhTlt": "Load Register Halfword Unprivileged (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRhTlt.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRhTlt.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRhTgt": "Load Register Halfword Unprivileged (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRhTgt.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRhTgt.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRhTle": "Load Register Halfword Unprivileged (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRhTle.n": "Load Register Halfword Unprivileged (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRhTle.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRhTal": "Load Register Halfword Unprivileged (Always)",
        "LDRhTal.n": "Load Register Halfword Unprivileged (T 16bits encoding) (Always)",
        "LDRhTal.w": "Load Register Halfword Unprivileged (T/A 32bits encoding) (Always)",
        "LDRshT": "Load Register Signed Halfword Unprivileged",
        "LDRshT.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding)",
        "LDRshT.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding)",
        "LDRshTeq": "Load Register Signed Halfword Unprivileged (If APSR.Z == 1 [Equal])",
        "LDRshTeq.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRshTeq.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRshTne": "Load Register Signed Halfword Unprivileged (If APSR.Z == 0 [Not Equal])",
        "LDRshTne.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRshTne.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRshTcs": "Load Register Signed Halfword Unprivileged (If APSR.C == 1 [Carry Set])",
        "LDRshTcs.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRshTcs.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRshTcc": "Load Register Signed Halfword Unprivileged (If APSR.C == 0 [Carry Clear])",
        "LDRshTcc.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRshTcc.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRshTmi": "Load Register Signed Halfword Unprivileged (If APSR.N == 1 [Minus])",
        "LDRshTmi.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRshTmi.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRshTpl": "Load Register Signed Halfword Unprivileged (If APSR.N == 0 [Plus])",
        "LDRshTpl.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRshTpl.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRshTvs": "Load Register Signed Halfword Unprivileged (If APSR.V == 1 [Overflow])",
        "LDRshTvs.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRshTvs.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRshTvc": "Load Register Signed Halfword Unprivileged (If APSR.V == 0 [No Overflow])",
        "LDRshTvc.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRshTvc.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRshThi": "Load Register Signed Halfword Unprivileged (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRshThi.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRshThi.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRshTls": "Load Register Signed Halfword Unprivileged (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRshTls.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRshTls.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRshTge": "Load Register Signed Halfword Unprivileged (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRshTge.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRshTge.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRshTlt": "Load Register Signed Halfword Unprivileged (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRshTlt.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRshTlt.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRshTgt": "Load Register Signed Halfword Unprivileged (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRshTgt.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRshTgt.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRshTle": "Load Register Signed Halfword Unprivileged (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRshTle.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRshTle.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRshTal": "Load Register Signed Halfword Unprivileged (Always)",
        "LDRshTal.n": "Load Register Signed Halfword Unprivileged (T 16bits encoding) (Always)",
        "LDRshTal.w": "Load Register Signed Halfword Unprivileged (T/A 32bits encoding) (Always)"
      }
    },
    "LDR%{wsize}%{c}%{q}": {
      "description": "Load Register Exclusive %{wsize} %{q} %{c}",
      "variants": {
        "LDR": "Load Register Exclusive",
        "LDR.n": "Load Register Exclusive (T 16bits encoding)",
        "LDR.w": "Load Register Exclusive (T/A 32bits encoding)",
        "LDReq": "Load Register Exclusive (If APSR.Z == 1 [Equal])",
        "LDReq.n": "Load Register Exclusive (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDReq.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRne": "Load Register Exclusive (If APSR.Z == 0 [Not Equal])",
        "LDRne.n": "Load Register Exclusive (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRne.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRcs": "Load Register Exclusive (If APSR.C == 1 [Carry Set])",
        "LDRcs.n": "Load Register Exclusive (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRcs.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRcc": "Load Register Exclusive (If APSR.C == 0 [Carry Clear])",
        "LDRcc.n": "Load Register Exclusive (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRcc.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRmi": "Load Register Exclusive (If APSR.N == 1 [Minus])",
        "LDRmi.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRmi.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRpl": "Load Register Exclusive (If APSR.N == 0 [Plus])",
        "LDRpl.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRpl.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRvs": "Load Register Exclusive (If APSR.V == 1 [Overflow])",
        "LDRvs.n": "Load Register Exclusive (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRvs.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRvc": "Load Register Exclusive (If APSR.V == 0 [No Overflow])",
        "LDRvc.n": "Load Register Exclusive (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRvc.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRhi": "Load Register Exclusive (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhi.n": "Load Register Exclusive (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhi.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRls": "Load Register Exclusive (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRls.n": "Load Register Exclusive (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRls.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRge": "Load Register Exclusive (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRge.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRge.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRlt": "Load Register Exclusive (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRlt.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRlt.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRgt": "Load Register Exclusive (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRgt.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRgt.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRle": "Load Register Exclusive (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRle.n": "Load Register Exclusive (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRle.w": "Load Register Exclusive (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRal": "Load Register Exclusive (Always)",
        "LDRal.n": "Load Register Exclusive (T 16bits encoding) (Always)",
        "LDRal.w": "Load Register Exclusive (T/A 32bits encoding) (Always)",
        "LDRb": "Load Register Exclusive Byte",
        "LDRb.n": "Load Register Exclusive Byte (T 16bits encoding)",
        "LDRb.w": "Load Register Exclusive Byte (T/A 32bits encoding)",
        "LDRbeq": "Load Register Exclusive Byte (If APSR.Z == 1 [Equal])",
        "LDRbeq.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRbeq.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRbne": "Load Register Exclusive Byte (If APSR.Z == 0 [Not Equal])",
        "LDRbne.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRbne.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRbcs": "Load Register Exclusive Byte (If APSR.C == 1 [Carry Set])",
        "LDRbcs.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRbcs.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRbcc": "Load Register Exclusive Byte (If APSR.C == 0 [Carry Clear])",
        "LDRbcc.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRbcc.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRbmi": "Load Register Exclusive Byte (If APSR.N == 1 [Minus])",
        "LDRbmi.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRbmi.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRbpl": "Load Register Exclusive Byte (If APSR.N == 0 [Plus])",
        "LDRbpl.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRbpl.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRbvs": "Load Register Exclusive Byte (If APSR.V == 1 [Overflow])",
        "LDRbvs.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRbvs.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRbvc": "Load Register Exclusive Byte (If APSR.V == 0 [No Overflow])",
        "LDRbvc.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRbvc.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRbhi": "Load Register Exclusive Byte (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRbhi.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRbhi.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRbls": "Load Register Exclusive Byte (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRbls.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRbls.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRbge": "Load Register Exclusive Byte (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRbge.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRbge.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRblt": "Load Register Exclusive Byte (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRblt.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRblt.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRbgt": "Load Register Exclusive Byte (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRbgt.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRbgt.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRble": "Load Register Exclusive Byte (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRble.n": "Load Register Exclusive Byte (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRble.w": "Load Register Exclusive Byte (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRbal": "Load Register Exclusive Byte (Always)",
        "LDRbal.n": "Load Register Exclusive Byte (T 16bits encoding) (Always)",
        "LDRbal.w": "Load Register Exclusive Byte (T/A 32bits encoding) (Always)",
        "LDRh": "Load Register Exclusive Halfword",
        "LDRh.n": "Load Register Exclusive Halfword (T 16bits encoding)",
        "LDRh.w": "Load Register Exclusive Halfword (T/A 32bits encoding)",
        "LDRheq": "Load Register Exclusive Halfword (If APSR.Z == 1 [Equal])",
        "LDRheq.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRheq.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRhne": "Load Register Exclusive Halfword (If APSR.Z == 0 [Not Equal])",
        "LDRhne.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRhne.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRhcs": "Load Register Exclusive Halfword (If APSR.C == 1 [Carry Set])",
        "LDRhcs.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRhcs.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRhcc": "Load Register Exclusive Halfword (If APSR.C == 0 [Carry Clear])",
        "LDRhcc.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRhcc.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRhmi": "Load Register Exclusive Halfword (If APSR.N == 1 [Minus])",
        "LDRhmi.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRhmi.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRhpl": "Load Register Exclusive Halfword (If APSR.N == 0 [Plus])",
        "LDRhpl.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRhpl.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRhvs": "Load Register Exclusive Halfword (If APSR.V == 1 [Overflow])",
        "LDRhvs.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRhvs.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRhvc": "Load Register Exclusive Halfword (If APSR.V == 0 [No Overflow])",
        "LDRhvc.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRhvc.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRhhi": "Load Register Exclusive Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhhi.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhhi.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRhls": "Load Register Exclusive Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRhls.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRhls.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRhge": "Load Register Exclusive Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRhge.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRhge.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRhlt": "Load Register Exclusive Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRhlt.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRhlt.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRhgt": "Load Register Exclusive Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRhgt.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRhgt.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRhle": "Load Register Exclusive Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRhle.n": "Load Register Exclusive Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRhle.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRhal": "Load Register Exclusive Halfword (Always)",
        "LDRhal.n": "Load Register Exclusive Halfword (T 16bits encoding) (Always)",
        "LDRhal.w": "Load Register Exclusive Halfword (T/A 32bits encoding) (Always)",
        "LDRd": "Load Register Exclusive Doubleword",
        "LDRd.n": "Load Register Exclusive Doubleword (T 16bits encoding)",
        "LDRd.w": "Load Register Exclusive Doubleword (T/A 32bits encoding)",
        "LDRdeq": "Load Register Exclusive Doubleword (If APSR.Z == 1 [Equal])",
        "LDRdeq.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRdeq.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRdne": "Load Register Exclusive Doubleword (If APSR.Z == 0 [Not Equal])",
        "LDRdne.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRdne.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRdcs": "Load Register Exclusive Doubleword (If APSR.C == 1 [Carry Set])",
        "LDRdcs.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRdcs.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRdcc": "Load Register Exclusive Doubleword (If APSR.C == 0 [Carry Clear])",
        "LDRdcc.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRdcc.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRdmi": "Load Register Exclusive Doubleword (If APSR.N == 1 [Minus])",
        "LDRdmi.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRdmi.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRdpl": "Load Register Exclusive Doubleword (If APSR.N == 0 [Plus])",
        "LDRdpl.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRdpl.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRdvs": "Load Register Exclusive Doubleword (If APSR.V == 1 [Overflow])",
        "LDRdvs.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRdvs.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRdvc": "Load Register Exclusive Doubleword (If APSR.V == 0 [No Overflow])",
        "LDRdvc.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRdvc.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRdhi": "Load Register Exclusive Doubleword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRdhi.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRdhi.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRdls": "Load Register Exclusive Doubleword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRdls.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRdls.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRdge": "Load Register Exclusive Doubleword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRdge.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRdge.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRdlt": "Load Register Exclusive Doubleword (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRdlt.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRdlt.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRdgt": "Load Register Exclusive Doubleword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRdgt.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRdgt.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRdle": "Load Register Exclusive Doubleword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRdle.n": "Load Register Exclusive Doubleword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRdle.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRdal": "Load Register Exclusive Doubleword (Always)",
        "LDRdal.n": "Load Register Exclusive Doubleword (T 16bits encoding) (Always)",
        "LDRdal.w": "Load Register Exclusive Doubleword (T/A 32bits encoding) (Always)"
      }
    },
    "LDRSB%{c}%{q}": {
      "description": "Load Signed Byte %{q} %{c}",
      "variants": {
        "LDRSB": "Load Signed Byte",
        "LDRSB.n": "Load Signed Byte (T 16bits encoding)",
        "LDRSB.w": "Load Signed Byte (T/A 32bits encoding)",
        "LDRSBeq": "Load Signed Byte (If APSR.Z == 1 [Equal])",
        "LDRSBeq.n": "Load Signed Byte (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRSBeq.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRSBne": "Load Signed Byte (If APSR.Z == 0 [Not Equal])",
        "LDRSBne.n": "Load Signed Byte (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRSBne.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRSBcs": "Load Signed Byte (If APSR.C == 1 [Carry Set])",
        "LDRSBcs.n": "Load Signed Byte (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRSBcs.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRSBcc": "Load Signed Byte (If APSR.C == 0 [Carry Clear])",
        "LDRSBcc.n": "Load Signed Byte (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRSBcc.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRSBmi": "Load Signed Byte (If APSR.N == 1 [Minus])",
        "LDRSBmi.n": "Load Signed Byte (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRSBmi.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRSBpl": "Load Signed Byte (If APSR.N == 0 [Plus])",
        "LDRSBpl.n": "Load Signed Byte (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRSBpl.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRSBvs": "Load Signed Byte (If APSR.V == 1 [Overflow])",
        "LDRSBvs.n": "Load Signed Byte (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRSBvs.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRSBvc": "Load Signed Byte (If APSR.V == 0 [No Overflow])",
        "LDRSBvc.n": "Load Signed Byte (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRSBvc.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRSBhi": "Load Signed Byte (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRSBhi.n": "Load Signed Byte (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRSBhi.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRSBls": "Load Signed Byte (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRSBls.n": "Load Signed Byte (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRSBls.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRSBge": "Load Signed Byte (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRSBge.n": "Load Signed Byte (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRSBge.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRSBlt": "Load Signed Byte (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRSBlt.n": "Load Signed Byte (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRSBlt.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRSBgt": "Load Signed Byte (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRSBgt.n": "Load Signed Byte (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRSBgt.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRSBle": "Load Signed Byte (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRSBle.n": "Load Signed Byte (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRSBle.w": "Load Signed Byte (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRSBal": "Load Signed Byte (Always)",
        "LDRSBal.n": "Load Signed Byte (T 16bits encoding) (Always)",
        "LDRSBal.w": "Load Signed Byte (T/A 32bits encoding) (Always)"
      }
    },
    "LDRSH%{c}%{q}": {
      "description": "Load Signed Halfword %{q} %{c}",
      "variants": {
        "LDRSH": "Load Signed Halfword",
        "LDRSH.n": "Load Signed Halfword (T 16bits encoding)",
        "LDRSH.w": "Load Signed Halfword (T/A 32bits encoding)",
        "LDRSHeq": "Load Signed Halfword (If APSR.Z == 1 [Equal])",
        "LDRSHeq.n": "Load Signed Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRSHeq.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LDRSHne": "Load Signed Halfword (If APSR.Z == 0 [Not Equal])",
        "LDRSHne.n": "Load Signed Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRSHne.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LDRSHcs": "Load Signed Halfword (If APSR.C == 1 [Carry Set])",
        "LDRSHcs.n": "Load Signed Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRSHcs.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LDRSHcc": "Load Signed Halfword (If APSR.C == 0 [Carry Clear])",
        "LDRSHcc.n": "Load Signed Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRSHcc.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LDRSHmi": "Load Signed Halfword (If APSR.N == 1 [Minus])",
        "LDRSHmi.n": "Load Signed Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LDRSHmi.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LDRSHpl": "Load Signed Halfword (If APSR.N == 0 [Plus])",
        "LDRSHpl.n": "Load Signed Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LDRSHpl.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LDRSHvs": "Load Signed Halfword (If APSR.V == 1 [Overflow])",
        "LDRSHvs.n": "Load Signed Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRSHvs.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LDRSHvc": "Load Signed Halfword (If APSR.V == 0 [No Overflow])",
        "LDRSHvc.n": "Load Signed Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRSHvc.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LDRSHhi": "Load Signed Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRSHhi.n": "Load Signed Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRSHhi.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LDRSHls": "Load Signed Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRSHls.n": "Load Signed Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRSHls.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LDRSHge": "Load Signed Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRSHge.n": "Load Signed Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRSHge.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LDRSHlt": "Load Signed Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRSHlt.n": "Load Signed Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRSHlt.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LDRSHgt": "Load Signed Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRSHgt.n": "Load Signed Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRSHgt.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LDRSHle": "Load Signed Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRSHle.n": "Load Signed Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRSHle.w": "Load Signed Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LDRSHal": "Load Signed Halfword (Always)",
        "LDRSHal.n": "Load Signed Halfword (T 16bits encoding) (Always)",
        "LDRSHal.w": "Load Signed Halfword (T/A 32bits encoding) (Always)"
      }
    },
    "LEAVEX%{q}": {
      "description": "Change ThumbEE state to Thumb state %{q}",
      "variants": {
        "LEAVEX": "Change ThumbEE state to Thumb state",
        "LEAVEX.n": "Change ThumbEE state to Thumb state (T 16bits encoding)",
        "LEAVEX.w": "Change ThumbEE state to Thumb state (T/A 32bits encoding)"
      }
    },
    "LSL%{s}%{c}%{q}": {
      "description": "Logical Shift Left %{q} %{c} %{s}",
      "variants": {
        "LSL": "Logical Shift Left",
        "LSL.n": "Logical Shift Left (T 16bits encoding)",
        "LSL.w": "Logical Shift Left (T/A 32bits encoding)",
        "LSLeq": "Logical Shift Left (If APSR.Z == 1 [Equal])",
        "LSLeq.n": "Logical Shift Left (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LSLeq.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LSLne": "Logical Shift Left (If APSR.Z == 0 [Not Equal])",
        "LSLne.n": "Logical Shift Left (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LSLne.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LSLcs": "Logical Shift Left (If APSR.C == 1 [Carry Set])",
        "LSLcs.n": "Logical Shift Left (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LSLcs.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LSLcc": "Logical Shift Left (If APSR.C == 0 [Carry Clear])",
        "LSLcc.n": "Logical Shift Left (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LSLcc.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LSLmi": "Logical Shift Left (If APSR.N == 1 [Minus])",
        "LSLmi.n": "Logical Shift Left (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LSLmi.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LSLpl": "Logical Shift Left (If APSR.N == 0 [Plus])",
        "LSLpl.n": "Logical Shift Left (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LSLpl.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LSLvs": "Logical Shift Left (If APSR.V == 1 [Overflow])",
        "LSLvs.n": "Logical Shift Left (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LSLvs.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LSLvc": "Logical Shift Left (If APSR.V == 0 [No Overflow])",
        "LSLvc.n": "Logical Shift Left (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LSLvc.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LSLhi": "Logical Shift Left (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LSLhi.n": "Logical Shift Left (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LSLhi.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LSLls": "Logical Shift Left (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LSLls.n": "Logical Shift Left (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LSLls.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LSLge": "Logical Shift Left (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LSLge.n": "Logical Shift Left (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LSLge.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LSLlt": "Logical Shift Left (If APSR.N != APSR.V [Signed Lesser Than])",
        "LSLlt.n": "Logical Shift Left (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LSLlt.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LSLgt": "Logical Shift Left (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LSLgt.n": "Logical Shift Left (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LSLgt.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LSLle": "Logical Shift Left (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LSLle.n": "Logical Shift Left (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LSLle.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LSLal": "Logical Shift Left (Always)",
        "LSLal.n": "Logical Shift Left (T 16bits encoding) (Always)",
        "LSLal.w": "Logical Shift Left (T/A 32bits encoding) (Always)",
        "LSLs": "Logical Shift Left (Update APSR)",
        "LSLs.n": "Logical Shift Left (T 16bits encoding) (Update APSR)",
        "LSLs.w": "Logical Shift Left (T/A 32bits encoding) (Update APSR)",
        "LSLseq": "Logical Shift Left (If APSR.Z == 1 [Equal]) (Update APSR)",
        "LSLseq.n": "Logical Shift Left (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "LSLseq.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "LSLsne": "Logical Shift Left (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "LSLsne.n": "Logical Shift Left (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "LSLsne.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "LSLscs": "Logical Shift Left (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "LSLscs.n": "Logical Shift Left (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "LSLscs.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "LSLscc": "Logical Shift Left (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "LSLscc.n": "Logical Shift Left (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "LSLscc.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "LSLsmi": "Logical Shift Left (If APSR.N == 1 [Minus]) (Update APSR)",
        "LSLsmi.n": "Logical Shift Left (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "LSLsmi.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "LSLspl": "Logical Shift Left (If APSR.N == 0 [Plus]) (Update APSR)",
        "LSLspl.n": "Logical Shift Left (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "LSLspl.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "LSLsvs": "Logical Shift Left (If APSR.V == 1 [Overflow]) (Update APSR)",
        "LSLsvs.n": "Logical Shift Left (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "LSLsvs.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "LSLsvc": "Logical Shift Left (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "LSLsvc.n": "Logical Shift Left (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "LSLsvc.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "LSLshi": "Logical Shift Left (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "LSLshi.n": "Logical Shift Left (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "LSLshi.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "LSLsls": "Logical Shift Left (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "LSLsls.n": "Logical Shift Left (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "LSLsls.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "LSLsge": "Logical Shift Left (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "LSLsge.n": "Logical Shift Left (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "LSLsge.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "LSLslt": "Logical Shift Left (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "LSLslt.n": "Logical Shift Left (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "LSLslt.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "LSLsgt": "Logical Shift Left (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "LSLsgt.n": "Logical Shift Left (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "LSLsgt.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "LSLsle": "Logical Shift Left (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "LSLsle.n": "Logical Shift Left (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "LSLsle.w": "Logical Shift Left (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "LSLsal": "Logical Shift Left (Always) (Update APSR)",
        "LSLsal.n": "Logical Shift Left (T 16bits encoding) (Always) (Update APSR)",
        "LSLsal.w": "Logical Shift Left (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "LSR%{s}%{c}%{q}": {
      "description": "Logical Shift Right %{q} %{c} %{s}",
      "variants": {
        "LSR": "Logical Shift Right",
        "LSR.n": "Logical Shift Right (T 16bits encoding)",
        "LSR.w": "Logical Shift Right (T/A 32bits encoding)",
        "LSReq": "Logical Shift Right (If APSR.Z == 1 [Equal])",
        "LSReq.n": "Logical Shift Right (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "LSReq.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "LSRne": "Logical Shift Right (If APSR.Z == 0 [Not Equal])",
        "LSRne.n": "Logical Shift Right (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LSRne.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "LSRcs": "Logical Shift Right (If APSR.C == 1 [Carry Set])",
        "LSRcs.n": "Logical Shift Right (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "LSRcs.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "LSRcc": "Logical Shift Right (If APSR.C == 0 [Carry Clear])",
        "LSRcc.n": "Logical Shift Right (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LSRcc.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "LSRmi": "Logical Shift Right (If APSR.N == 1 [Minus])",
        "LSRmi.n": "Logical Shift Right (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "LSRmi.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "LSRpl": "Logical Shift Right (If APSR.N == 0 [Plus])",
        "LSRpl.n": "Logical Shift Right (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "LSRpl.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "LSRvs": "Logical Shift Right (If APSR.V == 1 [Overflow])",
        "LSRvs.n": "Logical Shift Right (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "LSRvs.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "LSRvc": "Logical Shift Right (If APSR.V == 0 [No Overflow])",
        "LSRvc.n": "Logical Shift Right (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "LSRvc.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "LSRhi": "Logical Shift Right (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LSRhi.n": "Logical Shift Right (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LSRhi.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "LSRls": "Logical Shift Right (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LSRls.n": "Logical Shift Right (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LSRls.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "LSRge": "Logical Shift Right (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LSRge.n": "Logical Shift Right (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LSRge.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "LSRlt": "Logical Shift Right (If APSR.N != APSR.V [Signed Lesser Than])",
        "LSRlt.n": "Logical Shift Right (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LSRlt.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "LSRgt": "Logical Shift Right (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LSRgt.n": "Logical Shift Right (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LSRgt.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "LSRle": "Logical Shift Right (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LSRle.n": "Logical Shift Right (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LSRle.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "LSRal": "Logical Shift Right (Always)",
        "LSRal.n": "Logical Shift Right (T 16bits encoding) (Always)",
        "LSRal.w": "Logical Shift Right (T/A 32bits encoding) (Always)",
        "LSRs": "Logical Shift Right (Update APSR)",
        "LSRs.n": "Logical Shift Right (T 16bits encoding) (Update APSR)",
        "LSRs.w": "Logical Shift Right (T/A 32bits encoding) (Update APSR)",
        "LSRseq": "Logical Shift Right (If APSR.Z == 1 [Equal]) (Update APSR)",
        "LSRseq.n": "Logical Shift Right (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "LSRseq.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "LSRsne": "Logical Shift Right (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "LSRsne.n": "Logical Shift Right (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "LSRsne.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "LSRscs": "Logical Shift Right (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "LSRscs.n": "Logical Shift Right (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "LSRscs.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "LSRscc": "Logical Shift Right (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "LSRscc.n": "Logical Shift Right (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "LSRscc.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "LSRsmi": "Logical Shift Right (If APSR.N == 1 [Minus]) (Update APSR)",
        "LSRsmi.n": "Logical Shift Right (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "LSRsmi.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "LSRspl": "Logical Shift Right (If APSR.N == 0 [Plus]) (Update APSR)",
        "LSRspl.n": "Logical Shift Right (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "LSRspl.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "LSRsvs": "Logical Shift Right (If APSR.V == 1 [Overflow]) (Update APSR)",
        "LSRsvs.n": "Logical Shift Right (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "LSRsvs.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "LSRsvc": "Logical Shift Right (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "LSRsvc.n": "Logical Shift Right (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "LSRsvc.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "LSRshi": "Logical Shift Right (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "LSRshi.n": "Logical Shift Right (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "LSRshi.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "LSRsls": "Logical Shift Right (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "LSRsls.n": "Logical Shift Right (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "LSRsls.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "LSRsge": "Logical Shift Right (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "LSRsge.n": "Logical Shift Right (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "LSRsge.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "LSRslt": "Logical Shift Right (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "LSRslt.n": "Logical Shift Right (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "LSRslt.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "LSRsgt": "Logical Shift Right (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "LSRsgt.n": "Logical Shift Right (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "LSRsgt.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "LSRsle": "Logical Shift Right (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "LSRsle.n": "Logical Shift Right (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "LSRsle.w": "Logical Shift Right (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "LSRsal": "Logical Shift Right (Always) (Update APSR)",
        "LSRsal.n": "Logical Shift Right (T 16bits encoding) (Always) (Update APSR)",
        "LSRsal.w": "Logical Shift Right (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "MCR%{coproc_2}%{c}%{q}": {
      "description": "Move to Coprocessor from ARM core register %{coproc_2} %{q} %{c}",
      "variants": {
        "MCR": "Move to Coprocessor from ARM core register",
        "MCR.n": "Move to Coprocessor from ARM core register (T 16bits encoding)",
        "MCR.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding)",
        "MCReq": "Move to Coprocessor from ARM core register (If APSR.Z == 1 [Equal])",
        "MCReq.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MCReq.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MCRne": "Move to Coprocessor from ARM core register (If APSR.Z == 0 [Not Equal])",
        "MCRne.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MCRne.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MCRcs": "Move to Coprocessor from ARM core register (If APSR.C == 1 [Carry Set])",
        "MCRcs.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MCRcs.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MCRcc": "Move to Coprocessor from ARM core register (If APSR.C == 0 [Carry Clear])",
        "MCRcc.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MCRcc.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MCRmi": "Move to Coprocessor from ARM core register (If APSR.N == 1 [Minus])",
        "MCRmi.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MCRmi.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MCRpl": "Move to Coprocessor from ARM core register (If APSR.N == 0 [Plus])",
        "MCRpl.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MCRpl.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MCRvs": "Move to Coprocessor from ARM core register (If APSR.V == 1 [Overflow])",
        "MCRvs.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MCRvs.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MCRvc": "Move to Coprocessor from ARM core register (If APSR.V == 0 [No Overflow])",
        "MCRvc.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MCRvc.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MCRhi": "Move to Coprocessor from ARM core register (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCRhi.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCRhi.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCRls": "Move to Coprocessor from ARM core register (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCRls.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCRls.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCRge": "Move to Coprocessor from ARM core register (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCRge.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCRge.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCRlt": "Move to Coprocessor from ARM core register (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCRlt.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCRlt.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCRgt": "Move to Coprocessor from ARM core register (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCRgt.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCRgt.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCRle": "Move to Coprocessor from ARM core register (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCRle.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCRle.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCRal": "Move to Coprocessor from ARM core register (Always)",
        "MCRal.n": "Move to Coprocessor from ARM core register (T 16bits encoding) (Always)",
        "MCRal.w": "Move to Coprocessor from ARM core register (T/A 32bits encoding) (Always)",
        "MCR2": "Move to Coprocessor from ARM core register (2nd T/A encoding)",
        "MCR2.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding)",
        "MCR2.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding)",
        "MCR2eq": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.Z == 1 [Equal])",
        "MCR2eq.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MCR2eq.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MCR2ne": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.Z == 0 [Not Equal])",
        "MCR2ne.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MCR2ne.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MCR2cs": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.C == 1 [Carry Set])",
        "MCR2cs.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MCR2cs.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MCR2cc": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.C == 0 [Carry Clear])",
        "MCR2cc.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MCR2cc.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MCR2mi": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.N == 1 [Minus])",
        "MCR2mi.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MCR2mi.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MCR2pl": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.N == 0 [Plus])",
        "MCR2pl.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MCR2pl.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MCR2vs": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.V == 1 [Overflow])",
        "MCR2vs.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MCR2vs.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MCR2vc": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.V == 0 [No Overflow])",
        "MCR2vc.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MCR2vc.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MCR2hi": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCR2hi.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCR2hi.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCR2ls": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCR2ls.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCR2ls.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCR2ge": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCR2ge.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCR2ge.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCR2lt": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCR2lt.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCR2lt.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCR2gt": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCR2gt.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCR2gt.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCR2le": "Move to Coprocessor from ARM core register (2nd T/A encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCR2le.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCR2le.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCR2al": "Move to Coprocessor from ARM core register (2nd T/A encoding) (Always)",
        "MCR2al.n": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T 16bits encoding) (Always)",
        "MCR2al.w": "Move to Coprocessor from ARM core register (2nd T/A encoding) (T/A 32bits encoding) (Always)"
      }
    },
    "MCRR%{coproc_2}%{c}%{q}": {
      "description": "Move to Coprocessor from two ARM core registers %{coproc_2} %{q} %{c}",
      "variants": {
        "MCRR": "Move to Coprocessor from two ARM core registers",
        "MCRR.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding)",
        "MCRR.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding)",
        "MCRReq": "Move to Coprocessor from two ARM core registers (If APSR.Z == 1 [Equal])",
        "MCRReq.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MCRReq.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MCRRne": "Move to Coprocessor from two ARM core registers (If APSR.Z == 0 [Not Equal])",
        "MCRRne.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MCRRne.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MCRRcs": "Move to Coprocessor from two ARM core registers (If APSR.C == 1 [Carry Set])",
        "MCRRcs.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MCRRcs.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MCRRcc": "Move to Coprocessor from two ARM core registers (If APSR.C == 0 [Carry Clear])",
        "MCRRcc.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MCRRcc.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MCRRmi": "Move to Coprocessor from two ARM core registers (If APSR.N == 1 [Minus])",
        "MCRRmi.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MCRRmi.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MCRRpl": "Move to Coprocessor from two ARM core registers (If APSR.N == 0 [Plus])",
        "MCRRpl.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MCRRpl.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MCRRvs": "Move to Coprocessor from two ARM core registers (If APSR.V == 1 [Overflow])",
        "MCRRvs.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MCRRvs.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MCRRvc": "Move to Coprocessor from two ARM core registers (If APSR.V == 0 [No Overflow])",
        "MCRRvc.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MCRRvc.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MCRRhi": "Move to Coprocessor from two ARM core registers (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCRRhi.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCRRhi.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCRRls": "Move to Coprocessor from two ARM core registers (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCRRls.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCRRls.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCRRge": "Move to Coprocessor from two ARM core registers (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCRRge.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCRRge.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCRRlt": "Move to Coprocessor from two ARM core registers (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCRRlt.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCRRlt.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCRRgt": "Move to Coprocessor from two ARM core registers (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCRRgt.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCRRgt.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCRRle": "Move to Coprocessor from two ARM core registers (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCRRle.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCRRle.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCRRal": "Move to Coprocessor from two ARM core registers (Always)",
        "MCRRal.n": "Move to Coprocessor from two ARM core registers (T 16bits encoding) (Always)",
        "MCRRal.w": "Move to Coprocessor from two ARM core registers (T/A 32bits encoding) (Always)",
        "MCRR2": "Move to Coprocessor from two ARM core registers (2nd T/A encoding)",
        "MCRR2.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding)",
        "MCRR2.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding)",
        "MCRR2eq": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.Z == 1 [Equal])",
        "MCRR2eq.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MCRR2eq.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MCRR2ne": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.Z == 0 [Not Equal])",
        "MCRR2ne.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MCRR2ne.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MCRR2cs": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.C == 1 [Carry Set])",
        "MCRR2cs.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MCRR2cs.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MCRR2cc": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.C == 0 [Carry Clear])",
        "MCRR2cc.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MCRR2cc.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MCRR2mi": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.N == 1 [Minus])",
        "MCRR2mi.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MCRR2mi.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MCRR2pl": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.N == 0 [Plus])",
        "MCRR2pl.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MCRR2pl.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MCRR2vs": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.V == 1 [Overflow])",
        "MCRR2vs.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MCRR2vs.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MCRR2vc": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.V == 0 [No Overflow])",
        "MCRR2vc.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MCRR2vc.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MCRR2hi": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCRR2hi.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCRR2hi.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MCRR2ls": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCRR2ls.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCRR2ls.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MCRR2ge": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCRR2ge.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCRR2ge.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MCRR2lt": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCRR2lt.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCRR2lt.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MCRR2gt": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCRR2gt.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCRR2gt.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MCRR2le": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCRR2le.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCRR2le.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MCRR2al": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (Always)",
        "MCRR2al.n": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T 16bits encoding) (Always)",
        "MCRR2al.w": "Move to Coprocessor from two ARM core registers (2nd T/A encoding) (T/A 32bits encoding) (Always)"
      }
    },
    "MLA%{s}%{c}%{q}": {
      "description": "Multiply Accumulate %{q} %{c} %{s}",
      "variants": {
        "MLA": "Multiply Accumulate",
        "MLA.n": "Multiply Accumulate (T 16bits encoding)",
        "MLA.w": "Multiply Accumulate (T/A 32bits encoding)",
        "MLAeq": "Multiply Accumulate (If APSR.Z == 1 [Equal])",
        "MLAeq.n": "Multiply Accumulate (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MLAeq.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MLAne": "Multiply Accumulate (If APSR.Z == 0 [Not Equal])",
        "MLAne.n": "Multiply Accumulate (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MLAne.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MLAcs": "Multiply Accumulate (If APSR.C == 1 [Carry Set])",
        "MLAcs.n": "Multiply Accumulate (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MLAcs.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MLAcc": "Multiply Accumulate (If APSR.C == 0 [Carry Clear])",
        "MLAcc.n": "Multiply Accumulate (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MLAcc.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MLAmi": "Multiply Accumulate (If APSR.N == 1 [Minus])",
        "MLAmi.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MLAmi.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MLApl": "Multiply Accumulate (If APSR.N == 0 [Plus])",
        "MLApl.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MLApl.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MLAvs": "Multiply Accumulate (If APSR.V == 1 [Overflow])",
        "MLAvs.n": "Multiply Accumulate (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MLAvs.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MLAvc": "Multiply Accumulate (If APSR.V == 0 [No Overflow])",
        "MLAvc.n": "Multiply Accumulate (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MLAvc.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MLAhi": "Multiply Accumulate (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MLAhi.n": "Multiply Accumulate (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MLAhi.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MLAls": "Multiply Accumulate (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MLAls.n": "Multiply Accumulate (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MLAls.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MLAge": "Multiply Accumulate (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MLAge.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MLAge.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MLAlt": "Multiply Accumulate (If APSR.N != APSR.V [Signed Lesser Than])",
        "MLAlt.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MLAlt.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MLAgt": "Multiply Accumulate (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MLAgt.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MLAgt.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MLAle": "Multiply Accumulate (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MLAle.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MLAle.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MLAal": "Multiply Accumulate (Always)",
        "MLAal.n": "Multiply Accumulate (T 16bits encoding) (Always)",
        "MLAal.w": "Multiply Accumulate (T/A 32bits encoding) (Always)",
        "MLAs": "Multiply Accumulate (Update APSR)",
        "MLAs.n": "Multiply Accumulate (T 16bits encoding) (Update APSR)",
        "MLAs.w": "Multiply Accumulate (T/A 32bits encoding) (Update APSR)",
        "MLAseq": "Multiply Accumulate (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MLAseq.n": "Multiply Accumulate (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MLAseq.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MLAsne": "Multiply Accumulate (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MLAsne.n": "Multiply Accumulate (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MLAsne.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MLAscs": "Multiply Accumulate (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MLAscs.n": "Multiply Accumulate (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MLAscs.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MLAscc": "Multiply Accumulate (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MLAscc.n": "Multiply Accumulate (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MLAscc.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MLAsmi": "Multiply Accumulate (If APSR.N == 1 [Minus]) (Update APSR)",
        "MLAsmi.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "MLAsmi.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "MLAspl": "Multiply Accumulate (If APSR.N == 0 [Plus]) (Update APSR)",
        "MLAspl.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "MLAspl.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "MLAsvs": "Multiply Accumulate (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MLAsvs.n": "Multiply Accumulate (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MLAsvs.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MLAsvc": "Multiply Accumulate (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MLAsvc.n": "Multiply Accumulate (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MLAsvc.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MLAshi": "Multiply Accumulate (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MLAshi.n": "Multiply Accumulate (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MLAshi.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MLAsls": "Multiply Accumulate (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MLAsls.n": "Multiply Accumulate (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MLAsls.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MLAsge": "Multiply Accumulate (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MLAsge.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MLAsge.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MLAslt": "Multiply Accumulate (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MLAslt.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MLAslt.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MLAsgt": "Multiply Accumulate (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MLAsgt.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MLAsgt.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MLAsle": "Multiply Accumulate (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MLAsle.n": "Multiply Accumulate (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MLAsle.w": "Multiply Accumulate (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MLAsal": "Multiply Accumulate (Always) (Update APSR)",
        "MLAsal.n": "Multiply Accumulate (T 16bits encoding) (Always) (Update APSR)",
        "MLAsal.w": "Multiply Accumulate (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "MLS%{c}%{q}": {
      "description": "Multiply and Subtract %{q} %{c}",
      "variants": {
        "MLS": "Multiply and Subtract",
        "MLS.n": "Multiply and Subtract (T 16bits encoding)",
        "MLS.w": "Multiply and Subtract (T/A 32bits encoding)",
        "MLSeq": "Multiply and Subtract (If APSR.Z == 1 [Equal])",
        "MLSeq.n": "Multiply and Subtract (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MLSeq.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MLSne": "Multiply and Subtract (If APSR.Z == 0 [Not Equal])",
        "MLSne.n": "Multiply and Subtract (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MLSne.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MLScs": "Multiply and Subtract (If APSR.C == 1 [Carry Set])",
        "MLScs.n": "Multiply and Subtract (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MLScs.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MLScc": "Multiply and Subtract (If APSR.C == 0 [Carry Clear])",
        "MLScc.n": "Multiply and Subtract (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MLScc.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MLSmi": "Multiply and Subtract (If APSR.N == 1 [Minus])",
        "MLSmi.n": "Multiply and Subtract (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MLSmi.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MLSpl": "Multiply and Subtract (If APSR.N == 0 [Plus])",
        "MLSpl.n": "Multiply and Subtract (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MLSpl.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MLSvs": "Multiply and Subtract (If APSR.V == 1 [Overflow])",
        "MLSvs.n": "Multiply and Subtract (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MLSvs.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MLSvc": "Multiply and Subtract (If APSR.V == 0 [No Overflow])",
        "MLSvc.n": "Multiply and Subtract (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MLSvc.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MLShi": "Multiply and Subtract (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MLShi.n": "Multiply and Subtract (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MLShi.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MLSls": "Multiply and Subtract (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MLSls.n": "Multiply and Subtract (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MLSls.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MLSge": "Multiply and Subtract (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MLSge.n": "Multiply and Subtract (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MLSge.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MLSlt": "Multiply and Subtract (If APSR.N != APSR.V [Signed Lesser Than])",
        "MLSlt.n": "Multiply and Subtract (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MLSlt.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MLSgt": "Multiply and Subtract (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MLSgt.n": "Multiply and Subtract (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MLSgt.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MLSle": "Multiply and Subtract (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MLSle.n": "Multiply and Subtract (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MLSle.w": "Multiply and Subtract (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MLSal": "Multiply and Subtract (Always)",
        "MLSal.n": "Multiply and Subtract (T 16bits encoding) (Always)",
        "MLSal.w": "Multiply and Subtract (T/A 32bits encoding) (Always)"
      }
    },
    "MOV%{s}%{c}%{q}": {
      "description": "Move %{q} %{c} %{s}",
      "variants": {
        "MOV": "Move",
        "MOV.n": "Move (T 16bits encoding)",
        "MOV.w": "Move (T/A 32bits encoding)",
        "MOVeq": "Move (If APSR.Z == 1 [Equal])",
        "MOVeq.n": "Move (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MOVeq.w": "Move (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MOVne": "Move (If APSR.Z == 0 [Not Equal])",
        "MOVne.n": "Move (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MOVne.w": "Move (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MOVcs": "Move (If APSR.C == 1 [Carry Set])",
        "MOVcs.n": "Move (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MOVcs.w": "Move (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MOVcc": "Move (If APSR.C == 0 [Carry Clear])",
        "MOVcc.n": "Move (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MOVcc.w": "Move (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MOVmi": "Move (If APSR.N == 1 [Minus])",
        "MOVmi.n": "Move (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MOVmi.w": "Move (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MOVpl": "Move (If APSR.N == 0 [Plus])",
        "MOVpl.n": "Move (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MOVpl.w": "Move (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MOVvs": "Move (If APSR.V == 1 [Overflow])",
        "MOVvs.n": "Move (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MOVvs.w": "Move (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MOVvc": "Move (If APSR.V == 0 [No Overflow])",
        "MOVvc.n": "Move (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MOVvc.w": "Move (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MOVhi": "Move (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MOVhi.n": "Move (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MOVhi.w": "Move (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MOVls": "Move (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MOVls.n": "Move (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MOVls.w": "Move (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MOVge": "Move (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MOVge.n": "Move (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MOVge.w": "Move (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MOVlt": "Move (If APSR.N != APSR.V [Signed Lesser Than])",
        "MOVlt.n": "Move (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MOVlt.w": "Move (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MOVgt": "Move (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MOVgt.n": "Move (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MOVgt.w": "Move (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MOVle": "Move (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MOVle.n": "Move (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MOVle.w": "Move (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MOVal": "Move (Always)",
        "MOVal.n": "Move (T 16bits encoding) (Always)",
        "MOVal.w": "Move (T/A 32bits encoding) (Always)",
        "MOVs": "Move (Update APSR)",
        "MOVs.n": "Move (T 16bits encoding) (Update APSR)",
        "MOVs.w": "Move (T/A 32bits encoding) (Update APSR)",
        "MOVseq": "Move (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MOVseq.n": "Move (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MOVseq.w": "Move (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MOVsne": "Move (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MOVsne.n": "Move (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MOVsne.w": "Move (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MOVscs": "Move (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MOVscs.n": "Move (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MOVscs.w": "Move (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MOVscc": "Move (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MOVscc.n": "Move (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MOVscc.w": "Move (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MOVsmi": "Move (If APSR.N == 1 [Minus]) (Update APSR)",
        "MOVsmi.n": "Move (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "MOVsmi.w": "Move (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "MOVspl": "Move (If APSR.N == 0 [Plus]) (Update APSR)",
        "MOVspl.n": "Move (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "MOVspl.w": "Move (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "MOVsvs": "Move (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MOVsvs.n": "Move (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MOVsvs.w": "Move (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MOVsvc": "Move (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MOVsvc.n": "Move (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MOVsvc.w": "Move (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MOVshi": "Move (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MOVshi.n": "Move (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MOVshi.w": "Move (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MOVsls": "Move (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MOVsls.n": "Move (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MOVsls.w": "Move (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MOVsge": "Move (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MOVsge.n": "Move (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MOVsge.w": "Move (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MOVslt": "Move (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MOVslt.n": "Move (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MOVslt.w": "Move (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MOVsgt": "Move (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MOVsgt.n": "Move (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MOVsgt.w": "Move (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MOVsle": "Move (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MOVsle.n": "Move (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MOVsle.w": "Move (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MOVsal": "Move (Always) (Update APSR)",
        "MOVsal.n": "Move (T 16bits encoding) (Always) (Update APSR)",
        "MOVsal.w": "Move (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "MOVT%{c}%{q}": {
      "description": "Move Top %{q} %{c}",
      "variants": {
        "MOVT": "Move Top",
        "MOVT.n": "Move Top (T 16bits encoding)",
        "MOVT.w": "Move Top (T/A 32bits encoding)",
        "MOVTeq": "Move Top (If APSR.Z == 1 [Equal])",
        "MOVTeq.n": "Move Top (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MOVTeq.w": "Move Top (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MOVTne": "Move Top (If APSR.Z == 0 [Not Equal])",
        "MOVTne.n": "Move Top (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MOVTne.w": "Move Top (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MOVTcs": "Move Top (If APSR.C == 1 [Carry Set])",
        "MOVTcs.n": "Move Top (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MOVTcs.w": "Move Top (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MOVTcc": "Move Top (If APSR.C == 0 [Carry Clear])",
        "MOVTcc.n": "Move Top (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MOVTcc.w": "Move Top (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MOVTmi": "Move Top (If APSR.N == 1 [Minus])",
        "MOVTmi.n": "Move Top (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MOVTmi.w": "Move Top (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MOVTpl": "Move Top (If APSR.N == 0 [Plus])",
        "MOVTpl.n": "Move Top (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MOVTpl.w": "Move Top (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MOVTvs": "Move Top (If APSR.V == 1 [Overflow])",
        "MOVTvs.n": "Move Top (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MOVTvs.w": "Move Top (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MOVTvc": "Move Top (If APSR.V == 0 [No Overflow])",
        "MOVTvc.n": "Move Top (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MOVTvc.w": "Move Top (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MOVThi": "Move Top (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MOVThi.n": "Move Top (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MOVThi.w": "Move Top (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MOVTls": "Move Top (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MOVTls.n": "Move Top (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MOVTls.w": "Move Top (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MOVTge": "Move Top (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MOVTge.n": "Move Top (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MOVTge.w": "Move Top (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MOVTlt": "Move Top (If APSR.N != APSR.V [Signed Lesser Than])",
        "MOVTlt.n": "Move Top (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MOVTlt.w": "Move Top (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MOVTgt": "Move Top (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MOVTgt.n": "Move Top (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MOVTgt.w": "Move Top (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MOVTle": "Move Top (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MOVTle.n": "Move Top (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MOVTle.w": "Move Top (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MOVTal": "Move Top (Always)",
        "MOVTal.n": "Move Top (T 16bits encoding) (Always)",
        "MOVTal.w": "Move Top (T/A 32bits encoding) (Always)"
      }
    },
    "MRC%{coproc_2}%{c}%{q}": {
      "description": "Move to ARM core register from Coprocessor %{coproc_2} %{q} %{c}",
      "variants": {
        "MRC": "Move to ARM core register from Coprocessor",
        "MRC.n": "Move to ARM core register from Coprocessor (T 16bits encoding)",
        "MRC.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding)",
        "MRCeq": "Move to ARM core register from Coprocessor (If APSR.Z == 1 [Equal])",
        "MRCeq.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MRCeq.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MRCne": "Move to ARM core register from Coprocessor (If APSR.Z == 0 [Not Equal])",
        "MRCne.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MRCne.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MRCcs": "Move to ARM core register from Coprocessor (If APSR.C == 1 [Carry Set])",
        "MRCcs.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MRCcs.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MRCcc": "Move to ARM core register from Coprocessor (If APSR.C == 0 [Carry Clear])",
        "MRCcc.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MRCcc.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MRCmi": "Move to ARM core register from Coprocessor (If APSR.N == 1 [Minus])",
        "MRCmi.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MRCmi.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MRCpl": "Move to ARM core register from Coprocessor (If APSR.N == 0 [Plus])",
        "MRCpl.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MRCpl.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MRCvs": "Move to ARM core register from Coprocessor (If APSR.V == 1 [Overflow])",
        "MRCvs.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MRCvs.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MRCvc": "Move to ARM core register from Coprocessor (If APSR.V == 0 [No Overflow])",
        "MRCvc.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MRCvc.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MRChi": "Move to ARM core register from Coprocessor (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRChi.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRChi.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRCls": "Move to ARM core register from Coprocessor (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRCls.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRCls.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRCge": "Move to ARM core register from Coprocessor (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRCge.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRCge.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRClt": "Move to ARM core register from Coprocessor (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRClt.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRClt.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRCgt": "Move to ARM core register from Coprocessor (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRCgt.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRCgt.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRCle": "Move to ARM core register from Coprocessor (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRCle.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRCle.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRCal": "Move to ARM core register from Coprocessor (Always)",
        "MRCal.n": "Move to ARM core register from Coprocessor (T 16bits encoding) (Always)",
        "MRCal.w": "Move to ARM core register from Coprocessor (T/A 32bits encoding) (Always)",
        "MRC2": "Move to ARM core register from Coprocessor (2nd T/A encoding)",
        "MRC2.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding)",
        "MRC2.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding)",
        "MRC2eq": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.Z == 1 [Equal])",
        "MRC2eq.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MRC2eq.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MRC2ne": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.Z == 0 [Not Equal])",
        "MRC2ne.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MRC2ne.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MRC2cs": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.C == 1 [Carry Set])",
        "MRC2cs.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MRC2cs.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MRC2cc": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.C == 0 [Carry Clear])",
        "MRC2cc.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MRC2cc.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MRC2mi": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.N == 1 [Minus])",
        "MRC2mi.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MRC2mi.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MRC2pl": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.N == 0 [Plus])",
        "MRC2pl.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MRC2pl.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MRC2vs": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.V == 1 [Overflow])",
        "MRC2vs.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MRC2vs.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MRC2vc": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.V == 0 [No Overflow])",
        "MRC2vc.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MRC2vc.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MRC2hi": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRC2hi.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRC2hi.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRC2ls": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRC2ls.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRC2ls.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRC2ge": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRC2ge.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRC2ge.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRC2lt": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRC2lt.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRC2lt.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRC2gt": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRC2gt.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRC2gt.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRC2le": "Move to ARM core register from Coprocessor (2nd T/A encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRC2le.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRC2le.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRC2al": "Move to ARM core register from Coprocessor (2nd T/A encoding) (Always)",
        "MRC2al.n": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T 16bits encoding) (Always)",
        "MRC2al.w": "Move to ARM core register from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (Always)"
      }
    },
    "MRRC%{coproc_2}%{c}%{q}": {
      "description": "Move to two ARM core registers from Coprocessor %{coproc_2} %{q} %{c}",
      "variants": {
        "MRRC": "Move to two ARM core registers from Coprocessor",
        "MRRC.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding)",
        "MRRC.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding)",
        "MRRCeq": "Move to two ARM core registers from Coprocessor (If APSR.Z == 1 [Equal])",
        "MRRCeq.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MRRCeq.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MRRCne": "Move to two ARM core registers from Coprocessor (If APSR.Z == 0 [Not Equal])",
        "MRRCne.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MRRCne.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MRRCcs": "Move to two ARM core registers from Coprocessor (If APSR.C == 1 [Carry Set])",
        "MRRCcs.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MRRCcs.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MRRCcc": "Move to two ARM core registers from Coprocessor (If APSR.C == 0 [Carry Clear])",
        "MRRCcc.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MRRCcc.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MRRCmi": "Move to two ARM core registers from Coprocessor (If APSR.N == 1 [Minus])",
        "MRRCmi.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MRRCmi.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MRRCpl": "Move to two ARM core registers from Coprocessor (If APSR.N == 0 [Plus])",
        "MRRCpl.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MRRCpl.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MRRCvs": "Move to two ARM core registers from Coprocessor (If APSR.V == 1 [Overflow])",
        "MRRCvs.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MRRCvs.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MRRCvc": "Move to two ARM core registers from Coprocessor (If APSR.V == 0 [No Overflow])",
        "MRRCvc.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MRRCvc.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MRRChi": "Move to two ARM core registers from Coprocessor (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRRChi.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRRChi.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRRCls": "Move to two ARM core registers from Coprocessor (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRRCls.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRRCls.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRRCge": "Move to two ARM core registers from Coprocessor (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRRCge.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRRCge.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRRClt": "Move to two ARM core registers from Coprocessor (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRRClt.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRRClt.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRRCgt": "Move to two ARM core registers from Coprocessor (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRRCgt.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRRCgt.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRRCle": "Move to two ARM core registers from Coprocessor (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRRCle.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRRCle.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRRCal": "Move to two ARM core registers from Coprocessor (Always)",
        "MRRCal.n": "Move to two ARM core registers from Coprocessor (T 16bits encoding) (Always)",
        "MRRCal.w": "Move to two ARM core registers from Coprocessor (T/A 32bits encoding) (Always)",
        "MRRC2": "Move to two ARM core registers from Coprocessor (2nd T/A encoding)",
        "MRRC2.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding)",
        "MRRC2.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding)",
        "MRRC2eq": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.Z == 1 [Equal])",
        "MRRC2eq.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MRRC2eq.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MRRC2ne": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.Z == 0 [Not Equal])",
        "MRRC2ne.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MRRC2ne.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MRRC2cs": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.C == 1 [Carry Set])",
        "MRRC2cs.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MRRC2cs.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MRRC2cc": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.C == 0 [Carry Clear])",
        "MRRC2cc.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MRRC2cc.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MRRC2mi": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.N == 1 [Minus])",
        "MRRC2mi.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MRRC2mi.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MRRC2pl": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.N == 0 [Plus])",
        "MRRC2pl.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MRRC2pl.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MRRC2vs": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.V == 1 [Overflow])",
        "MRRC2vs.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MRRC2vs.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MRRC2vc": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.V == 0 [No Overflow])",
        "MRRC2vc.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MRRC2vc.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MRRC2hi": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRRC2hi.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRRC2hi.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRRC2ls": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRRC2ls.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRRC2ls.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRRC2ge": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRRC2ge.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRRC2ge.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRRC2lt": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRRC2lt.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRRC2lt.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRRC2gt": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRRC2gt.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRRC2gt.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRRC2le": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRRC2le.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRRC2le.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRRC2al": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (Always)",
        "MRRC2al.n": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T 16bits encoding) (Always)",
        "MRRC2al.w": "Move to two ARM core registers from Coprocessor (2nd T/A encoding) (T/A 32bits encoding) (Always)"
      }
    },
    "MRS%{c}%{q}": {
      "description": "Move to Register from Special register %{q} %{c}",
      "variants": {
        "MRS": "Move to Register from Special register",
        "MRS.n": "Move to Register from Special register (T 16bits encoding)",
        "MRS.w": "Move to Register from Special register (T/A 32bits encoding)",
        "MRSeq": "Move to Register from Special register (If APSR.Z == 1 [Equal])",
        "MRSeq.n": "Move to Register from Special register (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MRSeq.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MRSne": "Move to Register from Special register (If APSR.Z == 0 [Not Equal])",
        "MRSne.n": "Move to Register from Special register (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MRSne.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MRScs": "Move to Register from Special register (If APSR.C == 1 [Carry Set])",
        "MRScs.n": "Move to Register from Special register (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MRScs.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MRScc": "Move to Register from Special register (If APSR.C == 0 [Carry Clear])",
        "MRScc.n": "Move to Register from Special register (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MRScc.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MRSmi": "Move to Register from Special register (If APSR.N == 1 [Minus])",
        "MRSmi.n": "Move to Register from Special register (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MRSmi.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MRSpl": "Move to Register from Special register (If APSR.N == 0 [Plus])",
        "MRSpl.n": "Move to Register from Special register (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MRSpl.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MRSvs": "Move to Register from Special register (If APSR.V == 1 [Overflow])",
        "MRSvs.n": "Move to Register from Special register (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MRSvs.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MRSvc": "Move to Register from Special register (If APSR.V == 0 [No Overflow])",
        "MRSvc.n": "Move to Register from Special register (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MRSvc.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MRShi": "Move to Register from Special register (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRShi.n": "Move to Register from Special register (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRShi.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MRSls": "Move to Register from Special register (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRSls.n": "Move to Register from Special register (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRSls.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MRSge": "Move to Register from Special register (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRSge.n": "Move to Register from Special register (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRSge.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MRSlt": "Move to Register from Special register (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRSlt.n": "Move to Register from Special register (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRSlt.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MRSgt": "Move to Register from Special register (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRSgt.n": "Move to Register from Special register (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRSgt.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MRSle": "Move to Register from Special register (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRSle.n": "Move to Register from Special register (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRSle.w": "Move to Register from Special register (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MRSal": "Move to Register from Special register (Always)",
        "MRSal.n": "Move to Register from Special register (T 16bits encoding) (Always)",
        "MRSal.w": "Move to Register from Special register (T/A 32bits encoding) (Always)"
      }
    },
    "MSR%{c}%{q}": {
      "description": "Move to Special register from ARM core register %{q} %{c}",
      "variants": {
        "MSR": "Move to Special register from ARM core register",
        "MSR.n": "Move to Special register from ARM core register (T 16bits encoding)",
        "MSR.w": "Move to Special register from ARM core register (T/A 32bits encoding)",
        "MSReq": "Move to Special register from ARM core register (If APSR.Z == 1 [Equal])",
        "MSReq.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MSReq.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MSRne": "Move to Special register from ARM core register (If APSR.Z == 0 [Not Equal])",
        "MSRne.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MSRne.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MSRcs": "Move to Special register from ARM core register (If APSR.C == 1 [Carry Set])",
        "MSRcs.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MSRcs.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MSRcc": "Move to Special register from ARM core register (If APSR.C == 0 [Carry Clear])",
        "MSRcc.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MSRcc.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MSRmi": "Move to Special register from ARM core register (If APSR.N == 1 [Minus])",
        "MSRmi.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MSRmi.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MSRpl": "Move to Special register from ARM core register (If APSR.N == 0 [Plus])",
        "MSRpl.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MSRpl.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MSRvs": "Move to Special register from ARM core register (If APSR.V == 1 [Overflow])",
        "MSRvs.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MSRvs.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MSRvc": "Move to Special register from ARM core register (If APSR.V == 0 [No Overflow])",
        "MSRvc.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MSRvc.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MSRhi": "Move to Special register from ARM core register (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MSRhi.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MSRhi.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MSRls": "Move to Special register from ARM core register (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MSRls.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MSRls.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MSRge": "Move to Special register from ARM core register (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MSRge.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MSRge.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MSRlt": "Move to Special register from ARM core register (If APSR.N != APSR.V [Signed Lesser Than])",
        "MSRlt.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MSRlt.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MSRgt": "Move to Special register from ARM core register (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MSRgt.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MSRgt.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MSRle": "Move to Special register from ARM core register (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MSRle.n": "Move to Special register from ARM core register (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MSRle.w": "Move to Special register from ARM core register (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MSRal": "Move to Special register from ARM core register (Always)",
        "MSRal.n": "Move to Special register from ARM core register (T 16bits encoding) (Always)",
        "MSRal.w": "Move to Special register from ARM core register (T/A 32bits encoding) (Always)"
      }
    },
    "MUL%{s}%{c}%{q}": {
      "description": "Multiply %{q} %{c} %{s}",
      "variants": {
        "MUL": "Multiply",
        "MUL.n": "Multiply (T 16bits encoding)",
        "MUL.w": "Multiply (T/A 32bits encoding)",
        "MULeq": "Multiply (If APSR.Z == 1 [Equal])",
        "MULeq.n": "Multiply (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MULeq.w": "Multiply (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MULne": "Multiply (If APSR.Z == 0 [Not Equal])",
        "MULne.n": "Multiply (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MULne.w": "Multiply (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MULcs": "Multiply (If APSR.C == 1 [Carry Set])",
        "MULcs.n": "Multiply (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MULcs.w": "Multiply (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MULcc": "Multiply (If APSR.C == 0 [Carry Clear])",
        "MULcc.n": "Multiply (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MULcc.w": "Multiply (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MULmi": "Multiply (If APSR.N == 1 [Minus])",
        "MULmi.n": "Multiply (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MULmi.w": "Multiply (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MULpl": "Multiply (If APSR.N == 0 [Plus])",
        "MULpl.n": "Multiply (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MULpl.w": "Multiply (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MULvs": "Multiply (If APSR.V == 1 [Overflow])",
        "MULvs.n": "Multiply (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MULvs.w": "Multiply (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MULvc": "Multiply (If APSR.V == 0 [No Overflow])",
        "MULvc.n": "Multiply (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MULvc.w": "Multiply (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MULhi": "Multiply (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MULhi.n": "Multiply (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MULhi.w": "Multiply (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MULls": "Multiply (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MULls.n": "Multiply (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MULls.w": "Multiply (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MULge": "Multiply (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MULge.n": "Multiply (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MULge.w": "Multiply (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MULlt": "Multiply (If APSR.N != APSR.V [Signed Lesser Than])",
        "MULlt.n": "Multiply (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MULlt.w": "Multiply (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MULgt": "Multiply (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MULgt.n": "Multiply (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MULgt.w": "Multiply (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MULle": "Multiply (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MULle.n": "Multiply (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MULle.w": "Multiply (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MULal": "Multiply (Always)",
        "MULal.n": "Multiply (T 16bits encoding) (Always)",
        "MULal.w": "Multiply (T/A 32bits encoding) (Always)",
        "MULs": "Multiply (Update APSR)",
        "MULs.n": "Multiply (T 16bits encoding) (Update APSR)",
        "MULs.w": "Multiply (T/A 32bits encoding) (Update APSR)",
        "MULseq": "Multiply (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MULseq.n": "Multiply (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MULseq.w": "Multiply (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MULsne": "Multiply (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MULsne.n": "Multiply (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MULsne.w": "Multiply (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MULscs": "Multiply (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MULscs.n": "Multiply (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MULscs.w": "Multiply (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MULscc": "Multiply (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MULscc.n": "Multiply (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MULscc.w": "Multiply (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MULsmi": "Multiply (If APSR.N == 1 [Minus]) (Update APSR)",
        "MULsmi.n": "Multiply (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "MULsmi.w": "Multiply (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "MULspl": "Multiply (If APSR.N == 0 [Plus]) (Update APSR)",
        "MULspl.n": "Multiply (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "MULspl.w": "Multiply (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "MULsvs": "Multiply (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MULsvs.n": "Multiply (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MULsvs.w": "Multiply (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MULsvc": "Multiply (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MULsvc.n": "Multiply (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MULsvc.w": "Multiply (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MULshi": "Multiply (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MULshi.n": "Multiply (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MULshi.w": "Multiply (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MULsls": "Multiply (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MULsls.n": "Multiply (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MULsls.w": "Multiply (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MULsge": "Multiply (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MULsge.n": "Multiply (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MULsge.w": "Multiply (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MULslt": "Multiply (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MULslt.n": "Multiply (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MULslt.w": "Multiply (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MULsgt": "Multiply (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MULsgt.n": "Multiply (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MULsgt.w": "Multiply (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MULsle": "Multiply (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MULsle.n": "Multiply (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MULsle.w": "Multiply (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MULsal": "Multiply (Always) (Update APSR)",
        "MULsal.n": "Multiply (T 16bits encoding) (Always) (Update APSR)",
        "MULsal.w": "Multiply (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "MVN%{s}%{c}%{q}": {
      "description": "Bitwise NOT %{q} %{c} %{s}",
      "variants": {
        "MVN": "Bitwise NOT",
        "MVN.n": "Bitwise NOT (T 16bits encoding)",
        "MVN.w": "Bitwise NOT (T/A 32bits encoding)",
        "MVNeq": "Bitwise NOT (If APSR.Z == 1 [Equal])",
        "MVNeq.n": "Bitwise NOT (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "MVNeq.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "MVNne": "Bitwise NOT (If APSR.Z == 0 [Not Equal])",
        "MVNne.n": "Bitwise NOT (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MVNne.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "MVNcs": "Bitwise NOT (If APSR.C == 1 [Carry Set])",
        "MVNcs.n": "Bitwise NOT (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "MVNcs.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "MVNcc": "Bitwise NOT (If APSR.C == 0 [Carry Clear])",
        "MVNcc.n": "Bitwise NOT (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MVNcc.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "MVNmi": "Bitwise NOT (If APSR.N == 1 [Minus])",
        "MVNmi.n": "Bitwise NOT (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "MVNmi.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "MVNpl": "Bitwise NOT (If APSR.N == 0 [Plus])",
        "MVNpl.n": "Bitwise NOT (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "MVNpl.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "MVNvs": "Bitwise NOT (If APSR.V == 1 [Overflow])",
        "MVNvs.n": "Bitwise NOT (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "MVNvs.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "MVNvc": "Bitwise NOT (If APSR.V == 0 [No Overflow])",
        "MVNvc.n": "Bitwise NOT (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "MVNvc.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "MVNhi": "Bitwise NOT (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MVNhi.n": "Bitwise NOT (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MVNhi.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "MVNls": "Bitwise NOT (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MVNls.n": "Bitwise NOT (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MVNls.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "MVNge": "Bitwise NOT (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MVNge.n": "Bitwise NOT (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MVNge.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "MVNlt": "Bitwise NOT (If APSR.N != APSR.V [Signed Lesser Than])",
        "MVNlt.n": "Bitwise NOT (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MVNlt.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "MVNgt": "Bitwise NOT (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MVNgt.n": "Bitwise NOT (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MVNgt.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "MVNle": "Bitwise NOT (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MVNle.n": "Bitwise NOT (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MVNle.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "MVNal": "Bitwise NOT (Always)",
        "MVNal.n": "Bitwise NOT (T 16bits encoding) (Always)",
        "MVNal.w": "Bitwise NOT (T/A 32bits encoding) (Always)",
        "MVNs": "Bitwise NOT (Update APSR)",
        "MVNs.n": "Bitwise NOT (T 16bits encoding) (Update APSR)",
        "MVNs.w": "Bitwise NOT (T/A 32bits encoding) (Update APSR)",
        "MVNseq": "Bitwise NOT (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MVNseq.n": "Bitwise NOT (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MVNseq.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "MVNsne": "Bitwise NOT (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MVNsne.n": "Bitwise NOT (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MVNsne.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "MVNscs": "Bitwise NOT (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MVNscs.n": "Bitwise NOT (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MVNscs.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "MVNscc": "Bitwise NOT (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MVNscc.n": "Bitwise NOT (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MVNscc.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "MVNsmi": "Bitwise NOT (If APSR.N == 1 [Minus]) (Update APSR)",
        "MVNsmi.n": "Bitwise NOT (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "MVNsmi.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "MVNspl": "Bitwise NOT (If APSR.N == 0 [Plus]) (Update APSR)",
        "MVNspl.n": "Bitwise NOT (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "MVNspl.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "MVNsvs": "Bitwise NOT (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MVNsvs.n": "Bitwise NOT (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MVNsvs.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "MVNsvc": "Bitwise NOT (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MVNsvc.n": "Bitwise NOT (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MVNsvc.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "MVNshi": "Bitwise NOT (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MVNshi.n": "Bitwise NOT (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MVNshi.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "MVNsls": "Bitwise NOT (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MVNsls.n": "Bitwise NOT (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MVNsls.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "MVNsge": "Bitwise NOT (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MVNsge.n": "Bitwise NOT (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MVNsge.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "MVNslt": "Bitwise NOT (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MVNslt.n": "Bitwise NOT (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MVNslt.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "MVNsgt": "Bitwise NOT (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MVNsgt.n": "Bitwise NOT (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MVNsgt.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "MVNsle": "Bitwise NOT (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MVNsle.n": "Bitwise NOT (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MVNsle.w": "Bitwise NOT (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "MVNsal": "Bitwise NOT (Always) (Update APSR)",
        "MVNsal.n": "Bitwise NOT (T 16bits encoding) (Always) (Update APSR)",
        "MVNsal.w": "Bitwise NOT (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "NEG%{c}%{q}": {
      "description": "Pre-UAL equivalent to RSB (Right Shift Byte) %{q} %{c}",
      "variants": {
        "NEG": "Pre-UAL equivalent to RSB (Right Shift Byte)",
        "NEG.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding)",
        "NEG.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding)",
        "NEGeq": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.Z == 1 [Equal])",
        "NEGeq.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "NEGeq.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "NEGne": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.Z == 0 [Not Equal])",
        "NEGne.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "NEGne.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "NEGcs": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.C == 1 [Carry Set])",
        "NEGcs.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "NEGcs.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "NEGcc": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.C == 0 [Carry Clear])",
        "NEGcc.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "NEGcc.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "NEGmi": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.N == 1 [Minus])",
        "NEGmi.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "NEGmi.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "NEGpl": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.N == 0 [Plus])",
        "NEGpl.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "NEGpl.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "NEGvs": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.V == 1 [Overflow])",
        "NEGvs.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "NEGvs.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "NEGvc": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.V == 0 [No Overflow])",
        "NEGvc.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "NEGvc.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "NEGhi": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "NEGhi.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "NEGhi.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "NEGls": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "NEGls.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "NEGls.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "NEGge": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "NEGge.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "NEGge.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "NEGlt": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.N != APSR.V [Signed Lesser Than])",
        "NEGlt.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "NEGlt.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "NEGgt": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "NEGgt.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "NEGgt.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "NEGle": "Pre-UAL equivalent to RSB (Right Shift Byte) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "NEGle.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "NEGle.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "NEGal": "Pre-UAL equivalent to RSB (Right Shift Byte) (Always)",
        "NEGal.n": "Pre-UAL equivalent to RSB (Right Shift Byte) (T 16bits encoding) (Always)",
        "NEGal.w": "Pre-UAL equivalent to RSB (Right Shift Byte) (T/A 32bits encoding) (Always)"
      }
    },
    "NOP%{c}%{q}": {
      "description": "No Operation %{q} %{c}",
      "variants": {
        "NOP": "No Operation",
        "NOP.n": "No Operation (T 16bits encoding)",
        "NOP.w": "No Operation (T/A 32bits encoding)",
        "NOPeq": "No Operation (If APSR.Z == 1 [Equal])",
        "NOPeq.n": "No Operation (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "NOPeq.w": "No Operation (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "NOPne": "No Operation (If APSR.Z == 0 [Not Equal])",
        "NOPne.n": "No Operation (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "NOPne.w": "No Operation (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "NOPcs": "No Operation (If APSR.C == 1 [Carry Set])",
        "NOPcs.n": "No Operation (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "NOPcs.w": "No Operation (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "NOPcc": "No Operation (If APSR.C == 0 [Carry Clear])",
        "NOPcc.n": "No Operation (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "NOPcc.w": "No Operation (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "NOPmi": "No Operation (If APSR.N == 1 [Minus])",
        "NOPmi.n": "No Operation (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "NOPmi.w": "No Operation (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "NOPpl": "No Operation (If APSR.N == 0 [Plus])",
        "NOPpl.n": "No Operation (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "NOPpl.w": "No Operation (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "NOPvs": "No Operation (If APSR.V == 1 [Overflow])",
        "NOPvs.n": "No Operation (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "NOPvs.w": "No Operation (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "NOPvc": "No Operation (If APSR.V == 0 [No Overflow])",
        "NOPvc.n": "No Operation (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "NOPvc.w": "No Operation (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "NOPhi": "No Operation (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "NOPhi.n": "No Operation (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "NOPhi.w": "No Operation (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "NOPls": "No Operation (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "NOPls.n": "No Operation (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "NOPls.w": "No Operation (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "NOPge": "No Operation (If APSR.N == APSR.V [Signed Greater or Equal])",
        "NOPge.n": "No Operation (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "NOPge.w": "No Operation (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "NOPlt": "No Operation (If APSR.N != APSR.V [Signed Lesser Than])",
        "NOPlt.n": "No Operation (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "NOPlt.w": "No Operation (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "NOPgt": "No Operation (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "NOPgt.n": "No Operation (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "NOPgt.w": "No Operation (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "NOPle": "No Operation (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "NOPle.n": "No Operation (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "NOPle.w": "No Operation (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "NOPal": "No Operation (Always)",
        "NOPal.n": "No Operation (T 16bits encoding) (Always)",
        "NOPal.w": "No Operation (T/A 32bits encoding) (Always)"
      }
    },
    "ORN%{s}%{c}%{q}": {
      "description": "Bitwise OR NOT %{q} %{c} %{s}",
      "variants": {
        "ORN": "Bitwise OR NOT",
        "ORN.n": "Bitwise OR NOT (T 16bits encoding)",
        "ORN.w": "Bitwise OR NOT (T/A 32bits encoding)",
        "ORNeq": "Bitwise OR NOT (If APSR.Z == 1 [Equal])",
        "ORNeq.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "ORNeq.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "ORNne": "Bitwise OR NOT (If APSR.Z == 0 [Not Equal])",
        "ORNne.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ORNne.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ORNcs": "Bitwise OR NOT (If APSR.C == 1 [Carry Set])",
        "ORNcs.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "ORNcs.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "ORNcc": "Bitwise OR NOT (If APSR.C == 0 [Carry Clear])",
        "ORNcc.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ORNcc.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ORNmi": "Bitwise OR NOT (If APSR.N == 1 [Minus])",
        "ORNmi.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "ORNmi.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "ORNpl": "Bitwise OR NOT (If APSR.N == 0 [Plus])",
        "ORNpl.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "ORNpl.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "ORNvs": "Bitwise OR NOT (If APSR.V == 1 [Overflow])",
        "ORNvs.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "ORNvs.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "ORNvc": "Bitwise OR NOT (If APSR.V == 0 [No Overflow])",
        "ORNvc.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "ORNvc.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "ORNhi": "Bitwise OR NOT (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ORNhi.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ORNhi.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ORNls": "Bitwise OR NOT (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ORNls.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ORNls.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ORNge": "Bitwise OR NOT (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ORNge.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ORNge.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ORNlt": "Bitwise OR NOT (If APSR.N != APSR.V [Signed Lesser Than])",
        "ORNlt.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ORNlt.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ORNgt": "Bitwise OR NOT (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ORNgt.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ORNgt.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ORNle": "Bitwise OR NOT (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ORNle.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ORNle.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ORNal": "Bitwise OR NOT (Always)",
        "ORNal.n": "Bitwise OR NOT (T 16bits encoding) (Always)",
        "ORNal.w": "Bitwise OR NOT (T/A 32bits encoding) (Always)",
        "ORNs": "Bitwise OR NOT (Update APSR)",
        "ORNs.n": "Bitwise OR NOT (T 16bits encoding) (Update APSR)",
        "ORNs.w": "Bitwise OR NOT (T/A 32bits encoding) (Update APSR)",
        "ORNseq": "Bitwise OR NOT (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ORNseq.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ORNseq.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ORNsne": "Bitwise OR NOT (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ORNsne.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ORNsne.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ORNscs": "Bitwise OR NOT (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ORNscs.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ORNscs.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ORNscc": "Bitwise OR NOT (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ORNscc.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ORNscc.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ORNsmi": "Bitwise OR NOT (If APSR.N == 1 [Minus]) (Update APSR)",
        "ORNsmi.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ORNsmi.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ORNspl": "Bitwise OR NOT (If APSR.N == 0 [Plus]) (Update APSR)",
        "ORNspl.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ORNspl.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ORNsvs": "Bitwise OR NOT (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ORNsvs.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ORNsvs.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ORNsvc": "Bitwise OR NOT (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ORNsvc.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ORNsvc.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ORNshi": "Bitwise OR NOT (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ORNshi.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ORNshi.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ORNsls": "Bitwise OR NOT (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ORNsls.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ORNsls.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ORNsge": "Bitwise OR NOT (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ORNsge.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ORNsge.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ORNslt": "Bitwise OR NOT (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ORNslt.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ORNslt.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ORNsgt": "Bitwise OR NOT (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ORNsgt.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ORNsgt.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ORNsle": "Bitwise OR NOT (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ORNsle.n": "Bitwise OR NOT (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ORNsle.w": "Bitwise OR NOT (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ORNsal": "Bitwise OR NOT (Always) (Update APSR)",
        "ORNsal.n": "Bitwise OR NOT (T 16bits encoding) (Always) (Update APSR)",
        "ORNsal.w": "Bitwise OR NOT (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "ORR%{s}%{c}%{q}": {
      "description": "Bitwise OR %{q} %{c} %{s}",
      "variants": {
        "ORR": "Bitwise OR",
        "ORR.n": "Bitwise OR (T 16bits encoding)",
        "ORR.w": "Bitwise OR (T/A 32bits encoding)",
        "ORReq": "Bitwise OR (If APSR.Z == 1 [Equal])",
        "ORReq.n": "Bitwise OR (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "ORReq.w": "Bitwise OR (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "ORRne": "Bitwise OR (If APSR.Z == 0 [Not Equal])",
        "ORRne.n": "Bitwise OR (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ORRne.w": "Bitwise OR (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "ORRcs": "Bitwise OR (If APSR.C == 1 [Carry Set])",
        "ORRcs.n": "Bitwise OR (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "ORRcs.w": "Bitwise OR (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "ORRcc": "Bitwise OR (If APSR.C == 0 [Carry Clear])",
        "ORRcc.n": "Bitwise OR (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ORRcc.w": "Bitwise OR (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "ORRmi": "Bitwise OR (If APSR.N == 1 [Minus])",
        "ORRmi.n": "Bitwise OR (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "ORRmi.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "ORRpl": "Bitwise OR (If APSR.N == 0 [Plus])",
        "ORRpl.n": "Bitwise OR (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "ORRpl.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "ORRvs": "Bitwise OR (If APSR.V == 1 [Overflow])",
        "ORRvs.n": "Bitwise OR (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "ORRvs.w": "Bitwise OR (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "ORRvc": "Bitwise OR (If APSR.V == 0 [No Overflow])",
        "ORRvc.n": "Bitwise OR (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "ORRvc.w": "Bitwise OR (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "ORRhi": "Bitwise OR (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ORRhi.n": "Bitwise OR (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ORRhi.w": "Bitwise OR (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "ORRls": "Bitwise OR (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ORRls.n": "Bitwise OR (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ORRls.w": "Bitwise OR (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "ORRge": "Bitwise OR (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ORRge.n": "Bitwise OR (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ORRge.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "ORRlt": "Bitwise OR (If APSR.N != APSR.V [Signed Lesser Than])",
        "ORRlt.n": "Bitwise OR (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ORRlt.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "ORRgt": "Bitwise OR (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ORRgt.n": "Bitwise OR (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ORRgt.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "ORRle": "Bitwise OR (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ORRle.n": "Bitwise OR (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ORRle.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "ORRal": "Bitwise OR (Always)",
        "ORRal.n": "Bitwise OR (T 16bits encoding) (Always)",
        "ORRal.w": "Bitwise OR (T/A 32bits encoding) (Always)",
        "ORRs": "Bitwise OR (Update APSR)",
        "ORRs.n": "Bitwise OR (T 16bits encoding) (Update APSR)",
        "ORRs.w": "Bitwise OR (T/A 32bits encoding) (Update APSR)",
        "ORRseq": "Bitwise OR (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ORRseq.n": "Bitwise OR (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ORRseq.w": "Bitwise OR (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "ORRsne": "Bitwise OR (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ORRsne.n": "Bitwise OR (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ORRsne.w": "Bitwise OR (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "ORRscs": "Bitwise OR (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ORRscs.n": "Bitwise OR (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ORRscs.w": "Bitwise OR (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "ORRscc": "Bitwise OR (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ORRscc.n": "Bitwise OR (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ORRscc.w": "Bitwise OR (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "ORRsmi": "Bitwise OR (If APSR.N == 1 [Minus]) (Update APSR)",
        "ORRsmi.n": "Bitwise OR (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ORRsmi.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "ORRspl": "Bitwise OR (If APSR.N == 0 [Plus]) (Update APSR)",
        "ORRspl.n": "Bitwise OR (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ORRspl.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "ORRsvs": "Bitwise OR (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ORRsvs.n": "Bitwise OR (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ORRsvs.w": "Bitwise OR (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "ORRsvc": "Bitwise OR (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ORRsvc.n": "Bitwise OR (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ORRsvc.w": "Bitwise OR (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "ORRshi": "Bitwise OR (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ORRshi.n": "Bitwise OR (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ORRshi.w": "Bitwise OR (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "ORRsls": "Bitwise OR (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ORRsls.n": "Bitwise OR (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ORRsls.w": "Bitwise OR (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "ORRsge": "Bitwise OR (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ORRsge.n": "Bitwise OR (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ORRsge.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "ORRslt": "Bitwise OR (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ORRslt.n": "Bitwise OR (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ORRslt.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "ORRsgt": "Bitwise OR (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ORRsgt.n": "Bitwise OR (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ORRsgt.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "ORRsle": "Bitwise OR (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ORRsle.n": "Bitwise OR (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ORRsle.w": "Bitwise OR (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "ORRsal": "Bitwise OR (Always) (Update APSR)",
        "ORRsal.n": "Bitwise OR (T 16bits encoding) (Always) (Update APSR)",
        "ORRsal.w": "Bitwise OR (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "PKH%{half_parts}%{c}%{q}": {
      "description": "Pack Halfword %{half_parts} %{q} %{c}",
      "variants": {
        "PKHbt": "Pack Halfword (Bottom half with Top half)",
        "PKHbt.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding)",
        "PKHbt.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding)",
        "PKHbteq": "Pack Halfword (Bottom half with Top half) (If APSR.Z == 1 [Equal])",
        "PKHbteq.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "PKHbteq.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "PKHbtne": "Pack Halfword (Bottom half with Top half) (If APSR.Z == 0 [Not Equal])",
        "PKHbtne.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PKHbtne.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PKHbtcs": "Pack Halfword (Bottom half with Top half) (If APSR.C == 1 [Carry Set])",
        "PKHbtcs.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "PKHbtcs.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "PKHbtcc": "Pack Halfword (Bottom half with Top half) (If APSR.C == 0 [Carry Clear])",
        "PKHbtcc.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PKHbtcc.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PKHbtmi": "Pack Halfword (Bottom half with Top half) (If APSR.N == 1 [Minus])",
        "PKHbtmi.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "PKHbtmi.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "PKHbtpl": "Pack Halfword (Bottom half with Top half) (If APSR.N == 0 [Plus])",
        "PKHbtpl.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "PKHbtpl.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "PKHbtvs": "Pack Halfword (Bottom half with Top half) (If APSR.V == 1 [Overflow])",
        "PKHbtvs.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "PKHbtvs.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "PKHbtvc": "Pack Halfword (Bottom half with Top half) (If APSR.V == 0 [No Overflow])",
        "PKHbtvc.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "PKHbtvc.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "PKHbthi": "Pack Halfword (Bottom half with Top half) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PKHbthi.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PKHbthi.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PKHbtls": "Pack Halfword (Bottom half with Top half) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PKHbtls.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PKHbtls.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PKHbtge": "Pack Halfword (Bottom half with Top half) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PKHbtge.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PKHbtge.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PKHbtlt": "Pack Halfword (Bottom half with Top half) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PKHbtlt.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PKHbtlt.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PKHbtgt": "Pack Halfword (Bottom half with Top half) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PKHbtgt.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PKHbtgt.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PKHbtle": "Pack Halfword (Bottom half with Top half) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PKHbtle.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PKHbtle.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PKHbtal": "Pack Halfword (Bottom half with Top half) (Always)",
        "PKHbtal.n": "Pack Halfword (Bottom half with Top half) (T 16bits encoding) (Always)",
        "PKHbtal.w": "Pack Halfword (Bottom half with Top half) (T/A 32bits encoding) (Always)",
        "PKHtb": "Pack Halfword (Top half with Bottom half)",
        "PKHtb.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding)",
        "PKHtb.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding)",
        "PKHtbeq": "Pack Halfword (Top half with Bottom half) (If APSR.Z == 1 [Equal])",
        "PKHtbeq.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "PKHtbeq.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "PKHtbne": "Pack Halfword (Top half with Bottom half) (If APSR.Z == 0 [Not Equal])",
        "PKHtbne.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PKHtbne.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PKHtbcs": "Pack Halfword (Top half with Bottom half) (If APSR.C == 1 [Carry Set])",
        "PKHtbcs.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "PKHtbcs.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "PKHtbcc": "Pack Halfword (Top half with Bottom half) (If APSR.C == 0 [Carry Clear])",
        "PKHtbcc.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PKHtbcc.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PKHtbmi": "Pack Halfword (Top half with Bottom half) (If APSR.N == 1 [Minus])",
        "PKHtbmi.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "PKHtbmi.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "PKHtbpl": "Pack Halfword (Top half with Bottom half) (If APSR.N == 0 [Plus])",
        "PKHtbpl.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "PKHtbpl.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "PKHtbvs": "Pack Halfword (Top half with Bottom half) (If APSR.V == 1 [Overflow])",
        "PKHtbvs.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "PKHtbvs.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "PKHtbvc": "Pack Halfword (Top half with Bottom half) (If APSR.V == 0 [No Overflow])",
        "PKHtbvc.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "PKHtbvc.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "PKHtbhi": "Pack Halfword (Top half with Bottom half) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PKHtbhi.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PKHtbhi.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PKHtbls": "Pack Halfword (Top half with Bottom half) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PKHtbls.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PKHtbls.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PKHtbge": "Pack Halfword (Top half with Bottom half) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PKHtbge.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PKHtbge.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PKHtblt": "Pack Halfword (Top half with Bottom half) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PKHtblt.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PKHtblt.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PKHtbgt": "Pack Halfword (Top half with Bottom half) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PKHtbgt.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PKHtbgt.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PKHtble": "Pack Halfword (Top half with Bottom half) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PKHtble.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PKHtble.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PKHtbal": "Pack Halfword (Top half with Bottom half) (Always)",
        "PKHtbal.n": "Pack Halfword (Top half with Bottom half) (T 16bits encoding) (Always)",
        "PKHtbal.w": "Pack Halfword (Top half with Bottom half) (T/A 32bits encoding) (Always)"
      }
    },
    "PLD%{pld_w}%{c}%{q}": {
      "description": "Preload Data %{pld_w} %{q} %{c}",
      "variants": {
        "PLD": "Preload Data (Read intent)",
        "PLD.n": "Preload Data (Read intent) (T 16bits encoding)",
        "PLD.w": "Preload Data (Read intent) (T/A 32bits encoding)",
        "PLDeq": "Preload Data (Read intent) (If APSR.Z == 1 [Equal])",
        "PLDeq.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "PLDeq.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "PLDne": "Preload Data (Read intent) (If APSR.Z == 0 [Not Equal])",
        "PLDne.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PLDne.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PLDcs": "Preload Data (Read intent) (If APSR.C == 1 [Carry Set])",
        "PLDcs.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "PLDcs.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "PLDcc": "Preload Data (Read intent) (If APSR.C == 0 [Carry Clear])",
        "PLDcc.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PLDcc.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PLDmi": "Preload Data (Read intent) (If APSR.N == 1 [Minus])",
        "PLDmi.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "PLDmi.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "PLDpl": "Preload Data (Read intent) (If APSR.N == 0 [Plus])",
        "PLDpl.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "PLDpl.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "PLDvs": "Preload Data (Read intent) (If APSR.V == 1 [Overflow])",
        "PLDvs.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "PLDvs.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "PLDvc": "Preload Data (Read intent) (If APSR.V == 0 [No Overflow])",
        "PLDvc.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "PLDvc.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "PLDhi": "Preload Data (Read intent) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PLDhi.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PLDhi.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PLDls": "Preload Data (Read intent) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PLDls.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PLDls.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PLDge": "Preload Data (Read intent) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PLDge.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PLDge.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PLDlt": "Preload Data (Read intent) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PLDlt.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PLDlt.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PLDgt": "Preload Data (Read intent) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PLDgt.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PLDgt.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PLDle": "Preload Data (Read intent) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PLDle.n": "Preload Data (Read intent) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PLDle.w": "Preload Data (Read intent) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PLDal": "Preload Data (Read intent) (Always)",
        "PLDal.n": "Preload Data (Read intent) (T 16bits encoding) (Always)",
        "PLDal.w": "Preload Data (Read intent) (T/A 32bits encoding) (Always)",
        "PLDw": "Preload Data (Write intent)",
        "PLDw.n": "Preload Data (Write intent) (T 16bits encoding)",
        "PLDw.w": "Preload Data (Write intent) (T/A 32bits encoding)",
        "PLDweq": "Preload Data (Write intent) (If APSR.Z == 1 [Equal])",
        "PLDweq.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "PLDweq.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "PLDwne": "Preload Data (Write intent) (If APSR.Z == 0 [Not Equal])",
        "PLDwne.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PLDwne.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PLDwcs": "Preload Data (Write intent) (If APSR.C == 1 [Carry Set])",
        "PLDwcs.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "PLDwcs.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "PLDwcc": "Preload Data (Write intent) (If APSR.C == 0 [Carry Clear])",
        "PLDwcc.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PLDwcc.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PLDwmi": "Preload Data (Write intent) (If APSR.N == 1 [Minus])",
        "PLDwmi.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "PLDwmi.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "PLDwpl": "Preload Data (Write intent) (If APSR.N == 0 [Plus])",
        "PLDwpl.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "PLDwpl.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "PLDwvs": "Preload Data (Write intent) (If APSR.V == 1 [Overflow])",
        "PLDwvs.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "PLDwvs.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "PLDwvc": "Preload Data (Write intent) (If APSR.V == 0 [No Overflow])",
        "PLDwvc.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "PLDwvc.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "PLDwhi": "Preload Data (Write intent) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PLDwhi.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PLDwhi.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PLDwls": "Preload Data (Write intent) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PLDwls.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PLDwls.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PLDwge": "Preload Data (Write intent) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PLDwge.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PLDwge.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PLDwlt": "Preload Data (Write intent) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PLDwlt.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PLDwlt.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PLDwgt": "Preload Data (Write intent) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PLDwgt.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PLDwgt.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PLDwle": "Preload Data (Write intent) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PLDwle.n": "Preload Data (Write intent) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PLDwle.w": "Preload Data (Write intent) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PLDwal": "Preload Data (Write intent) (Always)",
        "PLDwal.n": "Preload Data (Write intent) (T 16bits encoding) (Always)",
        "PLDwal.w": "Preload Data (Write intent) (T/A 32bits encoding) (Always)"
      }
    },
    "PLI%{c}%{q}": {
      "description": "Preload Instruction %{q} %{c}",
      "variants": {
        "PLI": "Preload Instruction",
        "PLI.n": "Preload Instruction (T 16bits encoding)",
        "PLI.w": "Preload Instruction (T/A 32bits encoding)",
        "PLIeq": "Preload Instruction (If APSR.Z == 1 [Equal])",
        "PLIeq.n": "Preload Instruction (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "PLIeq.w": "Preload Instruction (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "PLIne": "Preload Instruction (If APSR.Z == 0 [Not Equal])",
        "PLIne.n": "Preload Instruction (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PLIne.w": "Preload Instruction (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PLIcs": "Preload Instruction (If APSR.C == 1 [Carry Set])",
        "PLIcs.n": "Preload Instruction (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "PLIcs.w": "Preload Instruction (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "PLIcc": "Preload Instruction (If APSR.C == 0 [Carry Clear])",
        "PLIcc.n": "Preload Instruction (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PLIcc.w": "Preload Instruction (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PLImi": "Preload Instruction (If APSR.N == 1 [Minus])",
        "PLImi.n": "Preload Instruction (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "PLImi.w": "Preload Instruction (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "PLIpl": "Preload Instruction (If APSR.N == 0 [Plus])",
        "PLIpl.n": "Preload Instruction (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "PLIpl.w": "Preload Instruction (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "PLIvs": "Preload Instruction (If APSR.V == 1 [Overflow])",
        "PLIvs.n": "Preload Instruction (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "PLIvs.w": "Preload Instruction (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "PLIvc": "Preload Instruction (If APSR.V == 0 [No Overflow])",
        "PLIvc.n": "Preload Instruction (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "PLIvc.w": "Preload Instruction (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "PLIhi": "Preload Instruction (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PLIhi.n": "Preload Instruction (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PLIhi.w": "Preload Instruction (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PLIls": "Preload Instruction (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PLIls.n": "Preload Instruction (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PLIls.w": "Preload Instruction (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PLIge": "Preload Instruction (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PLIge.n": "Preload Instruction (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PLIge.w": "Preload Instruction (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PLIlt": "Preload Instruction (If APSR.N != APSR.V [Signed Lesser Than])",
        "PLIlt.n": "Preload Instruction (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PLIlt.w": "Preload Instruction (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PLIgt": "Preload Instruction (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PLIgt.n": "Preload Instruction (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PLIgt.w": "Preload Instruction (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PLIle": "Preload Instruction (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PLIle.n": "Preload Instruction (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PLIle.w": "Preload Instruction (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PLIal": "Preload Instruction (Always)",
        "PLIal.n": "Preload Instruction (T 16bits encoding) (Always)",
        "PLIal.w": "Preload Instruction (T/A 32bits encoding) (Always)"
      }
    },
    "POP%{c}%{q}": {
      "description": "Pop Multiple Registers %{q} %{c}",
      "variants": {
        "POP": "Pop Multiple Registers",
        "POP.n": "Pop Multiple Registers (T 16bits encoding)",
        "POP.w": "Pop Multiple Registers (T/A 32bits encoding)",
        "POPeq": "Pop Multiple Registers (If APSR.Z == 1 [Equal])",
        "POPeq.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "POPeq.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "POPne": "Pop Multiple Registers (If APSR.Z == 0 [Not Equal])",
        "POPne.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "POPne.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "POPcs": "Pop Multiple Registers (If APSR.C == 1 [Carry Set])",
        "POPcs.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "POPcs.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "POPcc": "Pop Multiple Registers (If APSR.C == 0 [Carry Clear])",
        "POPcc.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "POPcc.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "POPmi": "Pop Multiple Registers (If APSR.N == 1 [Minus])",
        "POPmi.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "POPmi.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "POPpl": "Pop Multiple Registers (If APSR.N == 0 [Plus])",
        "POPpl.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "POPpl.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "POPvs": "Pop Multiple Registers (If APSR.V == 1 [Overflow])",
        "POPvs.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "POPvs.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "POPvc": "Pop Multiple Registers (If APSR.V == 0 [No Overflow])",
        "POPvc.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "POPvc.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "POPhi": "Pop Multiple Registers (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "POPhi.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "POPhi.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "POPls": "Pop Multiple Registers (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "POPls.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "POPls.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "POPge": "Pop Multiple Registers (If APSR.N == APSR.V [Signed Greater or Equal])",
        "POPge.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "POPge.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "POPlt": "Pop Multiple Registers (If APSR.N != APSR.V [Signed Lesser Than])",
        "POPlt.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "POPlt.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "POPgt": "Pop Multiple Registers (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "POPgt.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "POPgt.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "POPle": "Pop Multiple Registers (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "POPle.n": "Pop Multiple Registers (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "POPle.w": "Pop Multiple Registers (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "POPal": "Pop Multiple Registers (Always)",
        "POPal.n": "Pop Multiple Registers (T 16bits encoding) (Always)",
        "POPal.w": "Pop Multiple Registers (T/A 32bits encoding) (Always)"
      }
    },
    "PUSH%{c}%{q}": {
      "description": "Push Multiple Registers %{q} %{c}",
      "variants": {
        "PUSH": "Push Multiple Registers",
        "PUSH.n": "Push Multiple Registers (T 16bits encoding)",
        "PUSH.w": "Push Multiple Registers (T/A 32bits encoding)",
        "PUSHeq": "Push Multiple Registers (If APSR.Z == 1 [Equal])",
        "PUSHeq.n": "Push Multiple Registers (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "PUSHeq.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "PUSHne": "Push Multiple Registers (If APSR.Z == 0 [Not Equal])",
        "PUSHne.n": "Push Multiple Registers (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PUSHne.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "PUSHcs": "Push Multiple Registers (If APSR.C == 1 [Carry Set])",
        "PUSHcs.n": "Push Multiple Registers (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "PUSHcs.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "PUSHcc": "Push Multiple Registers (If APSR.C == 0 [Carry Clear])",
        "PUSHcc.n": "Push Multiple Registers (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PUSHcc.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "PUSHmi": "Push Multiple Registers (If APSR.N == 1 [Minus])",
        "PUSHmi.n": "Push Multiple Registers (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "PUSHmi.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "PUSHpl": "Push Multiple Registers (If APSR.N == 0 [Plus])",
        "PUSHpl.n": "Push Multiple Registers (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "PUSHpl.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "PUSHvs": "Push Multiple Registers (If APSR.V == 1 [Overflow])",
        "PUSHvs.n": "Push Multiple Registers (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "PUSHvs.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "PUSHvc": "Push Multiple Registers (If APSR.V == 0 [No Overflow])",
        "PUSHvc.n": "Push Multiple Registers (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "PUSHvc.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "PUSHhi": "Push Multiple Registers (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PUSHhi.n": "Push Multiple Registers (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PUSHhi.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "PUSHls": "Push Multiple Registers (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PUSHls.n": "Push Multiple Registers (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PUSHls.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "PUSHge": "Push Multiple Registers (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PUSHge.n": "Push Multiple Registers (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PUSHge.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "PUSHlt": "Push Multiple Registers (If APSR.N != APSR.V [Signed Lesser Than])",
        "PUSHlt.n": "Push Multiple Registers (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PUSHlt.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "PUSHgt": "Push Multiple Registers (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PUSHgt.n": "Push Multiple Registers (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PUSHgt.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "PUSHle": "Push Multiple Registers (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PUSHle.n": "Push Multiple Registers (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PUSHle.w": "Push Multiple Registers (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "PUSHal": "Push Multiple Registers (Always)",
        "PUSHal.n": "Push Multiple Registers (T 16bits encoding) (Always)",
        "PUSHal.w": "Push Multiple Registers (T/A 32bits encoding) (Always)"
      }
    },
    "Q%{d}%{operations}%{bsize}%{c}%{q}": {
      "description": "Saturating %{d} %{operations} %{bsize} %{q} %{c}",
      "variants": {
        "QA": "Saturating Add",
        "QA.n": "Saturating Add (T 16bits encoding)",
        "QA.w": "Saturating Add (T/A 32bits encoding)",
        "QAeq": "Saturating Add (If APSR.Z == 1 [Equal])",
        "QAeq.n": "Saturating Add (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QAeq.w": "Saturating Add (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QAne": "Saturating Add (If APSR.Z == 0 [Not Equal])",
        "QAne.n": "Saturating Add (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QAne.w": "Saturating Add (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QAcs": "Saturating Add (If APSR.C == 1 [Carry Set])",
        "QAcs.n": "Saturating Add (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QAcs.w": "Saturating Add (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QAcc": "Saturating Add (If APSR.C == 0 [Carry Clear])",
        "QAcc.n": "Saturating Add (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QAcc.w": "Saturating Add (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QAmi": "Saturating Add (If APSR.N == 1 [Minus])",
        "QAmi.n": "Saturating Add (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QAmi.w": "Saturating Add (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QApl": "Saturating Add (If APSR.N == 0 [Plus])",
        "QApl.n": "Saturating Add (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QApl.w": "Saturating Add (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QAvs": "Saturating Add (If APSR.V == 1 [Overflow])",
        "QAvs.n": "Saturating Add (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QAvs.w": "Saturating Add (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QAvc": "Saturating Add (If APSR.V == 0 [No Overflow])",
        "QAvc.n": "Saturating Add (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QAvc.w": "Saturating Add (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QAhi": "Saturating Add (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QAhi.n": "Saturating Add (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QAhi.w": "Saturating Add (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QAls": "Saturating Add (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QAls.n": "Saturating Add (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QAls.w": "Saturating Add (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QAge": "Saturating Add (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QAge.n": "Saturating Add (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QAge.w": "Saturating Add (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QAlt": "Saturating Add (If APSR.N != APSR.V [Signed Lesser Than])",
        "QAlt.n": "Saturating Add (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QAlt.w": "Saturating Add (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QAgt": "Saturating Add (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QAgt.n": "Saturating Add (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QAgt.w": "Saturating Add (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QAle": "Saturating Add (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QAle.n": "Saturating Add (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QAle.w": "Saturating Add (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QAal": "Saturating Add (Always)",
        "QAal.n": "Saturating Add (T 16bits encoding) (Always)",
        "QAal.w": "Saturating Add (T/A 32bits encoding) (Always)",
        "QA.8": "Saturating Add .8",
        "QA.8.n": "Saturating Add .8 (T 16bits encoding)",
        "QA.8.w": "Saturating Add .8 (T/A 32bits encoding)",
        "QA.8eq": "Saturating Add .8 (If APSR.Z == 1 [Equal])",
        "QA.8eq.n": "Saturating Add .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QA.8eq.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QA.8ne": "Saturating Add .8 (If APSR.Z == 0 [Not Equal])",
        "QA.8ne.n": "Saturating Add .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QA.8ne.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QA.8cs": "Saturating Add .8 (If APSR.C == 1 [Carry Set])",
        "QA.8cs.n": "Saturating Add .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QA.8cs.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QA.8cc": "Saturating Add .8 (If APSR.C == 0 [Carry Clear])",
        "QA.8cc.n": "Saturating Add .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QA.8cc.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QA.8mi": "Saturating Add .8 (If APSR.N == 1 [Minus])",
        "QA.8mi.n": "Saturating Add .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QA.8mi.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QA.8pl": "Saturating Add .8 (If APSR.N == 0 [Plus])",
        "QA.8pl.n": "Saturating Add .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QA.8pl.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QA.8vs": "Saturating Add .8 (If APSR.V == 1 [Overflow])",
        "QA.8vs.n": "Saturating Add .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QA.8vs.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QA.8vc": "Saturating Add .8 (If APSR.V == 0 [No Overflow])",
        "QA.8vc.n": "Saturating Add .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QA.8vc.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QA.8hi": "Saturating Add .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QA.8hi.n": "Saturating Add .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QA.8hi.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QA.8ls": "Saturating Add .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QA.8ls.n": "Saturating Add .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QA.8ls.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QA.8ge": "Saturating Add .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QA.8ge.n": "Saturating Add .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QA.8ge.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QA.8lt": "Saturating Add .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "QA.8lt.n": "Saturating Add .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QA.8lt.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QA.8gt": "Saturating Add .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QA.8gt.n": "Saturating Add .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QA.8gt.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QA.8le": "Saturating Add .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QA.8le.n": "Saturating Add .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QA.8le.w": "Saturating Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QA.8al": "Saturating Add .8 (Always)",
        "QA.8al.n": "Saturating Add .8 (T 16bits encoding) (Always)",
        "QA.8al.w": "Saturating Add .8 (T/A 32bits encoding) (Always)",
        "QA.16": "Saturating Add .16",
        "QA.16.n": "Saturating Add .16 (T 16bits encoding)",
        "QA.16.w": "Saturating Add .16 (T/A 32bits encoding)",
        "QA.16eq": "Saturating Add .16 (If APSR.Z == 1 [Equal])",
        "QA.16eq.n": "Saturating Add .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QA.16eq.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QA.16ne": "Saturating Add .16 (If APSR.Z == 0 [Not Equal])",
        "QA.16ne.n": "Saturating Add .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QA.16ne.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QA.16cs": "Saturating Add .16 (If APSR.C == 1 [Carry Set])",
        "QA.16cs.n": "Saturating Add .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QA.16cs.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QA.16cc": "Saturating Add .16 (If APSR.C == 0 [Carry Clear])",
        "QA.16cc.n": "Saturating Add .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QA.16cc.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QA.16mi": "Saturating Add .16 (If APSR.N == 1 [Minus])",
        "QA.16mi.n": "Saturating Add .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QA.16mi.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QA.16pl": "Saturating Add .16 (If APSR.N == 0 [Plus])",
        "QA.16pl.n": "Saturating Add .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QA.16pl.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QA.16vs": "Saturating Add .16 (If APSR.V == 1 [Overflow])",
        "QA.16vs.n": "Saturating Add .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QA.16vs.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QA.16vc": "Saturating Add .16 (If APSR.V == 0 [No Overflow])",
        "QA.16vc.n": "Saturating Add .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QA.16vc.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QA.16hi": "Saturating Add .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QA.16hi.n": "Saturating Add .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QA.16hi.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QA.16ls": "Saturating Add .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QA.16ls.n": "Saturating Add .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QA.16ls.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QA.16ge": "Saturating Add .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QA.16ge.n": "Saturating Add .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QA.16ge.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QA.16lt": "Saturating Add .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "QA.16lt.n": "Saturating Add .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QA.16lt.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QA.16gt": "Saturating Add .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QA.16gt.n": "Saturating Add .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QA.16gt.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QA.16le": "Saturating Add .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QA.16le.n": "Saturating Add .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QA.16le.w": "Saturating Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QA.16al": "Saturating Add .16 (Always)",
        "QA.16al.n": "Saturating Add .16 (T 16bits encoding) (Always)",
        "QA.16al.w": "Saturating Add .16 (T/A 32bits encoding) (Always)",
        "QS": "Saturating Subtract",
        "QS.n": "Saturating Subtract (T 16bits encoding)",
        "QS.w": "Saturating Subtract (T/A 32bits encoding)",
        "QSeq": "Saturating Subtract (If APSR.Z == 1 [Equal])",
        "QSeq.n": "Saturating Subtract (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QSeq.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QSne": "Saturating Subtract (If APSR.Z == 0 [Not Equal])",
        "QSne.n": "Saturating Subtract (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QSne.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QScs": "Saturating Subtract (If APSR.C == 1 [Carry Set])",
        "QScs.n": "Saturating Subtract (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QScs.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QScc": "Saturating Subtract (If APSR.C == 0 [Carry Clear])",
        "QScc.n": "Saturating Subtract (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QScc.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QSmi": "Saturating Subtract (If APSR.N == 1 [Minus])",
        "QSmi.n": "Saturating Subtract (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QSmi.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QSpl": "Saturating Subtract (If APSR.N == 0 [Plus])",
        "QSpl.n": "Saturating Subtract (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QSpl.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QSvs": "Saturating Subtract (If APSR.V == 1 [Overflow])",
        "QSvs.n": "Saturating Subtract (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QSvs.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QSvc": "Saturating Subtract (If APSR.V == 0 [No Overflow])",
        "QSvc.n": "Saturating Subtract (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QSvc.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QShi": "Saturating Subtract (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QShi.n": "Saturating Subtract (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QShi.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QSls": "Saturating Subtract (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QSls.n": "Saturating Subtract (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QSls.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QSge": "Saturating Subtract (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QSge.n": "Saturating Subtract (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QSge.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QSlt": "Saturating Subtract (If APSR.N != APSR.V [Signed Lesser Than])",
        "QSlt.n": "Saturating Subtract (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QSlt.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QSgt": "Saturating Subtract (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QSgt.n": "Saturating Subtract (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QSgt.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QSle": "Saturating Subtract (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QSle.n": "Saturating Subtract (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QSle.w": "Saturating Subtract (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QSal": "Saturating Subtract (Always)",
        "QSal.n": "Saturating Subtract (T 16bits encoding) (Always)",
        "QSal.w": "Saturating Subtract (T/A 32bits encoding) (Always)",
        "QS.8": "Saturating Subtract .8",
        "QS.8.n": "Saturating Subtract .8 (T 16bits encoding)",
        "QS.8.w": "Saturating Subtract .8 (T/A 32bits encoding)",
        "QS.8eq": "Saturating Subtract .8 (If APSR.Z == 1 [Equal])",
        "QS.8eq.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QS.8eq.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QS.8ne": "Saturating Subtract .8 (If APSR.Z == 0 [Not Equal])",
        "QS.8ne.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QS.8ne.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QS.8cs": "Saturating Subtract .8 (If APSR.C == 1 [Carry Set])",
        "QS.8cs.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QS.8cs.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QS.8cc": "Saturating Subtract .8 (If APSR.C == 0 [Carry Clear])",
        "QS.8cc.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QS.8cc.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QS.8mi": "Saturating Subtract .8 (If APSR.N == 1 [Minus])",
        "QS.8mi.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QS.8mi.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QS.8pl": "Saturating Subtract .8 (If APSR.N == 0 [Plus])",
        "QS.8pl.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QS.8pl.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QS.8vs": "Saturating Subtract .8 (If APSR.V == 1 [Overflow])",
        "QS.8vs.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QS.8vs.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QS.8vc": "Saturating Subtract .8 (If APSR.V == 0 [No Overflow])",
        "QS.8vc.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QS.8vc.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QS.8hi": "Saturating Subtract .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QS.8hi.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QS.8hi.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QS.8ls": "Saturating Subtract .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QS.8ls.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QS.8ls.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QS.8ge": "Saturating Subtract .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QS.8ge.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QS.8ge.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QS.8lt": "Saturating Subtract .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "QS.8lt.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QS.8lt.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QS.8gt": "Saturating Subtract .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QS.8gt.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QS.8gt.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QS.8le": "Saturating Subtract .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QS.8le.n": "Saturating Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QS.8le.w": "Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QS.8al": "Saturating Subtract .8 (Always)",
        "QS.8al.n": "Saturating Subtract .8 (T 16bits encoding) (Always)",
        "QS.8al.w": "Saturating Subtract .8 (T/A 32bits encoding) (Always)",
        "QS.16": "Saturating Subtract .16",
        "QS.16.n": "Saturating Subtract .16 (T 16bits encoding)",
        "QS.16.w": "Saturating Subtract .16 (T/A 32bits encoding)",
        "QS.16eq": "Saturating Subtract .16 (If APSR.Z == 1 [Equal])",
        "QS.16eq.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QS.16eq.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QS.16ne": "Saturating Subtract .16 (If APSR.Z == 0 [Not Equal])",
        "QS.16ne.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QS.16ne.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QS.16cs": "Saturating Subtract .16 (If APSR.C == 1 [Carry Set])",
        "QS.16cs.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QS.16cs.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QS.16cc": "Saturating Subtract .16 (If APSR.C == 0 [Carry Clear])",
        "QS.16cc.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QS.16cc.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QS.16mi": "Saturating Subtract .16 (If APSR.N == 1 [Minus])",
        "QS.16mi.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QS.16mi.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QS.16pl": "Saturating Subtract .16 (If APSR.N == 0 [Plus])",
        "QS.16pl.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QS.16pl.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QS.16vs": "Saturating Subtract .16 (If APSR.V == 1 [Overflow])",
        "QS.16vs.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QS.16vs.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QS.16vc": "Saturating Subtract .16 (If APSR.V == 0 [No Overflow])",
        "QS.16vc.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QS.16vc.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QS.16hi": "Saturating Subtract .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QS.16hi.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QS.16hi.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QS.16ls": "Saturating Subtract .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QS.16ls.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QS.16ls.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QS.16ge": "Saturating Subtract .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QS.16ge.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QS.16ge.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QS.16lt": "Saturating Subtract .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "QS.16lt.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QS.16lt.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QS.16gt": "Saturating Subtract .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QS.16gt.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QS.16gt.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QS.16le": "Saturating Subtract .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QS.16le.n": "Saturating Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QS.16le.w": "Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QS.16al": "Saturating Subtract .16 (Always)",
        "QS.16al.n": "Saturating Subtract .16 (T 16bits encoding) (Always)",
        "QS.16al.w": "Saturating Subtract .16 (T/A 32bits encoding) (Always)",
        "QdA": "Saturating Dual Add",
        "QdA.n": "Saturating Dual Add (T 16bits encoding)",
        "QdA.w": "Saturating Dual Add (T/A 32bits encoding)",
        "QdAeq": "Saturating Dual Add (If APSR.Z == 1 [Equal])",
        "QdAeq.n": "Saturating Dual Add (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QdAeq.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QdAne": "Saturating Dual Add (If APSR.Z == 0 [Not Equal])",
        "QdAne.n": "Saturating Dual Add (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdAne.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdAcs": "Saturating Dual Add (If APSR.C == 1 [Carry Set])",
        "QdAcs.n": "Saturating Dual Add (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdAcs.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdAcc": "Saturating Dual Add (If APSR.C == 0 [Carry Clear])",
        "QdAcc.n": "Saturating Dual Add (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdAcc.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdAmi": "Saturating Dual Add (If APSR.N == 1 [Minus])",
        "QdAmi.n": "Saturating Dual Add (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QdAmi.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QdApl": "Saturating Dual Add (If APSR.N == 0 [Plus])",
        "QdApl.n": "Saturating Dual Add (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QdApl.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QdAvs": "Saturating Dual Add (If APSR.V == 1 [Overflow])",
        "QdAvs.n": "Saturating Dual Add (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QdAvs.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QdAvc": "Saturating Dual Add (If APSR.V == 0 [No Overflow])",
        "QdAvc.n": "Saturating Dual Add (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdAvc.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdAhi": "Saturating Dual Add (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdAhi.n": "Saturating Dual Add (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdAhi.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdAls": "Saturating Dual Add (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdAls.n": "Saturating Dual Add (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdAls.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdAge": "Saturating Dual Add (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdAge.n": "Saturating Dual Add (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdAge.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdAlt": "Saturating Dual Add (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdAlt.n": "Saturating Dual Add (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdAlt.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdAgt": "Saturating Dual Add (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdAgt.n": "Saturating Dual Add (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdAgt.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdAle": "Saturating Dual Add (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdAle.n": "Saturating Dual Add (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdAle.w": "Saturating Dual Add (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdAal": "Saturating Dual Add (Always)",
        "QdAal.n": "Saturating Dual Add (T 16bits encoding) (Always)",
        "QdAal.w": "Saturating Dual Add (T/A 32bits encoding) (Always)",
        "QdA.8": "Saturating Dual Add .8",
        "QdA.8.n": "Saturating Dual Add .8 (T 16bits encoding)",
        "QdA.8.w": "Saturating Dual Add .8 (T/A 32bits encoding)",
        "QdA.8eq": "Saturating Dual Add .8 (If APSR.Z == 1 [Equal])",
        "QdA.8eq.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QdA.8eq.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QdA.8ne": "Saturating Dual Add .8 (If APSR.Z == 0 [Not Equal])",
        "QdA.8ne.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdA.8ne.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdA.8cs": "Saturating Dual Add .8 (If APSR.C == 1 [Carry Set])",
        "QdA.8cs.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdA.8cs.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdA.8cc": "Saturating Dual Add .8 (If APSR.C == 0 [Carry Clear])",
        "QdA.8cc.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdA.8cc.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdA.8mi": "Saturating Dual Add .8 (If APSR.N == 1 [Minus])",
        "QdA.8mi.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QdA.8mi.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QdA.8pl": "Saturating Dual Add .8 (If APSR.N == 0 [Plus])",
        "QdA.8pl.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QdA.8pl.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QdA.8vs": "Saturating Dual Add .8 (If APSR.V == 1 [Overflow])",
        "QdA.8vs.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QdA.8vs.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QdA.8vc": "Saturating Dual Add .8 (If APSR.V == 0 [No Overflow])",
        "QdA.8vc.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdA.8vc.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdA.8hi": "Saturating Dual Add .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdA.8hi.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdA.8hi.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdA.8ls": "Saturating Dual Add .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdA.8ls.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdA.8ls.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdA.8ge": "Saturating Dual Add .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdA.8ge.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdA.8ge.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdA.8lt": "Saturating Dual Add .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdA.8lt.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdA.8lt.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdA.8gt": "Saturating Dual Add .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdA.8gt.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdA.8gt.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdA.8le": "Saturating Dual Add .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdA.8le.n": "Saturating Dual Add .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdA.8le.w": "Saturating Dual Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdA.8al": "Saturating Dual Add .8 (Always)",
        "QdA.8al.n": "Saturating Dual Add .8 (T 16bits encoding) (Always)",
        "QdA.8al.w": "Saturating Dual Add .8 (T/A 32bits encoding) (Always)",
        "QdA.16": "Saturating Dual Add .16",
        "QdA.16.n": "Saturating Dual Add .16 (T 16bits encoding)",
        "QdA.16.w": "Saturating Dual Add .16 (T/A 32bits encoding)",
        "QdA.16eq": "Saturating Dual Add .16 (If APSR.Z == 1 [Equal])",
        "QdA.16eq.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QdA.16eq.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QdA.16ne": "Saturating Dual Add .16 (If APSR.Z == 0 [Not Equal])",
        "QdA.16ne.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdA.16ne.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdA.16cs": "Saturating Dual Add .16 (If APSR.C == 1 [Carry Set])",
        "QdA.16cs.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdA.16cs.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdA.16cc": "Saturating Dual Add .16 (If APSR.C == 0 [Carry Clear])",
        "QdA.16cc.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdA.16cc.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdA.16mi": "Saturating Dual Add .16 (If APSR.N == 1 [Minus])",
        "QdA.16mi.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QdA.16mi.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QdA.16pl": "Saturating Dual Add .16 (If APSR.N == 0 [Plus])",
        "QdA.16pl.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QdA.16pl.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QdA.16vs": "Saturating Dual Add .16 (If APSR.V == 1 [Overflow])",
        "QdA.16vs.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QdA.16vs.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QdA.16vc": "Saturating Dual Add .16 (If APSR.V == 0 [No Overflow])",
        "QdA.16vc.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdA.16vc.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdA.16hi": "Saturating Dual Add .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdA.16hi.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdA.16hi.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdA.16ls": "Saturating Dual Add .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdA.16ls.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdA.16ls.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdA.16ge": "Saturating Dual Add .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdA.16ge.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdA.16ge.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdA.16lt": "Saturating Dual Add .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdA.16lt.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdA.16lt.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdA.16gt": "Saturating Dual Add .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdA.16gt.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdA.16gt.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdA.16le": "Saturating Dual Add .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdA.16le.n": "Saturating Dual Add .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdA.16le.w": "Saturating Dual Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdA.16al": "Saturating Dual Add .16 (Always)",
        "QdA.16al.n": "Saturating Dual Add .16 (T 16bits encoding) (Always)",
        "QdA.16al.w": "Saturating Dual Add .16 (T/A 32bits encoding) (Always)",
        "QdS": "Saturating Dual Subtract",
        "QdS.n": "Saturating Dual Subtract (T 16bits encoding)",
        "QdS.w": "Saturating Dual Subtract (T/A 32bits encoding)",
        "QdSeq": "Saturating Dual Subtract (If APSR.Z == 1 [Equal])",
        "QdSeq.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QdSeq.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QdSne": "Saturating Dual Subtract (If APSR.Z == 0 [Not Equal])",
        "QdSne.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdSne.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdScs": "Saturating Dual Subtract (If APSR.C == 1 [Carry Set])",
        "QdScs.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdScs.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdScc": "Saturating Dual Subtract (If APSR.C == 0 [Carry Clear])",
        "QdScc.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdScc.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdSmi": "Saturating Dual Subtract (If APSR.N == 1 [Minus])",
        "QdSmi.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QdSmi.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QdSpl": "Saturating Dual Subtract (If APSR.N == 0 [Plus])",
        "QdSpl.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QdSpl.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QdSvs": "Saturating Dual Subtract (If APSR.V == 1 [Overflow])",
        "QdSvs.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QdSvs.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QdSvc": "Saturating Dual Subtract (If APSR.V == 0 [No Overflow])",
        "QdSvc.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdSvc.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdShi": "Saturating Dual Subtract (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdShi.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdShi.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdSls": "Saturating Dual Subtract (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdSls.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdSls.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdSge": "Saturating Dual Subtract (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdSge.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdSge.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdSlt": "Saturating Dual Subtract (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdSlt.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdSlt.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdSgt": "Saturating Dual Subtract (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdSgt.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdSgt.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdSle": "Saturating Dual Subtract (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdSle.n": "Saturating Dual Subtract (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdSle.w": "Saturating Dual Subtract (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdSal": "Saturating Dual Subtract (Always)",
        "QdSal.n": "Saturating Dual Subtract (T 16bits encoding) (Always)",
        "QdSal.w": "Saturating Dual Subtract (T/A 32bits encoding) (Always)",
        "QdS.8": "Saturating Dual Subtract .8",
        "QdS.8.n": "Saturating Dual Subtract .8 (T 16bits encoding)",
        "QdS.8.w": "Saturating Dual Subtract .8 (T/A 32bits encoding)",
        "QdS.8eq": "Saturating Dual Subtract .8 (If APSR.Z == 1 [Equal])",
        "QdS.8eq.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QdS.8eq.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QdS.8ne": "Saturating Dual Subtract .8 (If APSR.Z == 0 [Not Equal])",
        "QdS.8ne.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdS.8ne.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdS.8cs": "Saturating Dual Subtract .8 (If APSR.C == 1 [Carry Set])",
        "QdS.8cs.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdS.8cs.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdS.8cc": "Saturating Dual Subtract .8 (If APSR.C == 0 [Carry Clear])",
        "QdS.8cc.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdS.8cc.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdS.8mi": "Saturating Dual Subtract .8 (If APSR.N == 1 [Minus])",
        "QdS.8mi.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QdS.8mi.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QdS.8pl": "Saturating Dual Subtract .8 (If APSR.N == 0 [Plus])",
        "QdS.8pl.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QdS.8pl.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QdS.8vs": "Saturating Dual Subtract .8 (If APSR.V == 1 [Overflow])",
        "QdS.8vs.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QdS.8vs.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QdS.8vc": "Saturating Dual Subtract .8 (If APSR.V == 0 [No Overflow])",
        "QdS.8vc.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdS.8vc.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdS.8hi": "Saturating Dual Subtract .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdS.8hi.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdS.8hi.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdS.8ls": "Saturating Dual Subtract .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdS.8ls.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdS.8ls.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdS.8ge": "Saturating Dual Subtract .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdS.8ge.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdS.8ge.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdS.8lt": "Saturating Dual Subtract .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdS.8lt.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdS.8lt.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdS.8gt": "Saturating Dual Subtract .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdS.8gt.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdS.8gt.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdS.8le": "Saturating Dual Subtract .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdS.8le.n": "Saturating Dual Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdS.8le.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdS.8al": "Saturating Dual Subtract .8 (Always)",
        "QdS.8al.n": "Saturating Dual Subtract .8 (T 16bits encoding) (Always)",
        "QdS.8al.w": "Saturating Dual Subtract .8 (T/A 32bits encoding) (Always)",
        "QdS.16": "Saturating Dual Subtract .16",
        "QdS.16.n": "Saturating Dual Subtract .16 (T 16bits encoding)",
        "QdS.16.w": "Saturating Dual Subtract .16 (T/A 32bits encoding)",
        "QdS.16eq": "Saturating Dual Subtract .16 (If APSR.Z == 1 [Equal])",
        "QdS.16eq.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QdS.16eq.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QdS.16ne": "Saturating Dual Subtract .16 (If APSR.Z == 0 [Not Equal])",
        "QdS.16ne.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdS.16ne.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QdS.16cs": "Saturating Dual Subtract .16 (If APSR.C == 1 [Carry Set])",
        "QdS.16cs.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdS.16cs.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QdS.16cc": "Saturating Dual Subtract .16 (If APSR.C == 0 [Carry Clear])",
        "QdS.16cc.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdS.16cc.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QdS.16mi": "Saturating Dual Subtract .16 (If APSR.N == 1 [Minus])",
        "QdS.16mi.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QdS.16mi.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QdS.16pl": "Saturating Dual Subtract .16 (If APSR.N == 0 [Plus])",
        "QdS.16pl.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QdS.16pl.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QdS.16vs": "Saturating Dual Subtract .16 (If APSR.V == 1 [Overflow])",
        "QdS.16vs.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QdS.16vs.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QdS.16vc": "Saturating Dual Subtract .16 (If APSR.V == 0 [No Overflow])",
        "QdS.16vc.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdS.16vc.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QdS.16hi": "Saturating Dual Subtract .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdS.16hi.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdS.16hi.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QdS.16ls": "Saturating Dual Subtract .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdS.16ls.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdS.16ls.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QdS.16ge": "Saturating Dual Subtract .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdS.16ge.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdS.16ge.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QdS.16lt": "Saturating Dual Subtract .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdS.16lt.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdS.16lt.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QdS.16gt": "Saturating Dual Subtract .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdS.16gt.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdS.16gt.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QdS.16le": "Saturating Dual Subtract .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdS.16le.n": "Saturating Dual Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdS.16le.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QdS.16al": "Saturating Dual Subtract .16 (Always)",
        "QdS.16al.n": "Saturating Dual Subtract .16 (T 16bits encoding) (Always)",
        "QdS.16al.w": "Saturating Dual Subtract .16 (T/A 32bits encoding) (Always)"
      }
    },
    "QASX%{c}%{q}": {
      "description": "Saturating Add and Subtract with Exchange %{q} %{c}",
      "variants": {
        "QASX": "Saturating Add and Subtract with Exchange",
        "QASX.n": "Saturating Add and Subtract with Exchange (T 16bits encoding)",
        "QASX.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding)",
        "QASXeq": "Saturating Add and Subtract with Exchange (If APSR.Z == 1 [Equal])",
        "QASXeq.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QASXeq.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QASXne": "Saturating Add and Subtract with Exchange (If APSR.Z == 0 [Not Equal])",
        "QASXne.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QASXne.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QASXcs": "Saturating Add and Subtract with Exchange (If APSR.C == 1 [Carry Set])",
        "QASXcs.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QASXcs.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QASXcc": "Saturating Add and Subtract with Exchange (If APSR.C == 0 [Carry Clear])",
        "QASXcc.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QASXcc.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QASXmi": "Saturating Add and Subtract with Exchange (If APSR.N == 1 [Minus])",
        "QASXmi.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QASXmi.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QASXpl": "Saturating Add and Subtract with Exchange (If APSR.N == 0 [Plus])",
        "QASXpl.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QASXpl.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QASXvs": "Saturating Add and Subtract with Exchange (If APSR.V == 1 [Overflow])",
        "QASXvs.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QASXvs.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QASXvc": "Saturating Add and Subtract with Exchange (If APSR.V == 0 [No Overflow])",
        "QASXvc.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QASXvc.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QASXhi": "Saturating Add and Subtract with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QASXhi.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QASXhi.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QASXls": "Saturating Add and Subtract with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QASXls.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QASXls.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QASXge": "Saturating Add and Subtract with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QASXge.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QASXge.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QASXlt": "Saturating Add and Subtract with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "QASXlt.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QASXlt.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QASXgt": "Saturating Add and Subtract with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QASXgt.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QASXgt.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QASXle": "Saturating Add and Subtract with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QASXle.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QASXle.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QASXal": "Saturating Add and Subtract with Exchange (Always)",
        "QASXal.n": "Saturating Add and Subtract with Exchange (T 16bits encoding) (Always)",
        "QASXal.w": "Saturating Add and Subtract with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "QSAX%{c}%{q}": {
      "description": "Saturating Subtract and Add with Exchange %{q} %{c}",
      "variants": {
        "QSAX": "Saturating Subtract and Add with Exchange",
        "QSAX.n": "Saturating Subtract and Add with Exchange (T 16bits encoding)",
        "QSAX.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding)",
        "QSAXeq": "Saturating Subtract and Add with Exchange (If APSR.Z == 1 [Equal])",
        "QSAXeq.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "QSAXeq.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "QSAXne": "Saturating Subtract and Add with Exchange (If APSR.Z == 0 [Not Equal])",
        "QSAXne.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QSAXne.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "QSAXcs": "Saturating Subtract and Add with Exchange (If APSR.C == 1 [Carry Set])",
        "QSAXcs.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "QSAXcs.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "QSAXcc": "Saturating Subtract and Add with Exchange (If APSR.C == 0 [Carry Clear])",
        "QSAXcc.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QSAXcc.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "QSAXmi": "Saturating Subtract and Add with Exchange (If APSR.N == 1 [Minus])",
        "QSAXmi.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "QSAXmi.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "QSAXpl": "Saturating Subtract and Add with Exchange (If APSR.N == 0 [Plus])",
        "QSAXpl.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "QSAXpl.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "QSAXvs": "Saturating Subtract and Add with Exchange (If APSR.V == 1 [Overflow])",
        "QSAXvs.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "QSAXvs.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "QSAXvc": "Saturating Subtract and Add with Exchange (If APSR.V == 0 [No Overflow])",
        "QSAXvc.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "QSAXvc.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "QSAXhi": "Saturating Subtract and Add with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QSAXhi.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QSAXhi.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "QSAXls": "Saturating Subtract and Add with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QSAXls.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QSAXls.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "QSAXge": "Saturating Subtract and Add with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QSAXge.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QSAXge.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "QSAXlt": "Saturating Subtract and Add with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "QSAXlt.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QSAXlt.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "QSAXgt": "Saturating Subtract and Add with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QSAXgt.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QSAXgt.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "QSAXle": "Saturating Subtract and Add with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QSAXle.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QSAXle.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "QSAXal": "Saturating Subtract and Add with Exchange (Always)",
        "QSAXal.n": "Saturating Subtract and Add with Exchange (T 16bits encoding) (Always)",
        "QSAXal.w": "Saturating Subtract and Add with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "RBIT%{c}%{q}": {
      "description": "Reverse Bits %{q} %{c}",
      "variants": {
        "RBIT": "Reverse Bits",
        "RBIT.n": "Reverse Bits (T 16bits encoding)",
        "RBIT.w": "Reverse Bits (T/A 32bits encoding)",
        "RBITeq": "Reverse Bits (If APSR.Z == 1 [Equal])",
        "RBITeq.n": "Reverse Bits (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RBITeq.w": "Reverse Bits (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RBITne": "Reverse Bits (If APSR.Z == 0 [Not Equal])",
        "RBITne.n": "Reverse Bits (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RBITne.w": "Reverse Bits (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RBITcs": "Reverse Bits (If APSR.C == 1 [Carry Set])",
        "RBITcs.n": "Reverse Bits (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RBITcs.w": "Reverse Bits (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RBITcc": "Reverse Bits (If APSR.C == 0 [Carry Clear])",
        "RBITcc.n": "Reverse Bits (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RBITcc.w": "Reverse Bits (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RBITmi": "Reverse Bits (If APSR.N == 1 [Minus])",
        "RBITmi.n": "Reverse Bits (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RBITmi.w": "Reverse Bits (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RBITpl": "Reverse Bits (If APSR.N == 0 [Plus])",
        "RBITpl.n": "Reverse Bits (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RBITpl.w": "Reverse Bits (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RBITvs": "Reverse Bits (If APSR.V == 1 [Overflow])",
        "RBITvs.n": "Reverse Bits (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RBITvs.w": "Reverse Bits (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RBITvc": "Reverse Bits (If APSR.V == 0 [No Overflow])",
        "RBITvc.n": "Reverse Bits (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RBITvc.w": "Reverse Bits (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RBIThi": "Reverse Bits (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RBIThi.n": "Reverse Bits (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RBIThi.w": "Reverse Bits (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RBITls": "Reverse Bits (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RBITls.n": "Reverse Bits (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RBITls.w": "Reverse Bits (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RBITge": "Reverse Bits (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RBITge.n": "Reverse Bits (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RBITge.w": "Reverse Bits (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RBITlt": "Reverse Bits (If APSR.N != APSR.V [Signed Lesser Than])",
        "RBITlt.n": "Reverse Bits (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RBITlt.w": "Reverse Bits (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RBITgt": "Reverse Bits (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RBITgt.n": "Reverse Bits (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RBITgt.w": "Reverse Bits (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RBITle": "Reverse Bits (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RBITle.n": "Reverse Bits (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RBITle.w": "Reverse Bits (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RBITal": "Reverse Bits (Always)",
        "RBITal.n": "Reverse Bits (T 16bits encoding) (Always)",
        "RBITal.w": "Reverse Bits (T/A 32bits encoding) (Always)"
      }
    },
    "REV%{c}%{q}": {
      "description": "Byte-Reverse Word %{q} %{c}",
      "variants": {
        "REV": "Byte-Reverse Word",
        "REV.n": "Byte-Reverse Word (T 16bits encoding)",
        "REV.w": "Byte-Reverse Word (T/A 32bits encoding)",
        "REVeq": "Byte-Reverse Word (If APSR.Z == 1 [Equal])",
        "REVeq.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "REVeq.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "REVne": "Byte-Reverse Word (If APSR.Z == 0 [Not Equal])",
        "REVne.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "REVne.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "REVcs": "Byte-Reverse Word (If APSR.C == 1 [Carry Set])",
        "REVcs.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "REVcs.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "REVcc": "Byte-Reverse Word (If APSR.C == 0 [Carry Clear])",
        "REVcc.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "REVcc.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "REVmi": "Byte-Reverse Word (If APSR.N == 1 [Minus])",
        "REVmi.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "REVmi.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "REVpl": "Byte-Reverse Word (If APSR.N == 0 [Plus])",
        "REVpl.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "REVpl.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "REVvs": "Byte-Reverse Word (If APSR.V == 1 [Overflow])",
        "REVvs.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "REVvs.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "REVvc": "Byte-Reverse Word (If APSR.V == 0 [No Overflow])",
        "REVvc.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "REVvc.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "REVhi": "Byte-Reverse Word (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "REVhi.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "REVhi.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "REVls": "Byte-Reverse Word (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "REVls.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "REVls.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "REVge": "Byte-Reverse Word (If APSR.N == APSR.V [Signed Greater or Equal])",
        "REVge.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "REVge.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "REVlt": "Byte-Reverse Word (If APSR.N != APSR.V [Signed Lesser Than])",
        "REVlt.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "REVlt.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "REVgt": "Byte-Reverse Word (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "REVgt.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "REVgt.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "REVle": "Byte-Reverse Word (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "REVle.n": "Byte-Reverse Word (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "REVle.w": "Byte-Reverse Word (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "REVal": "Byte-Reverse Word (Always)",
        "REVal.n": "Byte-Reverse Word (T 16bits encoding) (Always)",
        "REVal.w": "Byte-Reverse Word (T/A 32bits encoding) (Always)"
      }
    },
    "REV16%{c}%{q}": {
      "description": "Byte-Reverse Packed Halfword %{q} %{c}",
      "variants": {
        "REV16": "Byte-Reverse Packed Halfword",
        "REV16.n": "Byte-Reverse Packed Halfword (T 16bits encoding)",
        "REV16.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding)",
        "REV16eq": "Byte-Reverse Packed Halfword (If APSR.Z == 1 [Equal])",
        "REV16eq.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "REV16eq.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "REV16ne": "Byte-Reverse Packed Halfword (If APSR.Z == 0 [Not Equal])",
        "REV16ne.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "REV16ne.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "REV16cs": "Byte-Reverse Packed Halfword (If APSR.C == 1 [Carry Set])",
        "REV16cs.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "REV16cs.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "REV16cc": "Byte-Reverse Packed Halfword (If APSR.C == 0 [Carry Clear])",
        "REV16cc.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "REV16cc.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "REV16mi": "Byte-Reverse Packed Halfword (If APSR.N == 1 [Minus])",
        "REV16mi.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "REV16mi.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "REV16pl": "Byte-Reverse Packed Halfword (If APSR.N == 0 [Plus])",
        "REV16pl.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "REV16pl.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "REV16vs": "Byte-Reverse Packed Halfword (If APSR.V == 1 [Overflow])",
        "REV16vs.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "REV16vs.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "REV16vc": "Byte-Reverse Packed Halfword (If APSR.V == 0 [No Overflow])",
        "REV16vc.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "REV16vc.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "REV16hi": "Byte-Reverse Packed Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "REV16hi.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "REV16hi.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "REV16ls": "Byte-Reverse Packed Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "REV16ls.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "REV16ls.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "REV16ge": "Byte-Reverse Packed Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "REV16ge.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "REV16ge.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "REV16lt": "Byte-Reverse Packed Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "REV16lt.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "REV16lt.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "REV16gt": "Byte-Reverse Packed Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "REV16gt.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "REV16gt.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "REV16le": "Byte-Reverse Packed Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "REV16le.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "REV16le.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "REV16al": "Byte-Reverse Packed Halfword (Always)",
        "REV16al.n": "Byte-Reverse Packed Halfword (T 16bits encoding) (Always)",
        "REV16al.w": "Byte-Reverse Packed Halfword (T/A 32bits encoding) (Always)"
      }
    },
    "REVSH%{c}%{q}": {
      "description": "Byte-Reverse Signed Halfword %{q} %{c}",
      "variants": {
        "REVSH": "Byte-Reverse Signed Halfword",
        "REVSH.n": "Byte-Reverse Signed Halfword (T 16bits encoding)",
        "REVSH.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding)",
        "REVSHeq": "Byte-Reverse Signed Halfword (If APSR.Z == 1 [Equal])",
        "REVSHeq.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "REVSHeq.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "REVSHne": "Byte-Reverse Signed Halfword (If APSR.Z == 0 [Not Equal])",
        "REVSHne.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "REVSHne.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "REVSHcs": "Byte-Reverse Signed Halfword (If APSR.C == 1 [Carry Set])",
        "REVSHcs.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "REVSHcs.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "REVSHcc": "Byte-Reverse Signed Halfword (If APSR.C == 0 [Carry Clear])",
        "REVSHcc.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "REVSHcc.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "REVSHmi": "Byte-Reverse Signed Halfword (If APSR.N == 1 [Minus])",
        "REVSHmi.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "REVSHmi.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "REVSHpl": "Byte-Reverse Signed Halfword (If APSR.N == 0 [Plus])",
        "REVSHpl.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "REVSHpl.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "REVSHvs": "Byte-Reverse Signed Halfword (If APSR.V == 1 [Overflow])",
        "REVSHvs.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "REVSHvs.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "REVSHvc": "Byte-Reverse Signed Halfword (If APSR.V == 0 [No Overflow])",
        "REVSHvc.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "REVSHvc.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "REVSHhi": "Byte-Reverse Signed Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "REVSHhi.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "REVSHhi.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "REVSHls": "Byte-Reverse Signed Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "REVSHls.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "REVSHls.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "REVSHge": "Byte-Reverse Signed Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "REVSHge.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "REVSHge.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "REVSHlt": "Byte-Reverse Signed Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "REVSHlt.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "REVSHlt.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "REVSHgt": "Byte-Reverse Signed Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "REVSHgt.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "REVSHgt.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "REVSHle": "Byte-Reverse Signed Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "REVSHle.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "REVSHle.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "REVSHal": "Byte-Reverse Signed Halfword (Always)",
        "REVSHal.n": "Byte-Reverse Signed Halfword (T 16bits encoding) (Always)",
        "REVSHal.w": "Byte-Reverse Signed Halfword (T/A 32bits encoding) (Always)"
      }
    },
    "RFE%{amode}%{c}%{q}": {
      "description": "Return From Exception %{amode} %{q} %{c}",
      "variants": {
        "RFE": "Return From Exception Increment After",
        "RFE.n": "Return From Exception Increment After (T 16bits encoding)",
        "RFE.w": "Return From Exception Increment After (T/A 32bits encoding)",
        "RFEeq": "Return From Exception Increment After (If APSR.Z == 1 [Equal])",
        "RFEeq.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEeq.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEne": "Return From Exception Increment After (If APSR.Z == 0 [Not Equal])",
        "RFEne.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEne.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEcs": "Return From Exception Increment After (If APSR.C == 1 [Carry Set])",
        "RFEcs.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEcs.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEcc": "Return From Exception Increment After (If APSR.C == 0 [Carry Clear])",
        "RFEcc.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEcc.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEmi": "Return From Exception Increment After (If APSR.N == 1 [Minus])",
        "RFEmi.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RFEmi.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RFEpl": "Return From Exception Increment After (If APSR.N == 0 [Plus])",
        "RFEpl.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RFEpl.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RFEvs": "Return From Exception Increment After (If APSR.V == 1 [Overflow])",
        "RFEvs.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEvs.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEvc": "Return From Exception Increment After (If APSR.V == 0 [No Overflow])",
        "RFEvc.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEvc.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEhi": "Return From Exception Increment After (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEhi.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEhi.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEls": "Return From Exception Increment After (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEls.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEls.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEge": "Return From Exception Increment After (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEge.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEge.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFElt": "Return From Exception Increment After (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFElt.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFElt.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEgt": "Return From Exception Increment After (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEgt.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEgt.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEle": "Return From Exception Increment After (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEle.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEle.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEal": "Return From Exception Increment After (Always)",
        "RFEal.n": "Return From Exception Increment After (T 16bits encoding) (Always)",
        "RFEal.w": "Return From Exception Increment After (T/A 32bits encoding) (Always)",
        "RFEda": "Return From Exception Decrement After",
        "RFEda.n": "Return From Exception Decrement After (T 16bits encoding)",
        "RFEda.w": "Return From Exception Decrement After (T/A 32bits encoding)",
        "RFEdaeq": "Return From Exception Decrement After (If APSR.Z == 1 [Equal])",
        "RFEdaeq.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEdaeq.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEdane": "Return From Exception Decrement After (If APSR.Z == 0 [Not Equal])",
        "RFEdane.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEdane.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEdacs": "Return From Exception Decrement After (If APSR.C == 1 [Carry Set])",
        "RFEdacs.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEdacs.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEdacc": "Return From Exception Decrement After (If APSR.C == 0 [Carry Clear])",
        "RFEdacc.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEdacc.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEdami": "Return From Exception Decrement After (If APSR.N == 1 [Minus])",
        "RFEdami.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RFEdami.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RFEdapl": "Return From Exception Decrement After (If APSR.N == 0 [Plus])",
        "RFEdapl.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RFEdapl.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RFEdavs": "Return From Exception Decrement After (If APSR.V == 1 [Overflow])",
        "RFEdavs.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEdavs.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEdavc": "Return From Exception Decrement After (If APSR.V == 0 [No Overflow])",
        "RFEdavc.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEdavc.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEdahi": "Return From Exception Decrement After (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEdahi.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEdahi.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEdals": "Return From Exception Decrement After (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEdals.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEdals.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEdage": "Return From Exception Decrement After (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEdage.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEdage.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEdalt": "Return From Exception Decrement After (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEdalt.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEdalt.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEdagt": "Return From Exception Decrement After (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEdagt.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEdagt.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEdale": "Return From Exception Decrement After (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEdale.n": "Return From Exception Decrement After (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEdale.w": "Return From Exception Decrement After (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEdaal": "Return From Exception Decrement After (Always)",
        "RFEdaal.n": "Return From Exception Decrement After (T 16bits encoding) (Always)",
        "RFEdaal.w": "Return From Exception Decrement After (T/A 32bits encoding) (Always)",
        "RFEfa": "Return From Exception Full Ascending",
        "RFEfa.n": "Return From Exception Full Ascending (T 16bits encoding)",
        "RFEfa.w": "Return From Exception Full Ascending (T/A 32bits encoding)",
        "RFEfaeq": "Return From Exception Full Ascending (If APSR.Z == 1 [Equal])",
        "RFEfaeq.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEfaeq.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEfane": "Return From Exception Full Ascending (If APSR.Z == 0 [Not Equal])",
        "RFEfane.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEfane.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEfacs": "Return From Exception Full Ascending (If APSR.C == 1 [Carry Set])",
        "RFEfacs.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEfacs.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEfacc": "Return From Exception Full Ascending (If APSR.C == 0 [Carry Clear])",
        "RFEfacc.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEfacc.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEfami": "Return From Exception Full Ascending (If APSR.N == 1 [Minus])",
        "RFEfami.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RFEfami.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RFEfapl": "Return From Exception Full Ascending (If APSR.N == 0 [Plus])",
        "RFEfapl.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RFEfapl.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RFEfavs": "Return From Exception Full Ascending (If APSR.V == 1 [Overflow])",
        "RFEfavs.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEfavs.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEfavc": "Return From Exception Full Ascending (If APSR.V == 0 [No Overflow])",
        "RFEfavc.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEfavc.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEfahi": "Return From Exception Full Ascending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEfahi.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEfahi.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEfals": "Return From Exception Full Ascending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEfals.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEfals.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEfage": "Return From Exception Full Ascending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEfage.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEfage.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEfalt": "Return From Exception Full Ascending (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEfalt.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEfalt.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEfagt": "Return From Exception Full Ascending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEfagt.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEfagt.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEfale": "Return From Exception Full Ascending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEfale.n": "Return From Exception Full Ascending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEfale.w": "Return From Exception Full Ascending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEfaal": "Return From Exception Full Ascending (Always)",
        "RFEfaal.n": "Return From Exception Full Ascending (T 16bits encoding) (Always)",
        "RFEfaal.w": "Return From Exception Full Ascending (T/A 32bits encoding) (Always)",
        "RFEdb": "Return From Exception Decrement Before",
        "RFEdb.n": "Return From Exception Decrement Before (T 16bits encoding)",
        "RFEdb.w": "Return From Exception Decrement Before (T/A 32bits encoding)",
        "RFEdbeq": "Return From Exception Decrement Before (If APSR.Z == 1 [Equal])",
        "RFEdbeq.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEdbeq.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEdbne": "Return From Exception Decrement Before (If APSR.Z == 0 [Not Equal])",
        "RFEdbne.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEdbne.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEdbcs": "Return From Exception Decrement Before (If APSR.C == 1 [Carry Set])",
        "RFEdbcs.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEdbcs.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEdbcc": "Return From Exception Decrement Before (If APSR.C == 0 [Carry Clear])",
        "RFEdbcc.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEdbcc.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEdbmi": "Return From Exception Decrement Before (If APSR.N == 1 [Minus])",
        "RFEdbmi.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RFEdbmi.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RFEdbpl": "Return From Exception Decrement Before (If APSR.N == 0 [Plus])",
        "RFEdbpl.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RFEdbpl.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RFEdbvs": "Return From Exception Decrement Before (If APSR.V == 1 [Overflow])",
        "RFEdbvs.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEdbvs.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEdbvc": "Return From Exception Decrement Before (If APSR.V == 0 [No Overflow])",
        "RFEdbvc.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEdbvc.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEdbhi": "Return From Exception Decrement Before (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEdbhi.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEdbhi.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEdbls": "Return From Exception Decrement Before (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEdbls.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEdbls.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEdbge": "Return From Exception Decrement Before (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEdbge.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEdbge.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEdblt": "Return From Exception Decrement Before (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEdblt.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEdblt.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEdbgt": "Return From Exception Decrement Before (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEdbgt.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEdbgt.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEdble": "Return From Exception Decrement Before (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEdble.n": "Return From Exception Decrement Before (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEdble.w": "Return From Exception Decrement Before (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEdbal": "Return From Exception Decrement Before (Always)",
        "RFEdbal.n": "Return From Exception Decrement Before (T 16bits encoding) (Always)",
        "RFEdbal.w": "Return From Exception Decrement Before (T/A 32bits encoding) (Always)",
        "RFEea": "Return From Exception Empty Ascending",
        "RFEea.n": "Return From Exception Empty Ascending (T 16bits encoding)",
        "RFEea.w": "Return From Exception Empty Ascending (T/A 32bits encoding)",
        "RFEeaeq": "Return From Exception Empty Ascending (If APSR.Z == 1 [Equal])",
        "RFEeaeq.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEeaeq.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEeane": "Return From Exception Empty Ascending (If APSR.Z == 0 [Not Equal])",
        "RFEeane.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEeane.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEeacs": "Return From Exception Empty Ascending (If APSR.C == 1 [Carry Set])",
        "RFEeacs.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEeacs.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEeacc": "Return From Exception Empty Ascending (If APSR.C == 0 [Carry Clear])",
        "RFEeacc.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEeacc.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEeami": "Return From Exception Empty Ascending (If APSR.N == 1 [Minus])",
        "RFEeami.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RFEeami.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RFEeapl": "Return From Exception Empty Ascending (If APSR.N == 0 [Plus])",
        "RFEeapl.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RFEeapl.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RFEeavs": "Return From Exception Empty Ascending (If APSR.V == 1 [Overflow])",
        "RFEeavs.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEeavs.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEeavc": "Return From Exception Empty Ascending (If APSR.V == 0 [No Overflow])",
        "RFEeavc.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEeavc.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEeahi": "Return From Exception Empty Ascending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEeahi.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEeahi.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEeals": "Return From Exception Empty Ascending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEeals.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEeals.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEeage": "Return From Exception Empty Ascending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEeage.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEeage.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEealt": "Return From Exception Empty Ascending (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEealt.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEealt.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEeagt": "Return From Exception Empty Ascending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEeagt.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEeagt.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEeale": "Return From Exception Empty Ascending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEeale.n": "Return From Exception Empty Ascending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEeale.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEeaal": "Return From Exception Empty Ascending (Always)",
        "RFEeaal.n": "Return From Exception Empty Ascending (T 16bits encoding) (Always)",
        "RFEeaal.w": "Return From Exception Empty Ascending (T/A 32bits encoding) (Always)",
        "RFEia": "Return From Exception Increment After",
        "RFEia.n": "Return From Exception Increment After (T 16bits encoding)",
        "RFEia.w": "Return From Exception Increment After (T/A 32bits encoding)",
        "RFEiaeq": "Return From Exception Increment After (If APSR.Z == 1 [Equal])",
        "RFEiaeq.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEiaeq.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEiane": "Return From Exception Increment After (If APSR.Z == 0 [Not Equal])",
        "RFEiane.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEiane.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEiacs": "Return From Exception Increment After (If APSR.C == 1 [Carry Set])",
        "RFEiacs.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEiacs.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEiacc": "Return From Exception Increment After (If APSR.C == 0 [Carry Clear])",
        "RFEiacc.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEiacc.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEiami": "Return From Exception Increment After (If APSR.N == 1 [Minus])",
        "RFEiami.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RFEiami.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RFEiapl": "Return From Exception Increment After (If APSR.N == 0 [Plus])",
        "RFEiapl.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RFEiapl.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RFEiavs": "Return From Exception Increment After (If APSR.V == 1 [Overflow])",
        "RFEiavs.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEiavs.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEiavc": "Return From Exception Increment After (If APSR.V == 0 [No Overflow])",
        "RFEiavc.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEiavc.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEiahi": "Return From Exception Increment After (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEiahi.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEiahi.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEials": "Return From Exception Increment After (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEials.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEials.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEiage": "Return From Exception Increment After (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEiage.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEiage.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEialt": "Return From Exception Increment After (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEialt.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEialt.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEiagt": "Return From Exception Increment After (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEiagt.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEiagt.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEiale": "Return From Exception Increment After (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEiale.n": "Return From Exception Increment After (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEiale.w": "Return From Exception Increment After (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEiaal": "Return From Exception Increment After (Always)",
        "RFEiaal.n": "Return From Exception Increment After (T 16bits encoding) (Always)",
        "RFEiaal.w": "Return From Exception Increment After (T/A 32bits encoding) (Always)",
        "RFEfd": "Return From Exception Full Descending",
        "RFEfd.n": "Return From Exception Full Descending (T 16bits encoding)",
        "RFEfd.w": "Return From Exception Full Descending (T/A 32bits encoding)",
        "RFEfdeq": "Return From Exception Full Descending (If APSR.Z == 1 [Equal])",
        "RFEfdeq.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEfdeq.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEfdne": "Return From Exception Full Descending (If APSR.Z == 0 [Not Equal])",
        "RFEfdne.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEfdne.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEfdcs": "Return From Exception Full Descending (If APSR.C == 1 [Carry Set])",
        "RFEfdcs.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEfdcs.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEfdcc": "Return From Exception Full Descending (If APSR.C == 0 [Carry Clear])",
        "RFEfdcc.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEfdcc.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEfdmi": "Return From Exception Full Descending (If APSR.N == 1 [Minus])",
        "RFEfdmi.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RFEfdmi.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RFEfdpl": "Return From Exception Full Descending (If APSR.N == 0 [Plus])",
        "RFEfdpl.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RFEfdpl.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RFEfdvs": "Return From Exception Full Descending (If APSR.V == 1 [Overflow])",
        "RFEfdvs.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEfdvs.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEfdvc": "Return From Exception Full Descending (If APSR.V == 0 [No Overflow])",
        "RFEfdvc.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEfdvc.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEfdhi": "Return From Exception Full Descending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEfdhi.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEfdhi.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEfdls": "Return From Exception Full Descending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEfdls.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEfdls.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEfdge": "Return From Exception Full Descending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEfdge.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEfdge.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEfdlt": "Return From Exception Full Descending (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEfdlt.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEfdlt.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEfdgt": "Return From Exception Full Descending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEfdgt.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEfdgt.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEfdle": "Return From Exception Full Descending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEfdle.n": "Return From Exception Full Descending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEfdle.w": "Return From Exception Full Descending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEfdal": "Return From Exception Full Descending (Always)",
        "RFEfdal.n": "Return From Exception Full Descending (T 16bits encoding) (Always)",
        "RFEfdal.w": "Return From Exception Full Descending (T/A 32bits encoding) (Always)",
        "RFEib": "Return From Exception Increment Before",
        "RFEib.n": "Return From Exception Increment Before (T 16bits encoding)",
        "RFEib.w": "Return From Exception Increment Before (T/A 32bits encoding)",
        "RFEibeq": "Return From Exception Increment Before (If APSR.Z == 1 [Equal])",
        "RFEibeq.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEibeq.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEibne": "Return From Exception Increment Before (If APSR.Z == 0 [Not Equal])",
        "RFEibne.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEibne.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEibcs": "Return From Exception Increment Before (If APSR.C == 1 [Carry Set])",
        "RFEibcs.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEibcs.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEibcc": "Return From Exception Increment Before (If APSR.C == 0 [Carry Clear])",
        "RFEibcc.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEibcc.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEibmi": "Return From Exception Increment Before (If APSR.N == 1 [Minus])",
        "RFEibmi.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RFEibmi.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RFEibpl": "Return From Exception Increment Before (If APSR.N == 0 [Plus])",
        "RFEibpl.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RFEibpl.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RFEibvs": "Return From Exception Increment Before (If APSR.V == 1 [Overflow])",
        "RFEibvs.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEibvs.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEibvc": "Return From Exception Increment Before (If APSR.V == 0 [No Overflow])",
        "RFEibvc.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEibvc.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEibhi": "Return From Exception Increment Before (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEibhi.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEibhi.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEibls": "Return From Exception Increment Before (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEibls.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEibls.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEibge": "Return From Exception Increment Before (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEibge.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEibge.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEiblt": "Return From Exception Increment Before (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEiblt.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEiblt.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEibgt": "Return From Exception Increment Before (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEibgt.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEibgt.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEible": "Return From Exception Increment Before (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEible.n": "Return From Exception Increment Before (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEible.w": "Return From Exception Increment Before (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEibal": "Return From Exception Increment Before (Always)",
        "RFEibal.n": "Return From Exception Increment Before (T 16bits encoding) (Always)",
        "RFEibal.w": "Return From Exception Increment Before (T/A 32bits encoding) (Always)",
        "RFEed": "Return From Exception Empty Descending",
        "RFEed.n": "Return From Exception Empty Descending (T 16bits encoding)",
        "RFEed.w": "Return From Exception Empty Descending (T/A 32bits encoding)",
        "RFEedeq": "Return From Exception Empty Descending (If APSR.Z == 1 [Equal])",
        "RFEedeq.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEedeq.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RFEedne": "Return From Exception Empty Descending (If APSR.Z == 0 [Not Equal])",
        "RFEedne.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEedne.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RFEedcs": "Return From Exception Empty Descending (If APSR.C == 1 [Carry Set])",
        "RFEedcs.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEedcs.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RFEedcc": "Return From Exception Empty Descending (If APSR.C == 0 [Carry Clear])",
        "RFEedcc.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEedcc.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RFEedmi": "Return From Exception Empty Descending (If APSR.N == 1 [Minus])",
        "RFEedmi.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RFEedmi.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RFEedpl": "Return From Exception Empty Descending (If APSR.N == 0 [Plus])",
        "RFEedpl.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RFEedpl.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RFEedvs": "Return From Exception Empty Descending (If APSR.V == 1 [Overflow])",
        "RFEedvs.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEedvs.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RFEedvc": "Return From Exception Empty Descending (If APSR.V == 0 [No Overflow])",
        "RFEedvc.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEedvc.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RFEedhi": "Return From Exception Empty Descending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEedhi.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEedhi.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RFEedls": "Return From Exception Empty Descending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEedls.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEedls.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RFEedge": "Return From Exception Empty Descending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEedge.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEedge.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RFEedlt": "Return From Exception Empty Descending (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEedlt.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEedlt.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RFEedgt": "Return From Exception Empty Descending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEedgt.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEedgt.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RFEedle": "Return From Exception Empty Descending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEedle.n": "Return From Exception Empty Descending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEedle.w": "Return From Exception Empty Descending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RFEedal": "Return From Exception Empty Descending (Always)",
        "RFEedal.n": "Return From Exception Empty Descending (T 16bits encoding) (Always)",
        "RFEedal.w": "Return From Exception Empty Descending (T/A 32bits encoding) (Always)"
      }
    },
    "ROR%{s}%{c}%{q}": {
      "description": "Rotate Right %{q} %{c} %{s}",
      "variants": {
        "ROR": "Rotate Right",
        "ROR.n": "Rotate Right (T 16bits encoding)",
        "ROR.w": "Rotate Right (T/A 32bits encoding)",
        "ROReq": "Rotate Right (If APSR.Z == 1 [Equal])",
        "ROReq.n": "Rotate Right (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "ROReq.w": "Rotate Right (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RORne": "Rotate Right (If APSR.Z == 0 [Not Equal])",
        "RORne.n": "Rotate Right (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RORne.w": "Rotate Right (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RORcs": "Rotate Right (If APSR.C == 1 [Carry Set])",
        "RORcs.n": "Rotate Right (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RORcs.w": "Rotate Right (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RORcc": "Rotate Right (If APSR.C == 0 [Carry Clear])",
        "RORcc.n": "Rotate Right (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RORcc.w": "Rotate Right (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RORmi": "Rotate Right (If APSR.N == 1 [Minus])",
        "RORmi.n": "Rotate Right (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RORmi.w": "Rotate Right (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RORpl": "Rotate Right (If APSR.N == 0 [Plus])",
        "RORpl.n": "Rotate Right (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RORpl.w": "Rotate Right (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RORvs": "Rotate Right (If APSR.V == 1 [Overflow])",
        "RORvs.n": "Rotate Right (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RORvs.w": "Rotate Right (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RORvc": "Rotate Right (If APSR.V == 0 [No Overflow])",
        "RORvc.n": "Rotate Right (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RORvc.w": "Rotate Right (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RORhi": "Rotate Right (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RORhi.n": "Rotate Right (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RORhi.w": "Rotate Right (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RORls": "Rotate Right (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RORls.n": "Rotate Right (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RORls.w": "Rotate Right (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RORge": "Rotate Right (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RORge.n": "Rotate Right (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RORge.w": "Rotate Right (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RORlt": "Rotate Right (If APSR.N != APSR.V [Signed Lesser Than])",
        "RORlt.n": "Rotate Right (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RORlt.w": "Rotate Right (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RORgt": "Rotate Right (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RORgt.n": "Rotate Right (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RORgt.w": "Rotate Right (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RORle": "Rotate Right (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RORle.n": "Rotate Right (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RORle.w": "Rotate Right (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RORal": "Rotate Right (Always)",
        "RORal.n": "Rotate Right (T 16bits encoding) (Always)",
        "RORal.w": "Rotate Right (T/A 32bits encoding) (Always)",
        "RORs": "Rotate Right (Update APSR)",
        "RORs.n": "Rotate Right (T 16bits encoding) (Update APSR)",
        "RORs.w": "Rotate Right (T/A 32bits encoding) (Update APSR)",
        "RORseq": "Rotate Right (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RORseq.n": "Rotate Right (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RORseq.w": "Rotate Right (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RORsne": "Rotate Right (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RORsne.n": "Rotate Right (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RORsne.w": "Rotate Right (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RORscs": "Rotate Right (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RORscs.n": "Rotate Right (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RORscs.w": "Rotate Right (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RORscc": "Rotate Right (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RORscc.n": "Rotate Right (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RORscc.w": "Rotate Right (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RORsmi": "Rotate Right (If APSR.N == 1 [Minus]) (Update APSR)",
        "RORsmi.n": "Rotate Right (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "RORsmi.w": "Rotate Right (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "RORspl": "Rotate Right (If APSR.N == 0 [Plus]) (Update APSR)",
        "RORspl.n": "Rotate Right (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "RORspl.w": "Rotate Right (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "RORsvs": "Rotate Right (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RORsvs.n": "Rotate Right (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RORsvs.w": "Rotate Right (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RORsvc": "Rotate Right (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RORsvc.n": "Rotate Right (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RORsvc.w": "Rotate Right (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RORshi": "Rotate Right (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RORshi.n": "Rotate Right (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RORshi.w": "Rotate Right (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RORsls": "Rotate Right (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RORsls.n": "Rotate Right (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RORsls.w": "Rotate Right (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RORsge": "Rotate Right (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RORsge.n": "Rotate Right (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RORsge.w": "Rotate Right (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RORslt": "Rotate Right (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RORslt.n": "Rotate Right (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RORslt.w": "Rotate Right (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RORsgt": "Rotate Right (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RORsgt.n": "Rotate Right (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RORsgt.w": "Rotate Right (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RORsle": "Rotate Right (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RORsle.n": "Rotate Right (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RORsle.w": "Rotate Right (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RORsal": "Rotate Right (Always) (Update APSR)",
        "RORsal.n": "Rotate Right (T 16bits encoding) (Always) (Update APSR)",
        "RORsal.w": "Rotate Right (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "RRX%{s}%{c}%{q}": {
      "description": "Rotate Right with Extend %{q} %{c} %{s}",
      "variants": {
        "RRX": "Rotate Right with Extend",
        "RRX.n": "Rotate Right with Extend (T 16bits encoding)",
        "RRX.w": "Rotate Right with Extend (T/A 32bits encoding)",
        "RRXeq": "Rotate Right with Extend (If APSR.Z == 1 [Equal])",
        "RRXeq.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RRXeq.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RRXne": "Rotate Right with Extend (If APSR.Z == 0 [Not Equal])",
        "RRXne.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RRXne.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RRXcs": "Rotate Right with Extend (If APSR.C == 1 [Carry Set])",
        "RRXcs.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RRXcs.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RRXcc": "Rotate Right with Extend (If APSR.C == 0 [Carry Clear])",
        "RRXcc.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RRXcc.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RRXmi": "Rotate Right with Extend (If APSR.N == 1 [Minus])",
        "RRXmi.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RRXmi.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RRXpl": "Rotate Right with Extend (If APSR.N == 0 [Plus])",
        "RRXpl.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RRXpl.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RRXvs": "Rotate Right with Extend (If APSR.V == 1 [Overflow])",
        "RRXvs.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RRXvs.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RRXvc": "Rotate Right with Extend (If APSR.V == 0 [No Overflow])",
        "RRXvc.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RRXvc.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RRXhi": "Rotate Right with Extend (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RRXhi.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RRXhi.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RRXls": "Rotate Right with Extend (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RRXls.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RRXls.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RRXge": "Rotate Right with Extend (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RRXge.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RRXge.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RRXlt": "Rotate Right with Extend (If APSR.N != APSR.V [Signed Lesser Than])",
        "RRXlt.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RRXlt.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RRXgt": "Rotate Right with Extend (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RRXgt.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RRXgt.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RRXle": "Rotate Right with Extend (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RRXle.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RRXle.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RRXal": "Rotate Right with Extend (Always)",
        "RRXal.n": "Rotate Right with Extend (T 16bits encoding) (Always)",
        "RRXal.w": "Rotate Right with Extend (T/A 32bits encoding) (Always)",
        "RRXs": "Rotate Right with Extend (Update APSR)",
        "RRXs.n": "Rotate Right with Extend (T 16bits encoding) (Update APSR)",
        "RRXs.w": "Rotate Right with Extend (T/A 32bits encoding) (Update APSR)",
        "RRXseq": "Rotate Right with Extend (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RRXseq.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RRXseq.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RRXsne": "Rotate Right with Extend (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RRXsne.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RRXsne.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RRXscs": "Rotate Right with Extend (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RRXscs.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RRXscs.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RRXscc": "Rotate Right with Extend (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RRXscc.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RRXscc.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RRXsmi": "Rotate Right with Extend (If APSR.N == 1 [Minus]) (Update APSR)",
        "RRXsmi.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "RRXsmi.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "RRXspl": "Rotate Right with Extend (If APSR.N == 0 [Plus]) (Update APSR)",
        "RRXspl.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "RRXspl.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "RRXsvs": "Rotate Right with Extend (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RRXsvs.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RRXsvs.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RRXsvc": "Rotate Right with Extend (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RRXsvc.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RRXsvc.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RRXshi": "Rotate Right with Extend (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RRXshi.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RRXshi.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RRXsls": "Rotate Right with Extend (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RRXsls.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RRXsls.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RRXsge": "Rotate Right with Extend (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RRXsge.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RRXsge.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RRXslt": "Rotate Right with Extend (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RRXslt.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RRXslt.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RRXsgt": "Rotate Right with Extend (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RRXsgt.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RRXsgt.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RRXsle": "Rotate Right with Extend (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RRXsle.n": "Rotate Right with Extend (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RRXsle.w": "Rotate Right with Extend (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RRXsal": "Rotate Right with Extend (Always) (Update APSR)",
        "RRXsal.n": "Rotate Right with Extend (T 16bits encoding) (Always) (Update APSR)",
        "RRXsal.w": "Rotate Right with Extend (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "RSB%{s}%{c}%{q}": {
      "description": "Reverse Subtract %{q} %{c} %{s}",
      "variants": {
        "RSB": "Reverse Subtract",
        "RSB.n": "Reverse Subtract (T 16bits encoding)",
        "RSB.w": "Reverse Subtract (T/A 32bits encoding)",
        "RSBeq": "Reverse Subtract (If APSR.Z == 1 [Equal])",
        "RSBeq.n": "Reverse Subtract (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RSBeq.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RSBne": "Reverse Subtract (If APSR.Z == 0 [Not Equal])",
        "RSBne.n": "Reverse Subtract (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RSBne.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RSBcs": "Reverse Subtract (If APSR.C == 1 [Carry Set])",
        "RSBcs.n": "Reverse Subtract (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RSBcs.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RSBcc": "Reverse Subtract (If APSR.C == 0 [Carry Clear])",
        "RSBcc.n": "Reverse Subtract (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RSBcc.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RSBmi": "Reverse Subtract (If APSR.N == 1 [Minus])",
        "RSBmi.n": "Reverse Subtract (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RSBmi.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RSBpl": "Reverse Subtract (If APSR.N == 0 [Plus])",
        "RSBpl.n": "Reverse Subtract (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RSBpl.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RSBvs": "Reverse Subtract (If APSR.V == 1 [Overflow])",
        "RSBvs.n": "Reverse Subtract (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RSBvs.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RSBvc": "Reverse Subtract (If APSR.V == 0 [No Overflow])",
        "RSBvc.n": "Reverse Subtract (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RSBvc.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RSBhi": "Reverse Subtract (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RSBhi.n": "Reverse Subtract (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RSBhi.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RSBls": "Reverse Subtract (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RSBls.n": "Reverse Subtract (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RSBls.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RSBge": "Reverse Subtract (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RSBge.n": "Reverse Subtract (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RSBge.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RSBlt": "Reverse Subtract (If APSR.N != APSR.V [Signed Lesser Than])",
        "RSBlt.n": "Reverse Subtract (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RSBlt.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RSBgt": "Reverse Subtract (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RSBgt.n": "Reverse Subtract (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RSBgt.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RSBle": "Reverse Subtract (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RSBle.n": "Reverse Subtract (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RSBle.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RSBal": "Reverse Subtract (Always)",
        "RSBal.n": "Reverse Subtract (T 16bits encoding) (Always)",
        "RSBal.w": "Reverse Subtract (T/A 32bits encoding) (Always)",
        "RSBs": "Reverse Subtract (Update APSR)",
        "RSBs.n": "Reverse Subtract (T 16bits encoding) (Update APSR)",
        "RSBs.w": "Reverse Subtract (T/A 32bits encoding) (Update APSR)",
        "RSBseq": "Reverse Subtract (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RSBseq.n": "Reverse Subtract (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RSBseq.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RSBsne": "Reverse Subtract (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RSBsne.n": "Reverse Subtract (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RSBsne.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RSBscs": "Reverse Subtract (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RSBscs.n": "Reverse Subtract (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RSBscs.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RSBscc": "Reverse Subtract (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RSBscc.n": "Reverse Subtract (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RSBscc.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RSBsmi": "Reverse Subtract (If APSR.N == 1 [Minus]) (Update APSR)",
        "RSBsmi.n": "Reverse Subtract (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "RSBsmi.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "RSBspl": "Reverse Subtract (If APSR.N == 0 [Plus]) (Update APSR)",
        "RSBspl.n": "Reverse Subtract (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "RSBspl.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "RSBsvs": "Reverse Subtract (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RSBsvs.n": "Reverse Subtract (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RSBsvs.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RSBsvc": "Reverse Subtract (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RSBsvc.n": "Reverse Subtract (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RSBsvc.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RSBshi": "Reverse Subtract (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RSBshi.n": "Reverse Subtract (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RSBshi.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RSBsls": "Reverse Subtract (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RSBsls.n": "Reverse Subtract (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RSBsls.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RSBsge": "Reverse Subtract (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RSBsge.n": "Reverse Subtract (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RSBsge.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RSBslt": "Reverse Subtract (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RSBslt.n": "Reverse Subtract (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RSBslt.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RSBsgt": "Reverse Subtract (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RSBsgt.n": "Reverse Subtract (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RSBsgt.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RSBsle": "Reverse Subtract (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RSBsle.n": "Reverse Subtract (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RSBsle.w": "Reverse Subtract (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RSBsal": "Reverse Subtract (Always) (Update APSR)",
        "RSBsal.n": "Reverse Subtract (T 16bits encoding) (Always) (Update APSR)",
        "RSBsal.w": "Reverse Subtract (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "RSC%{s}%{c}%{q}": {
      "description": "Reverse Subtract with Carry %{q} %{c} %{s}",
      "variants": {
        "RSC": "Reverse Subtract with Carry",
        "RSC.n": "Reverse Subtract with Carry (T 16bits encoding)",
        "RSC.w": "Reverse Subtract with Carry (T/A 32bits encoding)",
        "RSCeq": "Reverse Subtract with Carry (If APSR.Z == 1 [Equal])",
        "RSCeq.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "RSCeq.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "RSCne": "Reverse Subtract with Carry (If APSR.Z == 0 [Not Equal])",
        "RSCne.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RSCne.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "RSCcs": "Reverse Subtract with Carry (If APSR.C == 1 [Carry Set])",
        "RSCcs.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "RSCcs.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "RSCcc": "Reverse Subtract with Carry (If APSR.C == 0 [Carry Clear])",
        "RSCcc.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RSCcc.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "RSCmi": "Reverse Subtract with Carry (If APSR.N == 1 [Minus])",
        "RSCmi.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "RSCmi.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "RSCpl": "Reverse Subtract with Carry (If APSR.N == 0 [Plus])",
        "RSCpl.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "RSCpl.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "RSCvs": "Reverse Subtract with Carry (If APSR.V == 1 [Overflow])",
        "RSCvs.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "RSCvs.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "RSCvc": "Reverse Subtract with Carry (If APSR.V == 0 [No Overflow])",
        "RSCvc.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "RSCvc.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "RSChi": "Reverse Subtract with Carry (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RSChi.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RSChi.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "RSCls": "Reverse Subtract with Carry (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RSCls.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RSCls.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "RSCge": "Reverse Subtract with Carry (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RSCge.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RSCge.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "RSClt": "Reverse Subtract with Carry (If APSR.N != APSR.V [Signed Lesser Than])",
        "RSClt.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RSClt.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "RSCgt": "Reverse Subtract with Carry (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RSCgt.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RSCgt.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "RSCle": "Reverse Subtract with Carry (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RSCle.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RSCle.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "RSCal": "Reverse Subtract with Carry (Always)",
        "RSCal.n": "Reverse Subtract with Carry (T 16bits encoding) (Always)",
        "RSCal.w": "Reverse Subtract with Carry (T/A 32bits encoding) (Always)",
        "RSCs": "Reverse Subtract with Carry (Update APSR)",
        "RSCs.n": "Reverse Subtract with Carry (T 16bits encoding) (Update APSR)",
        "RSCs.w": "Reverse Subtract with Carry (T/A 32bits encoding) (Update APSR)",
        "RSCseq": "Reverse Subtract with Carry (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RSCseq.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RSCseq.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "RSCsne": "Reverse Subtract with Carry (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RSCsne.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RSCsne.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "RSCscs": "Reverse Subtract with Carry (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RSCscs.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RSCscs.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "RSCscc": "Reverse Subtract with Carry (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RSCscc.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RSCscc.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "RSCsmi": "Reverse Subtract with Carry (If APSR.N == 1 [Minus]) (Update APSR)",
        "RSCsmi.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "RSCsmi.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "RSCspl": "Reverse Subtract with Carry (If APSR.N == 0 [Plus]) (Update APSR)",
        "RSCspl.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "RSCspl.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "RSCsvs": "Reverse Subtract with Carry (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RSCsvs.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RSCsvs.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "RSCsvc": "Reverse Subtract with Carry (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RSCsvc.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RSCsvc.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "RSCshi": "Reverse Subtract with Carry (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RSCshi.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RSCshi.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "RSCsls": "Reverse Subtract with Carry (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RSCsls.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RSCsls.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "RSCsge": "Reverse Subtract with Carry (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RSCsge.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RSCsge.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "RSCslt": "Reverse Subtract with Carry (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RSCslt.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RSCslt.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "RSCsgt": "Reverse Subtract with Carry (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RSCsgt.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RSCsgt.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "RSCsle": "Reverse Subtract with Carry (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RSCsle.n": "Reverse Subtract with Carry (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RSCsle.w": "Reverse Subtract with Carry (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "RSCsal": "Reverse Subtract with Carry (Always) (Update APSR)",
        "RSCsal.n": "Reverse Subtract with Carry (T 16bits encoding) (Always) (Update APSR)",
        "RSCsal.w": "Reverse Subtract with Carry (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "S%{operations}%{bsize}%{c}%{q}": {
      "description": "Signed %{operations} %{bsize} %{q} %{c}",
      "variants": {
        "SA": "Signed Add",
        "SA.n": "Signed Add (T 16bits encoding)",
        "SA.w": "Signed Add (T/A 32bits encoding)",
        "SAeq": "Signed Add (If APSR.Z == 1 [Equal])",
        "SAeq.n": "Signed Add (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SAeq.w": "Signed Add (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SAne": "Signed Add (If APSR.Z == 0 [Not Equal])",
        "SAne.n": "Signed Add (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SAne.w": "Signed Add (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SAcs": "Signed Add (If APSR.C == 1 [Carry Set])",
        "SAcs.n": "Signed Add (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SAcs.w": "Signed Add (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SAcc": "Signed Add (If APSR.C == 0 [Carry Clear])",
        "SAcc.n": "Signed Add (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SAcc.w": "Signed Add (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SAmi": "Signed Add (If APSR.N == 1 [Minus])",
        "SAmi.n": "Signed Add (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SAmi.w": "Signed Add (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SApl": "Signed Add (If APSR.N == 0 [Plus])",
        "SApl.n": "Signed Add (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SApl.w": "Signed Add (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SAvs": "Signed Add (If APSR.V == 1 [Overflow])",
        "SAvs.n": "Signed Add (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SAvs.w": "Signed Add (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SAvc": "Signed Add (If APSR.V == 0 [No Overflow])",
        "SAvc.n": "Signed Add (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SAvc.w": "Signed Add (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SAhi": "Signed Add (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SAhi.n": "Signed Add (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SAhi.w": "Signed Add (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SAls": "Signed Add (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SAls.n": "Signed Add (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SAls.w": "Signed Add (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SAge": "Signed Add (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SAge.n": "Signed Add (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SAge.w": "Signed Add (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SAlt": "Signed Add (If APSR.N != APSR.V [Signed Lesser Than])",
        "SAlt.n": "Signed Add (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SAlt.w": "Signed Add (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SAgt": "Signed Add (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SAgt.n": "Signed Add (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SAgt.w": "Signed Add (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SAle": "Signed Add (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SAle.n": "Signed Add (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SAle.w": "Signed Add (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SAal": "Signed Add (Always)",
        "SAal.n": "Signed Add (T 16bits encoding) (Always)",
        "SAal.w": "Signed Add (T/A 32bits encoding) (Always)",
        "SA.8": "Signed Add .8",
        "SA.8.n": "Signed Add .8 (T 16bits encoding)",
        "SA.8.w": "Signed Add .8 (T/A 32bits encoding)",
        "SA.8eq": "Signed Add .8 (If APSR.Z == 1 [Equal])",
        "SA.8eq.n": "Signed Add .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SA.8eq.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SA.8ne": "Signed Add .8 (If APSR.Z == 0 [Not Equal])",
        "SA.8ne.n": "Signed Add .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SA.8ne.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SA.8cs": "Signed Add .8 (If APSR.C == 1 [Carry Set])",
        "SA.8cs.n": "Signed Add .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SA.8cs.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SA.8cc": "Signed Add .8 (If APSR.C == 0 [Carry Clear])",
        "SA.8cc.n": "Signed Add .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SA.8cc.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SA.8mi": "Signed Add .8 (If APSR.N == 1 [Minus])",
        "SA.8mi.n": "Signed Add .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SA.8mi.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SA.8pl": "Signed Add .8 (If APSR.N == 0 [Plus])",
        "SA.8pl.n": "Signed Add .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SA.8pl.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SA.8vs": "Signed Add .8 (If APSR.V == 1 [Overflow])",
        "SA.8vs.n": "Signed Add .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SA.8vs.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SA.8vc": "Signed Add .8 (If APSR.V == 0 [No Overflow])",
        "SA.8vc.n": "Signed Add .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SA.8vc.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SA.8hi": "Signed Add .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SA.8hi.n": "Signed Add .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SA.8hi.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SA.8ls": "Signed Add .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SA.8ls.n": "Signed Add .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SA.8ls.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SA.8ge": "Signed Add .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SA.8ge.n": "Signed Add .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SA.8ge.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SA.8lt": "Signed Add .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SA.8lt.n": "Signed Add .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SA.8lt.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SA.8gt": "Signed Add .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SA.8gt.n": "Signed Add .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SA.8gt.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SA.8le": "Signed Add .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SA.8le.n": "Signed Add .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SA.8le.w": "Signed Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SA.8al": "Signed Add .8 (Always)",
        "SA.8al.n": "Signed Add .8 (T 16bits encoding) (Always)",
        "SA.8al.w": "Signed Add .8 (T/A 32bits encoding) (Always)",
        "SA.16": "Signed Add .16",
        "SA.16.n": "Signed Add .16 (T 16bits encoding)",
        "SA.16.w": "Signed Add .16 (T/A 32bits encoding)",
        "SA.16eq": "Signed Add .16 (If APSR.Z == 1 [Equal])",
        "SA.16eq.n": "Signed Add .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SA.16eq.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SA.16ne": "Signed Add .16 (If APSR.Z == 0 [Not Equal])",
        "SA.16ne.n": "Signed Add .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SA.16ne.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SA.16cs": "Signed Add .16 (If APSR.C == 1 [Carry Set])",
        "SA.16cs.n": "Signed Add .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SA.16cs.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SA.16cc": "Signed Add .16 (If APSR.C == 0 [Carry Clear])",
        "SA.16cc.n": "Signed Add .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SA.16cc.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SA.16mi": "Signed Add .16 (If APSR.N == 1 [Minus])",
        "SA.16mi.n": "Signed Add .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SA.16mi.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SA.16pl": "Signed Add .16 (If APSR.N == 0 [Plus])",
        "SA.16pl.n": "Signed Add .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SA.16pl.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SA.16vs": "Signed Add .16 (If APSR.V == 1 [Overflow])",
        "SA.16vs.n": "Signed Add .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SA.16vs.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SA.16vc": "Signed Add .16 (If APSR.V == 0 [No Overflow])",
        "SA.16vc.n": "Signed Add .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SA.16vc.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SA.16hi": "Signed Add .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SA.16hi.n": "Signed Add .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SA.16hi.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SA.16ls": "Signed Add .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SA.16ls.n": "Signed Add .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SA.16ls.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SA.16ge": "Signed Add .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SA.16ge.n": "Signed Add .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SA.16ge.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SA.16lt": "Signed Add .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SA.16lt.n": "Signed Add .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SA.16lt.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SA.16gt": "Signed Add .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SA.16gt.n": "Signed Add .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SA.16gt.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SA.16le": "Signed Add .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SA.16le.n": "Signed Add .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SA.16le.w": "Signed Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SA.16al": "Signed Add .16 (Always)",
        "SA.16al.n": "Signed Add .16 (T 16bits encoding) (Always)",
        "SA.16al.w": "Signed Add .16 (T/A 32bits encoding) (Always)",
        "SS": "Signed Subtract",
        "SS.n": "Signed Subtract (T 16bits encoding)",
        "SS.w": "Signed Subtract (T/A 32bits encoding)",
        "SSeq": "Signed Subtract (If APSR.Z == 1 [Equal])",
        "SSeq.n": "Signed Subtract (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SSeq.w": "Signed Subtract (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SSne": "Signed Subtract (If APSR.Z == 0 [Not Equal])",
        "SSne.n": "Signed Subtract (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SSne.w": "Signed Subtract (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SScs": "Signed Subtract (If APSR.C == 1 [Carry Set])",
        "SScs.n": "Signed Subtract (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SScs.w": "Signed Subtract (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SScc": "Signed Subtract (If APSR.C == 0 [Carry Clear])",
        "SScc.n": "Signed Subtract (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SScc.w": "Signed Subtract (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SSmi": "Signed Subtract (If APSR.N == 1 [Minus])",
        "SSmi.n": "Signed Subtract (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SSmi.w": "Signed Subtract (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SSpl": "Signed Subtract (If APSR.N == 0 [Plus])",
        "SSpl.n": "Signed Subtract (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SSpl.w": "Signed Subtract (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SSvs": "Signed Subtract (If APSR.V == 1 [Overflow])",
        "SSvs.n": "Signed Subtract (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SSvs.w": "Signed Subtract (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SSvc": "Signed Subtract (If APSR.V == 0 [No Overflow])",
        "SSvc.n": "Signed Subtract (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SSvc.w": "Signed Subtract (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SShi": "Signed Subtract (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SShi.n": "Signed Subtract (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SShi.w": "Signed Subtract (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSls": "Signed Subtract (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSls.n": "Signed Subtract (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSls.w": "Signed Subtract (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSge": "Signed Subtract (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSge.n": "Signed Subtract (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSge.w": "Signed Subtract (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSlt": "Signed Subtract (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSlt.n": "Signed Subtract (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSlt.w": "Signed Subtract (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSgt": "Signed Subtract (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSgt.n": "Signed Subtract (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSgt.w": "Signed Subtract (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSle": "Signed Subtract (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSle.n": "Signed Subtract (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSle.w": "Signed Subtract (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSal": "Signed Subtract (Always)",
        "SSal.n": "Signed Subtract (T 16bits encoding) (Always)",
        "SSal.w": "Signed Subtract (T/A 32bits encoding) (Always)",
        "SS.8": "Signed Subtract .8",
        "SS.8.n": "Signed Subtract .8 (T 16bits encoding)",
        "SS.8.w": "Signed Subtract .8 (T/A 32bits encoding)",
        "SS.8eq": "Signed Subtract .8 (If APSR.Z == 1 [Equal])",
        "SS.8eq.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SS.8eq.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SS.8ne": "Signed Subtract .8 (If APSR.Z == 0 [Not Equal])",
        "SS.8ne.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SS.8ne.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SS.8cs": "Signed Subtract .8 (If APSR.C == 1 [Carry Set])",
        "SS.8cs.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SS.8cs.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SS.8cc": "Signed Subtract .8 (If APSR.C == 0 [Carry Clear])",
        "SS.8cc.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SS.8cc.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SS.8mi": "Signed Subtract .8 (If APSR.N == 1 [Minus])",
        "SS.8mi.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SS.8mi.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SS.8pl": "Signed Subtract .8 (If APSR.N == 0 [Plus])",
        "SS.8pl.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SS.8pl.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SS.8vs": "Signed Subtract .8 (If APSR.V == 1 [Overflow])",
        "SS.8vs.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SS.8vs.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SS.8vc": "Signed Subtract .8 (If APSR.V == 0 [No Overflow])",
        "SS.8vc.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SS.8vc.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SS.8hi": "Signed Subtract .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SS.8hi.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SS.8hi.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SS.8ls": "Signed Subtract .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SS.8ls.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SS.8ls.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SS.8ge": "Signed Subtract .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SS.8ge.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SS.8ge.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SS.8lt": "Signed Subtract .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SS.8lt.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SS.8lt.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SS.8gt": "Signed Subtract .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SS.8gt.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SS.8gt.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SS.8le": "Signed Subtract .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SS.8le.n": "Signed Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SS.8le.w": "Signed Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SS.8al": "Signed Subtract .8 (Always)",
        "SS.8al.n": "Signed Subtract .8 (T 16bits encoding) (Always)",
        "SS.8al.w": "Signed Subtract .8 (T/A 32bits encoding) (Always)",
        "SS.16": "Signed Subtract .16",
        "SS.16.n": "Signed Subtract .16 (T 16bits encoding)",
        "SS.16.w": "Signed Subtract .16 (T/A 32bits encoding)",
        "SS.16eq": "Signed Subtract .16 (If APSR.Z == 1 [Equal])",
        "SS.16eq.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SS.16eq.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SS.16ne": "Signed Subtract .16 (If APSR.Z == 0 [Not Equal])",
        "SS.16ne.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SS.16ne.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SS.16cs": "Signed Subtract .16 (If APSR.C == 1 [Carry Set])",
        "SS.16cs.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SS.16cs.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SS.16cc": "Signed Subtract .16 (If APSR.C == 0 [Carry Clear])",
        "SS.16cc.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SS.16cc.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SS.16mi": "Signed Subtract .16 (If APSR.N == 1 [Minus])",
        "SS.16mi.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SS.16mi.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SS.16pl": "Signed Subtract .16 (If APSR.N == 0 [Plus])",
        "SS.16pl.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SS.16pl.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SS.16vs": "Signed Subtract .16 (If APSR.V == 1 [Overflow])",
        "SS.16vs.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SS.16vs.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SS.16vc": "Signed Subtract .16 (If APSR.V == 0 [No Overflow])",
        "SS.16vc.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SS.16vc.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SS.16hi": "Signed Subtract .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SS.16hi.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SS.16hi.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SS.16ls": "Signed Subtract .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SS.16ls.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SS.16ls.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SS.16ge": "Signed Subtract .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SS.16ge.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SS.16ge.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SS.16lt": "Signed Subtract .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SS.16lt.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SS.16lt.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SS.16gt": "Signed Subtract .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SS.16gt.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SS.16gt.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SS.16le": "Signed Subtract .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SS.16le.n": "Signed Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SS.16le.w": "Signed Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SS.16al": "Signed Subtract .16 (Always)",
        "SS.16al.n": "Signed Subtract .16 (T 16bits encoding) (Always)",
        "SS.16al.w": "Signed Subtract .16 (T/A 32bits encoding) (Always)"
      }
    },
    "SASX%{c}%{q}": {
      "description": "Signed Add and Subtract with Exchange %{q} %{c}",
      "variants": {
        "SASX": "Signed Add and Subtract with Exchange",
        "SASX.n": "Signed Add and Subtract with Exchange (T 16bits encoding)",
        "SASX.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding)",
        "SASXeq": "Signed Add and Subtract with Exchange (If APSR.Z == 1 [Equal])",
        "SASXeq.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SASXeq.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SASXne": "Signed Add and Subtract with Exchange (If APSR.Z == 0 [Not Equal])",
        "SASXne.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SASXne.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SASXcs": "Signed Add and Subtract with Exchange (If APSR.C == 1 [Carry Set])",
        "SASXcs.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SASXcs.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SASXcc": "Signed Add and Subtract with Exchange (If APSR.C == 0 [Carry Clear])",
        "SASXcc.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SASXcc.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SASXmi": "Signed Add and Subtract with Exchange (If APSR.N == 1 [Minus])",
        "SASXmi.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SASXmi.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SASXpl": "Signed Add and Subtract with Exchange (If APSR.N == 0 [Plus])",
        "SASXpl.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SASXpl.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SASXvs": "Signed Add and Subtract with Exchange (If APSR.V == 1 [Overflow])",
        "SASXvs.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SASXvs.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SASXvc": "Signed Add and Subtract with Exchange (If APSR.V == 0 [No Overflow])",
        "SASXvc.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SASXvc.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SASXhi": "Signed Add and Subtract with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SASXhi.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SASXhi.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SASXls": "Signed Add and Subtract with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SASXls.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SASXls.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SASXge": "Signed Add and Subtract with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SASXge.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SASXge.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SASXlt": "Signed Add and Subtract with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "SASXlt.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SASXlt.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SASXgt": "Signed Add and Subtract with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SASXgt.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SASXgt.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SASXle": "Signed Add and Subtract with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SASXle.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SASXle.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SASXal": "Signed Add and Subtract with Exchange (Always)",
        "SASXal.n": "Signed Add and Subtract with Exchange (T 16bits encoding) (Always)",
        "SASXal.w": "Signed Add and Subtract with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "SBC%{c}%{q}": {
      "description": "Subtract with Carry %{q} %{c}",
      "variants": {
        "SBC": "Subtract with Carry",
        "SBC.n": "Subtract with Carry (T 16bits encoding)",
        "SBC.w": "Subtract with Carry (T/A 32bits encoding)",
        "SBCeq": "Subtract with Carry (If APSR.Z == 1 [Equal])",
        "SBCeq.n": "Subtract with Carry (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SBCeq.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SBCne": "Subtract with Carry (If APSR.Z == 0 [Not Equal])",
        "SBCne.n": "Subtract with Carry (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SBCne.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SBCcs": "Subtract with Carry (If APSR.C == 1 [Carry Set])",
        "SBCcs.n": "Subtract with Carry (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SBCcs.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SBCcc": "Subtract with Carry (If APSR.C == 0 [Carry Clear])",
        "SBCcc.n": "Subtract with Carry (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SBCcc.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SBCmi": "Subtract with Carry (If APSR.N == 1 [Minus])",
        "SBCmi.n": "Subtract with Carry (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SBCmi.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SBCpl": "Subtract with Carry (If APSR.N == 0 [Plus])",
        "SBCpl.n": "Subtract with Carry (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SBCpl.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SBCvs": "Subtract with Carry (If APSR.V == 1 [Overflow])",
        "SBCvs.n": "Subtract with Carry (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SBCvs.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SBCvc": "Subtract with Carry (If APSR.V == 0 [No Overflow])",
        "SBCvc.n": "Subtract with Carry (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SBCvc.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SBChi": "Subtract with Carry (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SBChi.n": "Subtract with Carry (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SBChi.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SBCls": "Subtract with Carry (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SBCls.n": "Subtract with Carry (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SBCls.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SBCge": "Subtract with Carry (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SBCge.n": "Subtract with Carry (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SBCge.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SBClt": "Subtract with Carry (If APSR.N != APSR.V [Signed Lesser Than])",
        "SBClt.n": "Subtract with Carry (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SBClt.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SBCgt": "Subtract with Carry (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SBCgt.n": "Subtract with Carry (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SBCgt.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SBCle": "Subtract with Carry (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SBCle.n": "Subtract with Carry (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SBCle.w": "Subtract with Carry (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SBCal": "Subtract with Carry (Always)",
        "SBCal.n": "Subtract with Carry (T 16bits encoding) (Always)",
        "SBCal.w": "Subtract with Carry (T/A 32bits encoding) (Always)"
      }
    },
    "SBFX%{c}%{q}": {
      "description": "Signed Bit Field Extract %{q} %{c}",
      "variants": {
        "SBFX": "Signed Bit Field Extract",
        "SBFX.n": "Signed Bit Field Extract (T 16bits encoding)",
        "SBFX.w": "Signed Bit Field Extract (T/A 32bits encoding)",
        "SBFXeq": "Signed Bit Field Extract (If APSR.Z == 1 [Equal])",
        "SBFXeq.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SBFXeq.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SBFXne": "Signed Bit Field Extract (If APSR.Z == 0 [Not Equal])",
        "SBFXne.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SBFXne.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SBFXcs": "Signed Bit Field Extract (If APSR.C == 1 [Carry Set])",
        "SBFXcs.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SBFXcs.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SBFXcc": "Signed Bit Field Extract (If APSR.C == 0 [Carry Clear])",
        "SBFXcc.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SBFXcc.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SBFXmi": "Signed Bit Field Extract (If APSR.N == 1 [Minus])",
        "SBFXmi.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SBFXmi.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SBFXpl": "Signed Bit Field Extract (If APSR.N == 0 [Plus])",
        "SBFXpl.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SBFXpl.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SBFXvs": "Signed Bit Field Extract (If APSR.V == 1 [Overflow])",
        "SBFXvs.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SBFXvs.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SBFXvc": "Signed Bit Field Extract (If APSR.V == 0 [No Overflow])",
        "SBFXvc.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SBFXvc.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SBFXhi": "Signed Bit Field Extract (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SBFXhi.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SBFXhi.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SBFXls": "Signed Bit Field Extract (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SBFXls.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SBFXls.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SBFXge": "Signed Bit Field Extract (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SBFXge.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SBFXge.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SBFXlt": "Signed Bit Field Extract (If APSR.N != APSR.V [Signed Lesser Than])",
        "SBFXlt.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SBFXlt.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SBFXgt": "Signed Bit Field Extract (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SBFXgt.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SBFXgt.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SBFXle": "Signed Bit Field Extract (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SBFXle.n": "Signed Bit Field Extract (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SBFXle.w": "Signed Bit Field Extract (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SBFXal": "Signed Bit Field Extract (Always)",
        "SBFXal.n": "Signed Bit Field Extract (T 16bits encoding) (Always)",
        "SBFXal.w": "Signed Bit Field Extract (T/A 32bits encoding) (Always)"
      }
    },
    "SDIV%{c}%{q}": {
      "description": "Signed Divide %{q} %{c}",
      "variants": {
        "SDIV": "Signed Divide",
        "SDIV.n": "Signed Divide (T 16bits encoding)",
        "SDIV.w": "Signed Divide (T/A 32bits encoding)",
        "SDIVeq": "Signed Divide (If APSR.Z == 1 [Equal])",
        "SDIVeq.n": "Signed Divide (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SDIVeq.w": "Signed Divide (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SDIVne": "Signed Divide (If APSR.Z == 0 [Not Equal])",
        "SDIVne.n": "Signed Divide (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SDIVne.w": "Signed Divide (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SDIVcs": "Signed Divide (If APSR.C == 1 [Carry Set])",
        "SDIVcs.n": "Signed Divide (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SDIVcs.w": "Signed Divide (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SDIVcc": "Signed Divide (If APSR.C == 0 [Carry Clear])",
        "SDIVcc.n": "Signed Divide (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SDIVcc.w": "Signed Divide (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SDIVmi": "Signed Divide (If APSR.N == 1 [Minus])",
        "SDIVmi.n": "Signed Divide (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SDIVmi.w": "Signed Divide (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SDIVpl": "Signed Divide (If APSR.N == 0 [Plus])",
        "SDIVpl.n": "Signed Divide (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SDIVpl.w": "Signed Divide (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SDIVvs": "Signed Divide (If APSR.V == 1 [Overflow])",
        "SDIVvs.n": "Signed Divide (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SDIVvs.w": "Signed Divide (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SDIVvc": "Signed Divide (If APSR.V == 0 [No Overflow])",
        "SDIVvc.n": "Signed Divide (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SDIVvc.w": "Signed Divide (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SDIVhi": "Signed Divide (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SDIVhi.n": "Signed Divide (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SDIVhi.w": "Signed Divide (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SDIVls": "Signed Divide (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SDIVls.n": "Signed Divide (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SDIVls.w": "Signed Divide (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SDIVge": "Signed Divide (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SDIVge.n": "Signed Divide (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SDIVge.w": "Signed Divide (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SDIVlt": "Signed Divide (If APSR.N != APSR.V [Signed Lesser Than])",
        "SDIVlt.n": "Signed Divide (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SDIVlt.w": "Signed Divide (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SDIVgt": "Signed Divide (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SDIVgt.n": "Signed Divide (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SDIVgt.w": "Signed Divide (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SDIVle": "Signed Divide (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SDIVle.n": "Signed Divide (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SDIVle.w": "Signed Divide (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SDIVal": "Signed Divide (Always)",
        "SDIVal.n": "Signed Divide (T 16bits encoding) (Always)",
        "SDIVal.w": "Signed Divide (T/A 32bits encoding) (Always)"
      }
    },
    "SEL%{c}%{q}": {
      "description": "Select Bytes %{q} %{c}",
      "variants": {
        "SEL": "Select Bytes",
        "SEL.n": "Select Bytes (T 16bits encoding)",
        "SEL.w": "Select Bytes (T/A 32bits encoding)",
        "SELeq": "Select Bytes (If APSR.Z == 1 [Equal])",
        "SELeq.n": "Select Bytes (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SELeq.w": "Select Bytes (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SELne": "Select Bytes (If APSR.Z == 0 [Not Equal])",
        "SELne.n": "Select Bytes (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SELne.w": "Select Bytes (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SELcs": "Select Bytes (If APSR.C == 1 [Carry Set])",
        "SELcs.n": "Select Bytes (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SELcs.w": "Select Bytes (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SELcc": "Select Bytes (If APSR.C == 0 [Carry Clear])",
        "SELcc.n": "Select Bytes (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SELcc.w": "Select Bytes (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SELmi": "Select Bytes (If APSR.N == 1 [Minus])",
        "SELmi.n": "Select Bytes (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SELmi.w": "Select Bytes (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SELpl": "Select Bytes (If APSR.N == 0 [Plus])",
        "SELpl.n": "Select Bytes (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SELpl.w": "Select Bytes (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SELvs": "Select Bytes (If APSR.V == 1 [Overflow])",
        "SELvs.n": "Select Bytes (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SELvs.w": "Select Bytes (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SELvc": "Select Bytes (If APSR.V == 0 [No Overflow])",
        "SELvc.n": "Select Bytes (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SELvc.w": "Select Bytes (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SELhi": "Select Bytes (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SELhi.n": "Select Bytes (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SELhi.w": "Select Bytes (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SELls": "Select Bytes (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SELls.n": "Select Bytes (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SELls.w": "Select Bytes (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SELge": "Select Bytes (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SELge.n": "Select Bytes (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SELge.w": "Select Bytes (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SELlt": "Select Bytes (If APSR.N != APSR.V [Signed Lesser Than])",
        "SELlt.n": "Select Bytes (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SELlt.w": "Select Bytes (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SELgt": "Select Bytes (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SELgt.n": "Select Bytes (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SELgt.w": "Select Bytes (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SELle": "Select Bytes (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SELle.n": "Select Bytes (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SELle.w": "Select Bytes (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SELal": "Select Bytes (Always)",
        "SELal.n": "Select Bytes (T 16bits encoding) (Always)",
        "SELal.w": "Select Bytes (T/A 32bits encoding) (Always)"
      }
    },
    "SETEND%{c}%{q}": {
      "description": "Set Endianness %{q} %{c}",
      "variants": {
        "SETEND": "Set Endianness",
        "SETEND.n": "Set Endianness (T 16bits encoding)",
        "SETEND.w": "Set Endianness (T/A 32bits encoding)",
        "SETENDeq": "Set Endianness (If APSR.Z == 1 [Equal])",
        "SETENDeq.n": "Set Endianness (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SETENDeq.w": "Set Endianness (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SETENDne": "Set Endianness (If APSR.Z == 0 [Not Equal])",
        "SETENDne.n": "Set Endianness (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SETENDne.w": "Set Endianness (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SETENDcs": "Set Endianness (If APSR.C == 1 [Carry Set])",
        "SETENDcs.n": "Set Endianness (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SETENDcs.w": "Set Endianness (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SETENDcc": "Set Endianness (If APSR.C == 0 [Carry Clear])",
        "SETENDcc.n": "Set Endianness (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SETENDcc.w": "Set Endianness (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SETENDmi": "Set Endianness (If APSR.N == 1 [Minus])",
        "SETENDmi.n": "Set Endianness (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SETENDmi.w": "Set Endianness (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SETENDpl": "Set Endianness (If APSR.N == 0 [Plus])",
        "SETENDpl.n": "Set Endianness (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SETENDpl.w": "Set Endianness (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SETENDvs": "Set Endianness (If APSR.V == 1 [Overflow])",
        "SETENDvs.n": "Set Endianness (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SETENDvs.w": "Set Endianness (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SETENDvc": "Set Endianness (If APSR.V == 0 [No Overflow])",
        "SETENDvc.n": "Set Endianness (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SETENDvc.w": "Set Endianness (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SETENDhi": "Set Endianness (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SETENDhi.n": "Set Endianness (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SETENDhi.w": "Set Endianness (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SETENDls": "Set Endianness (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SETENDls.n": "Set Endianness (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SETENDls.w": "Set Endianness (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SETENDge": "Set Endianness (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SETENDge.n": "Set Endianness (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SETENDge.w": "Set Endianness (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SETENDlt": "Set Endianness (If APSR.N != APSR.V [Signed Lesser Than])",
        "SETENDlt.n": "Set Endianness (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SETENDlt.w": "Set Endianness (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SETENDgt": "Set Endianness (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SETENDgt.n": "Set Endianness (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SETENDgt.w": "Set Endianness (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SETENDle": "Set Endianness (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SETENDle.n": "Set Endianness (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SETENDle.w": "Set Endianness (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SETENDal": "Set Endianness (Always)",
        "SETENDal.n": "Set Endianness (T 16bits encoding) (Always)",
        "SETENDal.w": "Set Endianness (T/A 32bits encoding) (Always)"
      }
    },
    "SEV%{c}%{q}": {
      "description": "Send Event %{q} %{c}",
      "variants": {
        "SEV": "Send Event",
        "SEV.n": "Send Event (T 16bits encoding)",
        "SEV.w": "Send Event (T/A 32bits encoding)",
        "SEVeq": "Send Event (If APSR.Z == 1 [Equal])",
        "SEVeq.n": "Send Event (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SEVeq.w": "Send Event (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SEVne": "Send Event (If APSR.Z == 0 [Not Equal])",
        "SEVne.n": "Send Event (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SEVne.w": "Send Event (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SEVcs": "Send Event (If APSR.C == 1 [Carry Set])",
        "SEVcs.n": "Send Event (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SEVcs.w": "Send Event (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SEVcc": "Send Event (If APSR.C == 0 [Carry Clear])",
        "SEVcc.n": "Send Event (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SEVcc.w": "Send Event (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SEVmi": "Send Event (If APSR.N == 1 [Minus])",
        "SEVmi.n": "Send Event (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SEVmi.w": "Send Event (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SEVpl": "Send Event (If APSR.N == 0 [Plus])",
        "SEVpl.n": "Send Event (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SEVpl.w": "Send Event (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SEVvs": "Send Event (If APSR.V == 1 [Overflow])",
        "SEVvs.n": "Send Event (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SEVvs.w": "Send Event (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SEVvc": "Send Event (If APSR.V == 0 [No Overflow])",
        "SEVvc.n": "Send Event (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SEVvc.w": "Send Event (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SEVhi": "Send Event (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SEVhi.n": "Send Event (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SEVhi.w": "Send Event (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SEVls": "Send Event (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SEVls.n": "Send Event (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SEVls.w": "Send Event (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SEVge": "Send Event (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SEVge.n": "Send Event (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SEVge.w": "Send Event (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SEVlt": "Send Event (If APSR.N != APSR.V [Signed Lesser Than])",
        "SEVlt.n": "Send Event (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SEVlt.w": "Send Event (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SEVgt": "Send Event (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SEVgt.n": "Send Event (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SEVgt.w": "Send Event (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SEVle": "Send Event (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SEVle.n": "Send Event (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SEVle.w": "Send Event (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SEVal": "Send Event (Always)",
        "SEVal.n": "Send Event (T 16bits encoding) (Always)",
        "SEVal.w": "Send Event (T/A 32bits encoding) (Always)"
      }
    },
    "SHADD16%{c}%{q}": {
      "description": "Signed Halving Add 16 %{q} %{c}",
      "variants": {
        "SHADD16": "Signed Halving Add 16",
        "SHADD16.n": "Signed Halving Add 16 (T 16bits encoding)",
        "SHADD16.w": "Signed Halving Add 16 (T/A 32bits encoding)",
        "SHADD16eq": "Signed Halving Add 16 (If APSR.Z == 1 [Equal])",
        "SHADD16eq.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SHADD16eq.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SHADD16ne": "Signed Halving Add 16 (If APSR.Z == 0 [Not Equal])",
        "SHADD16ne.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHADD16ne.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHADD16cs": "Signed Halving Add 16 (If APSR.C == 1 [Carry Set])",
        "SHADD16cs.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHADD16cs.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHADD16cc": "Signed Halving Add 16 (If APSR.C == 0 [Carry Clear])",
        "SHADD16cc.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHADD16cc.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHADD16mi": "Signed Halving Add 16 (If APSR.N == 1 [Minus])",
        "SHADD16mi.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SHADD16mi.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SHADD16pl": "Signed Halving Add 16 (If APSR.N == 0 [Plus])",
        "SHADD16pl.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SHADD16pl.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SHADD16vs": "Signed Halving Add 16 (If APSR.V == 1 [Overflow])",
        "SHADD16vs.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SHADD16vs.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SHADD16vc": "Signed Halving Add 16 (If APSR.V == 0 [No Overflow])",
        "SHADD16vc.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHADD16vc.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHADD16hi": "Signed Halving Add 16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHADD16hi.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHADD16hi.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHADD16ls": "Signed Halving Add 16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHADD16ls.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHADD16ls.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHADD16ge": "Signed Halving Add 16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHADD16ge.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHADD16ge.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHADD16lt": "Signed Halving Add 16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHADD16lt.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHADD16lt.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHADD16gt": "Signed Halving Add 16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHADD16gt.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHADD16gt.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHADD16le": "Signed Halving Add 16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHADD16le.n": "Signed Halving Add 16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHADD16le.w": "Signed Halving Add 16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHADD16al": "Signed Halving Add 16 (Always)",
        "SHADD16al.n": "Signed Halving Add 16 (T 16bits encoding) (Always)",
        "SHADD16al.w": "Signed Halving Add 16 (T/A 32bits encoding) (Always)"
      }
    },
    "SHADD8%{c}%{q}": {
      "description": "Signed Halving Add 8 %{q} %{c}",
      "variants": {
        "SHADD8": "Signed Halving Add 8",
        "SHADD8.n": "Signed Halving Add 8 (T 16bits encoding)",
        "SHADD8.w": "Signed Halving Add 8 (T/A 32bits encoding)",
        "SHADD8eq": "Signed Halving Add 8 (If APSR.Z == 1 [Equal])",
        "SHADD8eq.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SHADD8eq.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SHADD8ne": "Signed Halving Add 8 (If APSR.Z == 0 [Not Equal])",
        "SHADD8ne.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHADD8ne.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHADD8cs": "Signed Halving Add 8 (If APSR.C == 1 [Carry Set])",
        "SHADD8cs.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHADD8cs.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHADD8cc": "Signed Halving Add 8 (If APSR.C == 0 [Carry Clear])",
        "SHADD8cc.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHADD8cc.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHADD8mi": "Signed Halving Add 8 (If APSR.N == 1 [Minus])",
        "SHADD8mi.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SHADD8mi.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SHADD8pl": "Signed Halving Add 8 (If APSR.N == 0 [Plus])",
        "SHADD8pl.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SHADD8pl.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SHADD8vs": "Signed Halving Add 8 (If APSR.V == 1 [Overflow])",
        "SHADD8vs.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SHADD8vs.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SHADD8vc": "Signed Halving Add 8 (If APSR.V == 0 [No Overflow])",
        "SHADD8vc.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHADD8vc.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHADD8hi": "Signed Halving Add 8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHADD8hi.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHADD8hi.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHADD8ls": "Signed Halving Add 8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHADD8ls.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHADD8ls.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHADD8ge": "Signed Halving Add 8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHADD8ge.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHADD8ge.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHADD8lt": "Signed Halving Add 8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHADD8lt.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHADD8lt.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHADD8gt": "Signed Halving Add 8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHADD8gt.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHADD8gt.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHADD8le": "Signed Halving Add 8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHADD8le.n": "Signed Halving Add 8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHADD8le.w": "Signed Halving Add 8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHADD8al": "Signed Halving Add 8 (Always)",
        "SHADD8al.n": "Signed Halving Add 8 (T 16bits encoding) (Always)",
        "SHADD8al.w": "Signed Halving Add 8 (T/A 32bits encoding) (Always)"
      }
    },
    "SHASX%{c}%{q}": {
      "description": "Signed Halving Add and Subtract with Exchange %{q} %{c}",
      "variants": {
        "SHASX": "Signed Halving Add and Subtract with Exchange",
        "SHASX.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding)",
        "SHASX.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding)",
        "SHASXeq": "Signed Halving Add and Subtract with Exchange (If APSR.Z == 1 [Equal])",
        "SHASXeq.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SHASXeq.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SHASXne": "Signed Halving Add and Subtract with Exchange (If APSR.Z == 0 [Not Equal])",
        "SHASXne.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHASXne.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHASXcs": "Signed Halving Add and Subtract with Exchange (If APSR.C == 1 [Carry Set])",
        "SHASXcs.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHASXcs.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHASXcc": "Signed Halving Add and Subtract with Exchange (If APSR.C == 0 [Carry Clear])",
        "SHASXcc.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHASXcc.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHASXmi": "Signed Halving Add and Subtract with Exchange (If APSR.N == 1 [Minus])",
        "SHASXmi.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SHASXmi.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SHASXpl": "Signed Halving Add and Subtract with Exchange (If APSR.N == 0 [Plus])",
        "SHASXpl.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SHASXpl.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SHASXvs": "Signed Halving Add and Subtract with Exchange (If APSR.V == 1 [Overflow])",
        "SHASXvs.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SHASXvs.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SHASXvc": "Signed Halving Add and Subtract with Exchange (If APSR.V == 0 [No Overflow])",
        "SHASXvc.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHASXvc.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHASXhi": "Signed Halving Add and Subtract with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHASXhi.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHASXhi.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHASXls": "Signed Halving Add and Subtract with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHASXls.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHASXls.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHASXge": "Signed Halving Add and Subtract with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHASXge.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHASXge.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHASXlt": "Signed Halving Add and Subtract with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHASXlt.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHASXlt.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHASXgt": "Signed Halving Add and Subtract with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHASXgt.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHASXgt.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHASXle": "Signed Halving Add and Subtract with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHASXle.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHASXle.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHASXal": "Signed Halving Add and Subtract with Exchange (Always)",
        "SHASXal.n": "Signed Halving Add and Subtract with Exchange (T 16bits encoding) (Always)",
        "SHASXal.w": "Signed Halving Add and Subtract with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "SHSAX%{c}%{q}": {
      "description": "Signed Halving Subtract and Add with Exchange %{q} %{c}",
      "variants": {
        "SHSAX": "Signed Halving Subtract and Add with Exchange",
        "SHSAX.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding)",
        "SHSAX.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding)",
        "SHSAXeq": "Signed Halving Subtract and Add with Exchange (If APSR.Z == 1 [Equal])",
        "SHSAXeq.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SHSAXeq.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SHSAXne": "Signed Halving Subtract and Add with Exchange (If APSR.Z == 0 [Not Equal])",
        "SHSAXne.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHSAXne.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHSAXcs": "Signed Halving Subtract and Add with Exchange (If APSR.C == 1 [Carry Set])",
        "SHSAXcs.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHSAXcs.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHSAXcc": "Signed Halving Subtract and Add with Exchange (If APSR.C == 0 [Carry Clear])",
        "SHSAXcc.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHSAXcc.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHSAXmi": "Signed Halving Subtract and Add with Exchange (If APSR.N == 1 [Minus])",
        "SHSAXmi.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SHSAXmi.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SHSAXpl": "Signed Halving Subtract and Add with Exchange (If APSR.N == 0 [Plus])",
        "SHSAXpl.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SHSAXpl.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SHSAXvs": "Signed Halving Subtract and Add with Exchange (If APSR.V == 1 [Overflow])",
        "SHSAXvs.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SHSAXvs.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SHSAXvc": "Signed Halving Subtract and Add with Exchange (If APSR.V == 0 [No Overflow])",
        "SHSAXvc.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHSAXvc.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHSAXhi": "Signed Halving Subtract and Add with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHSAXhi.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHSAXhi.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHSAXls": "Signed Halving Subtract and Add with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHSAXls.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHSAXls.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHSAXge": "Signed Halving Subtract and Add with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHSAXge.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHSAXge.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHSAXlt": "Signed Halving Subtract and Add with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHSAXlt.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHSAXlt.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHSAXgt": "Signed Halving Subtract and Add with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHSAXgt.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHSAXgt.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHSAXle": "Signed Halving Subtract and Add with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHSAXle.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHSAXle.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHSAXal": "Signed Halving Subtract and Add with Exchange (Always)",
        "SHSAXal.n": "Signed Halving Subtract and Add with Exchange (T 16bits encoding) (Always)",
        "SHSAXal.w": "Signed Halving Subtract and Add with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "SHSUB16%{c}%{q}": {
      "description": "Signed Halving Subtract 16 %{q} %{c}",
      "variants": {
        "SHSUB16": "Signed Halving Subtract 16",
        "SHSUB16.n": "Signed Halving Subtract 16 (T 16bits encoding)",
        "SHSUB16.w": "Signed Halving Subtract 16 (T/A 32bits encoding)",
        "SHSUB16eq": "Signed Halving Subtract 16 (If APSR.Z == 1 [Equal])",
        "SHSUB16eq.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SHSUB16eq.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SHSUB16ne": "Signed Halving Subtract 16 (If APSR.Z == 0 [Not Equal])",
        "SHSUB16ne.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHSUB16ne.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHSUB16cs": "Signed Halving Subtract 16 (If APSR.C == 1 [Carry Set])",
        "SHSUB16cs.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHSUB16cs.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHSUB16cc": "Signed Halving Subtract 16 (If APSR.C == 0 [Carry Clear])",
        "SHSUB16cc.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHSUB16cc.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHSUB16mi": "Signed Halving Subtract 16 (If APSR.N == 1 [Minus])",
        "SHSUB16mi.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SHSUB16mi.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SHSUB16pl": "Signed Halving Subtract 16 (If APSR.N == 0 [Plus])",
        "SHSUB16pl.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SHSUB16pl.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SHSUB16vs": "Signed Halving Subtract 16 (If APSR.V == 1 [Overflow])",
        "SHSUB16vs.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SHSUB16vs.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SHSUB16vc": "Signed Halving Subtract 16 (If APSR.V == 0 [No Overflow])",
        "SHSUB16vc.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHSUB16vc.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHSUB16hi": "Signed Halving Subtract 16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHSUB16hi.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHSUB16hi.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHSUB16ls": "Signed Halving Subtract 16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHSUB16ls.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHSUB16ls.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHSUB16ge": "Signed Halving Subtract 16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHSUB16ge.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHSUB16ge.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHSUB16lt": "Signed Halving Subtract 16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHSUB16lt.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHSUB16lt.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHSUB16gt": "Signed Halving Subtract 16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHSUB16gt.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHSUB16gt.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHSUB16le": "Signed Halving Subtract 16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHSUB16le.n": "Signed Halving Subtract 16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHSUB16le.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHSUB16al": "Signed Halving Subtract 16 (Always)",
        "SHSUB16al.n": "Signed Halving Subtract 16 (T 16bits encoding) (Always)",
        "SHSUB16al.w": "Signed Halving Subtract 16 (T/A 32bits encoding) (Always)"
      }
    },
    "SHSUB8%{c}%{q}": {
      "description": "Signed Halving Subtract 8 %{q} %{c}",
      "variants": {
        "SHSUB8": "Signed Halving Subtract 8",
        "SHSUB8.n": "Signed Halving Subtract 8 (T 16bits encoding)",
        "SHSUB8.w": "Signed Halving Subtract 8 (T/A 32bits encoding)",
        "SHSUB8eq": "Signed Halving Subtract 8 (If APSR.Z == 1 [Equal])",
        "SHSUB8eq.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SHSUB8eq.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SHSUB8ne": "Signed Halving Subtract 8 (If APSR.Z == 0 [Not Equal])",
        "SHSUB8ne.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHSUB8ne.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SHSUB8cs": "Signed Halving Subtract 8 (If APSR.C == 1 [Carry Set])",
        "SHSUB8cs.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHSUB8cs.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SHSUB8cc": "Signed Halving Subtract 8 (If APSR.C == 0 [Carry Clear])",
        "SHSUB8cc.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHSUB8cc.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SHSUB8mi": "Signed Halving Subtract 8 (If APSR.N == 1 [Minus])",
        "SHSUB8mi.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SHSUB8mi.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SHSUB8pl": "Signed Halving Subtract 8 (If APSR.N == 0 [Plus])",
        "SHSUB8pl.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SHSUB8pl.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SHSUB8vs": "Signed Halving Subtract 8 (If APSR.V == 1 [Overflow])",
        "SHSUB8vs.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SHSUB8vs.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SHSUB8vc": "Signed Halving Subtract 8 (If APSR.V == 0 [No Overflow])",
        "SHSUB8vc.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHSUB8vc.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SHSUB8hi": "Signed Halving Subtract 8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHSUB8hi.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHSUB8hi.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SHSUB8ls": "Signed Halving Subtract 8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHSUB8ls.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHSUB8ls.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SHSUB8ge": "Signed Halving Subtract 8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHSUB8ge.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHSUB8ge.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SHSUB8lt": "Signed Halving Subtract 8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHSUB8lt.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHSUB8lt.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SHSUB8gt": "Signed Halving Subtract 8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHSUB8gt.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHSUB8gt.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SHSUB8le": "Signed Halving Subtract 8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHSUB8le.n": "Signed Halving Subtract 8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHSUB8le.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SHSUB8al": "Signed Halving Subtract 8 (Always)",
        "SHSUB8al.n": "Signed Halving Subtract 8 (T 16bits encoding) (Always)",
        "SHSUB8al.w": "Signed Halving Subtract 8 (T/A 32bits encoding) (Always)"
      }
    },
    "SMC%{c}%{q}": {
      "description": "Secure Monitor Call %{q} %{c}",
      "variants": {
        "SMC": "Secure Monitor Call",
        "SMC.n": "Secure Monitor Call (T 16bits encoding)",
        "SMC.w": "Secure Monitor Call (T/A 32bits encoding)",
        "SMCeq": "Secure Monitor Call (If APSR.Z == 1 [Equal])",
        "SMCeq.n": "Secure Monitor Call (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMCeq.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMCne": "Secure Monitor Call (If APSR.Z == 0 [Not Equal])",
        "SMCne.n": "Secure Monitor Call (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMCne.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMCcs": "Secure Monitor Call (If APSR.C == 1 [Carry Set])",
        "SMCcs.n": "Secure Monitor Call (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMCcs.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMCcc": "Secure Monitor Call (If APSR.C == 0 [Carry Clear])",
        "SMCcc.n": "Secure Monitor Call (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMCcc.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMCmi": "Secure Monitor Call (If APSR.N == 1 [Minus])",
        "SMCmi.n": "Secure Monitor Call (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMCmi.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMCpl": "Secure Monitor Call (If APSR.N == 0 [Plus])",
        "SMCpl.n": "Secure Monitor Call (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMCpl.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMCvs": "Secure Monitor Call (If APSR.V == 1 [Overflow])",
        "SMCvs.n": "Secure Monitor Call (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMCvs.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMCvc": "Secure Monitor Call (If APSR.V == 0 [No Overflow])",
        "SMCvc.n": "Secure Monitor Call (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMCvc.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMChi": "Secure Monitor Call (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMChi.n": "Secure Monitor Call (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMChi.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMCls": "Secure Monitor Call (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMCls.n": "Secure Monitor Call (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMCls.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMCge": "Secure Monitor Call (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMCge.n": "Secure Monitor Call (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMCge.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMClt": "Secure Monitor Call (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMClt.n": "Secure Monitor Call (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMClt.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMCgt": "Secure Monitor Call (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMCgt.n": "Secure Monitor Call (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMCgt.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMCle": "Secure Monitor Call (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMCle.n": "Secure Monitor Call (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMCle.w": "Secure Monitor Call (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMCal": "Secure Monitor Call (Always)",
        "SMCal.n": "Secure Monitor Call (T 16bits encoding) (Always)",
        "SMCal.w": "Secure Monitor Call (T/A 32bits encoding) (Always)"
      }
    },
    "SMLA%{half_parts}%{c}%{q}": {
      "description": "Signed Multiply Accumulate (halfwords) %{half_parts} %{q} %{c}",
      "variants": {
        "SMLAbb": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half)",
        "SMLAbb.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding)",
        "SMLAbb.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding)",
        "SMLAbbeq": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.Z == 1 [Equal])",
        "SMLAbbeq.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAbbeq.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAbbne": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.Z == 0 [Not Equal])",
        "SMLAbbne.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAbbne.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAbbcs": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.C == 1 [Carry Set])",
        "SMLAbbcs.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAbbcs.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAbbcc": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.C == 0 [Carry Clear])",
        "SMLAbbcc.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAbbcc.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAbbmi": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.N == 1 [Minus])",
        "SMLAbbmi.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAbbmi.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAbbpl": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.N == 0 [Plus])",
        "SMLAbbpl.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAbbpl.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAbbvs": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.V == 1 [Overflow])",
        "SMLAbbvs.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAbbvs.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAbbvc": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.V == 0 [No Overflow])",
        "SMLAbbvc.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAbbvc.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAbbhi": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAbbhi.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAbbhi.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAbbls": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAbbls.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAbbls.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAbbge": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAbbge.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAbbge.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAbblt": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAbblt.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAbblt.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAbbgt": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAbbgt.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAbbgt.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAbble": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAbble.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAbble.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAbbal": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (Always)",
        "SMLAbbal.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (Always)",
        "SMLAbbal.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (Always)",
        "SMLAbt": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half)",
        "SMLAbt.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding)",
        "SMLAbt.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding)",
        "SMLAbteq": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.Z == 1 [Equal])",
        "SMLAbteq.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAbteq.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAbtne": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.Z == 0 [Not Equal])",
        "SMLAbtne.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAbtne.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAbtcs": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.C == 1 [Carry Set])",
        "SMLAbtcs.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAbtcs.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAbtcc": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.C == 0 [Carry Clear])",
        "SMLAbtcc.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAbtcc.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAbtmi": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.N == 1 [Minus])",
        "SMLAbtmi.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAbtmi.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAbtpl": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.N == 0 [Plus])",
        "SMLAbtpl.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAbtpl.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAbtvs": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.V == 1 [Overflow])",
        "SMLAbtvs.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAbtvs.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAbtvc": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.V == 0 [No Overflow])",
        "SMLAbtvc.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAbtvc.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAbthi": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAbthi.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAbthi.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAbtls": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAbtls.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAbtls.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAbtge": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAbtge.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAbtge.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAbtlt": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAbtlt.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAbtlt.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAbtgt": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAbtgt.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAbtgt.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAbtle": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAbtle.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAbtle.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAbtal": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (Always)",
        "SMLAbtal.n": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T 16bits encoding) (Always)",
        "SMLAbtal.w": "Signed Multiply Accumulate (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (Always)",
        "SMLAtb": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half)",
        "SMLAtb.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding)",
        "SMLAtb.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding)",
        "SMLAtbeq": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.Z == 1 [Equal])",
        "SMLAtbeq.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAtbeq.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAtbne": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.Z == 0 [Not Equal])",
        "SMLAtbne.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAtbne.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAtbcs": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.C == 1 [Carry Set])",
        "SMLAtbcs.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAtbcs.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAtbcc": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.C == 0 [Carry Clear])",
        "SMLAtbcc.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAtbcc.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAtbmi": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.N == 1 [Minus])",
        "SMLAtbmi.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAtbmi.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAtbpl": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.N == 0 [Plus])",
        "SMLAtbpl.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAtbpl.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAtbvs": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.V == 1 [Overflow])",
        "SMLAtbvs.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAtbvs.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAtbvc": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.V == 0 [No Overflow])",
        "SMLAtbvc.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAtbvc.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAtbhi": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAtbhi.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAtbhi.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAtbls": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAtbls.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAtbls.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAtbge": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAtbge.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAtbge.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAtblt": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAtblt.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAtblt.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAtbgt": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAtbgt.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAtbgt.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAtble": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAtble.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAtble.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAtbal": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (Always)",
        "SMLAtbal.n": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T 16bits encoding) (Always)",
        "SMLAtbal.w": "Signed Multiply Accumulate (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (Always)",
        "SMLAtt": "Signed Multiply Accumulate (halfwords) (Top half with Top half)",
        "SMLAtt.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding)",
        "SMLAtt.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding)",
        "SMLAtteq": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.Z == 1 [Equal])",
        "SMLAtteq.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAtteq.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAttne": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.Z == 0 [Not Equal])",
        "SMLAttne.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAttne.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAttcs": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.C == 1 [Carry Set])",
        "SMLAttcs.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAttcs.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAttcc": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.C == 0 [Carry Clear])",
        "SMLAttcc.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAttcc.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAttmi": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.N == 1 [Minus])",
        "SMLAttmi.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAttmi.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAttpl": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.N == 0 [Plus])",
        "SMLAttpl.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAttpl.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAttvs": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.V == 1 [Overflow])",
        "SMLAttvs.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAttvs.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAttvc": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.V == 0 [No Overflow])",
        "SMLAttvc.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAttvc.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAtthi": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAtthi.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAtthi.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAttls": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAttls.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAttls.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAttge": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAttge.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAttge.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAttlt": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAttlt.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAttlt.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAttgt": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAttgt.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAttgt.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAttle": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAttle.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAttle.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAttal": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (Always)",
        "SMLAttal.n": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T 16bits encoding) (Always)",
        "SMLAttal.w": "Signed Multiply Accumulate (halfwords) (Top half with Top half) (T/A 32bits encoding) (Always)"
      }
    },
    "SMLA%{l}D%{cross_mult}%{c}%{q}": {
      "description": "Signed Multiply Accumulate %{l} Dual %{cross_mult} %{q} %{c}",
      "variants": {
        "SMLAD": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom)",
        "SMLAD.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding)",
        "SMLAD.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding)",
        "SMLADeq": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.Z == 1 [Equal])",
        "SMLADeq.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLADeq.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLADne": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.Z == 0 [Not Equal])",
        "SMLADne.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLADne.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLADcs": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.C == 1 [Carry Set])",
        "SMLADcs.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLADcs.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLADcc": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.C == 0 [Carry Clear])",
        "SMLADcc.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLADcc.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLADmi": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.N == 1 [Minus])",
        "SMLADmi.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLADmi.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLADpl": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.N == 0 [Plus])",
        "SMLADpl.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLADpl.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLADvs": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.V == 1 [Overflow])",
        "SMLADvs.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLADvs.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLADvc": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.V == 0 [No Overflow])",
        "SMLADvc.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLADvc.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLADhi": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLADhi.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLADhi.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLADls": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLADls.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLADls.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLADge": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLADge.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLADge.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLADlt": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLADlt.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLADlt.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLADgt": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLADgt.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLADgt.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLADle": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLADle.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLADle.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLADal": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (Always)",
        "SMLADal.n": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (Always)",
        "SMLADal.w": "Signed Multiply Accumulate Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (Always)",
        "SMLADx": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top)",
        "SMLADx.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding)",
        "SMLADx.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding)",
        "SMLADxeq": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.Z == 1 [Equal])",
        "SMLADxeq.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLADxeq.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLADxne": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.Z == 0 [Not Equal])",
        "SMLADxne.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLADxne.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLADxcs": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.C == 1 [Carry Set])",
        "SMLADxcs.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLADxcs.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLADxcc": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.C == 0 [Carry Clear])",
        "SMLADxcc.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLADxcc.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLADxmi": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.N == 1 [Minus])",
        "SMLADxmi.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLADxmi.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLADxpl": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.N == 0 [Plus])",
        "SMLADxpl.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLADxpl.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLADxvs": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.V == 1 [Overflow])",
        "SMLADxvs.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLADxvs.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLADxvc": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.V == 0 [No Overflow])",
        "SMLADxvc.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLADxvc.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLADxhi": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLADxhi.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLADxhi.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLADxls": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLADxls.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLADxls.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLADxge": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLADxge.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLADxge.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLADxlt": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLADxlt.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLADxlt.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLADxgt": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLADxgt.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLADxgt.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLADxle": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLADxle.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLADxle.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLADxal": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (Always)",
        "SMLADxal.n": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (Always)",
        "SMLADxal.w": "Signed Multiply Accumulate Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (Always)",
        "SMLAlD": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom)",
        "SMLAlD.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding)",
        "SMLAlD.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding)",
        "SMLAlDeq": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.Z == 1 [Equal])",
        "SMLAlDeq.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAlDeq.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAlDne": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.Z == 0 [Not Equal])",
        "SMLAlDne.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAlDne.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAlDcs": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.C == 1 [Carry Set])",
        "SMLAlDcs.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAlDcs.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAlDcc": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.C == 0 [Carry Clear])",
        "SMLAlDcc.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAlDcc.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAlDmi": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.N == 1 [Minus])",
        "SMLAlDmi.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAlDmi.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAlDpl": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.N == 0 [Plus])",
        "SMLAlDpl.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAlDpl.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAlDvs": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.V == 1 [Overflow])",
        "SMLAlDvs.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAlDvs.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAlDvc": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.V == 0 [No Overflow])",
        "SMLAlDvc.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAlDvc.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAlDhi": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAlDhi.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAlDhi.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAlDls": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAlDls.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAlDls.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAlDge": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAlDge.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAlDge.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAlDlt": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAlDlt.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAlDlt.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAlDgt": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAlDgt.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAlDgt.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAlDle": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAlDle.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAlDle.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAlDal": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (Always)",
        "SMLAlDal.n": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (Always)",
        "SMLAlDal.w": "Signed Multiply Accumulate Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (Always)",
        "SMLAlDx": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top)",
        "SMLAlDx.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding)",
        "SMLAlDx.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding)",
        "SMLAlDxeq": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.Z == 1 [Equal])",
        "SMLAlDxeq.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAlDxeq.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAlDxne": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.Z == 0 [Not Equal])",
        "SMLAlDxne.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAlDxne.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAlDxcs": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.C == 1 [Carry Set])",
        "SMLAlDxcs.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAlDxcs.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAlDxcc": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.C == 0 [Carry Clear])",
        "SMLAlDxcc.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAlDxcc.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAlDxmi": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.N == 1 [Minus])",
        "SMLAlDxmi.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAlDxmi.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAlDxpl": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.N == 0 [Plus])",
        "SMLAlDxpl.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAlDxpl.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAlDxvs": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.V == 1 [Overflow])",
        "SMLAlDxvs.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAlDxvs.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAlDxvc": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.V == 0 [No Overflow])",
        "SMLAlDxvc.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAlDxvc.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAlDxhi": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAlDxhi.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAlDxhi.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAlDxls": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAlDxls.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAlDxls.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAlDxge": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAlDxge.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAlDxge.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAlDxlt": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAlDxlt.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAlDxlt.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAlDxgt": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAlDxgt.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAlDxgt.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAlDxle": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAlDxle.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAlDxle.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAlDxal": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (Always)",
        "SMLAlDxal.n": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (Always)",
        "SMLAlDxal.w": "Signed Multiply Accumulate Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (Always)"
      }
    },
    "SMLAL%{s}%{c}%{q}": {
      "description": "Signed Multiply Accumulate Long %{q} %{c} %{s}",
      "variants": {
        "SMLAL": "Signed Multiply Accumulate Long",
        "SMLAL.n": "Signed Multiply Accumulate Long (T 16bits encoding)",
        "SMLAL.w": "Signed Multiply Accumulate Long (T/A 32bits encoding)",
        "SMLALeq": "Signed Multiply Accumulate Long (If APSR.Z == 1 [Equal])",
        "SMLALeq.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLALeq.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLALne": "Signed Multiply Accumulate Long (If APSR.Z == 0 [Not Equal])",
        "SMLALne.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLALne.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLALcs": "Signed Multiply Accumulate Long (If APSR.C == 1 [Carry Set])",
        "SMLALcs.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLALcs.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLALcc": "Signed Multiply Accumulate Long (If APSR.C == 0 [Carry Clear])",
        "SMLALcc.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLALcc.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLALmi": "Signed Multiply Accumulate Long (If APSR.N == 1 [Minus])",
        "SMLALmi.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLALmi.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLALpl": "Signed Multiply Accumulate Long (If APSR.N == 0 [Plus])",
        "SMLALpl.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLALpl.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLALvs": "Signed Multiply Accumulate Long (If APSR.V == 1 [Overflow])",
        "SMLALvs.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLALvs.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLALvc": "Signed Multiply Accumulate Long (If APSR.V == 0 [No Overflow])",
        "SMLALvc.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLALvc.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLALhi": "Signed Multiply Accumulate Long (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALhi.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALhi.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALls": "Signed Multiply Accumulate Long (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALls.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALls.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALge": "Signed Multiply Accumulate Long (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALge.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALge.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALlt": "Signed Multiply Accumulate Long (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALlt.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALlt.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALgt": "Signed Multiply Accumulate Long (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALgt.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALgt.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALle": "Signed Multiply Accumulate Long (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALle.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALle.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALal": "Signed Multiply Accumulate Long (Always)",
        "SMLALal.n": "Signed Multiply Accumulate Long (T 16bits encoding) (Always)",
        "SMLALal.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (Always)",
        "SMLALs": "Signed Multiply Accumulate Long (Update APSR)",
        "SMLALs.n": "Signed Multiply Accumulate Long (T 16bits encoding) (Update APSR)",
        "SMLALs.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (Update APSR)",
        "SMLALseq": "Signed Multiply Accumulate Long (If APSR.Z == 1 [Equal]) (Update APSR)",
        "SMLALseq.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "SMLALseq.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "SMLALsne": "Signed Multiply Accumulate Long (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "SMLALsne.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "SMLALsne.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "SMLALscs": "Signed Multiply Accumulate Long (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "SMLALscs.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "SMLALscs.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "SMLALscc": "Signed Multiply Accumulate Long (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "SMLALscc.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "SMLALscc.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "SMLALsmi": "Signed Multiply Accumulate Long (If APSR.N == 1 [Minus]) (Update APSR)",
        "SMLALsmi.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "SMLALsmi.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "SMLALspl": "Signed Multiply Accumulate Long (If APSR.N == 0 [Plus]) (Update APSR)",
        "SMLALspl.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "SMLALspl.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "SMLALsvs": "Signed Multiply Accumulate Long (If APSR.V == 1 [Overflow]) (Update APSR)",
        "SMLALsvs.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "SMLALsvs.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "SMLALsvc": "Signed Multiply Accumulate Long (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "SMLALsvc.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "SMLALsvc.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "SMLALshi": "Signed Multiply Accumulate Long (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "SMLALshi.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "SMLALshi.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "SMLALsls": "Signed Multiply Accumulate Long (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "SMLALsls.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "SMLALsls.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "SMLALsge": "Signed Multiply Accumulate Long (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "SMLALsge.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "SMLALsge.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "SMLALslt": "Signed Multiply Accumulate Long (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "SMLALslt.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "SMLALslt.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "SMLALsgt": "Signed Multiply Accumulate Long (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "SMLALsgt.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "SMLALsgt.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "SMLALsle": "Signed Multiply Accumulate Long (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "SMLALsle.n": "Signed Multiply Accumulate Long (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "SMLALsle.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "SMLALsal": "Signed Multiply Accumulate Long (Always) (Update APSR)",
        "SMLALsal.n": "Signed Multiply Accumulate Long (T 16bits encoding) (Always) (Update APSR)",
        "SMLALsal.w": "Signed Multiply Accumulate Long (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "SMLAL%{half_parts}%{c}%{q}": {
      "description": "Signed Multiply Accumulate Long (halfwords) %{q} %{c}",
      "variants": {
        "SMLALbb": "Signed Multiply Accumulate Long (halfwords)",
        "SMLALbb.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding)",
        "SMLALbb.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding)",
        "SMLALbbeq": "Signed Multiply Accumulate Long (halfwords) (If APSR.Z == 1 [Equal])",
        "SMLALbbeq.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLALbbeq.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLALbbne": "Signed Multiply Accumulate Long (halfwords) (If APSR.Z == 0 [Not Equal])",
        "SMLALbbne.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLALbbne.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLALbbcs": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 1 [Carry Set])",
        "SMLALbbcs.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLALbbcs.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLALbbcc": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 0 [Carry Clear])",
        "SMLALbbcc.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLALbbcc.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLALbbmi": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == 1 [Minus])",
        "SMLALbbmi.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLALbbmi.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLALbbpl": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == 0 [Plus])",
        "SMLALbbpl.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLALbbpl.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLALbbvs": "Signed Multiply Accumulate Long (halfwords) (If APSR.V == 1 [Overflow])",
        "SMLALbbvs.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLALbbvs.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLALbbvc": "Signed Multiply Accumulate Long (halfwords) (If APSR.V == 0 [No Overflow])",
        "SMLALbbvc.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLALbbvc.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLALbbhi": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALbbhi.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALbbhi.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALbbls": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALbbls.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALbbls.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALbbge": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALbbge.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALbbge.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALbblt": "Signed Multiply Accumulate Long (halfwords) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALbblt.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALbblt.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALbbgt": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALbbgt.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALbbgt.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALbble": "Signed Multiply Accumulate Long (halfwords) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALbble.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALbble.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALbbal": "Signed Multiply Accumulate Long (halfwords) (Always)",
        "SMLALbbal.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (Always)",
        "SMLALbbal.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (Always)",
        "SMLALbt": "Signed Multiply Accumulate Long (halfwords)",
        "SMLALbt.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding)",
        "SMLALbt.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding)",
        "SMLALbteq": "Signed Multiply Accumulate Long (halfwords) (If APSR.Z == 1 [Equal])",
        "SMLALbteq.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLALbteq.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLALbtne": "Signed Multiply Accumulate Long (halfwords) (If APSR.Z == 0 [Not Equal])",
        "SMLALbtne.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLALbtne.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLALbtcs": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 1 [Carry Set])",
        "SMLALbtcs.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLALbtcs.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLALbtcc": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 0 [Carry Clear])",
        "SMLALbtcc.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLALbtcc.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLALbtmi": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == 1 [Minus])",
        "SMLALbtmi.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLALbtmi.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLALbtpl": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == 0 [Plus])",
        "SMLALbtpl.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLALbtpl.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLALbtvs": "Signed Multiply Accumulate Long (halfwords) (If APSR.V == 1 [Overflow])",
        "SMLALbtvs.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLALbtvs.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLALbtvc": "Signed Multiply Accumulate Long (halfwords) (If APSR.V == 0 [No Overflow])",
        "SMLALbtvc.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLALbtvc.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLALbthi": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALbthi.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALbthi.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALbtls": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALbtls.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALbtls.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALbtge": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALbtge.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALbtge.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALbtlt": "Signed Multiply Accumulate Long (halfwords) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALbtlt.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALbtlt.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALbtgt": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALbtgt.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALbtgt.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALbtle": "Signed Multiply Accumulate Long (halfwords) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALbtle.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALbtle.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALbtal": "Signed Multiply Accumulate Long (halfwords) (Always)",
        "SMLALbtal.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (Always)",
        "SMLALbtal.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (Always)",
        "SMLALtb": "Signed Multiply Accumulate Long (halfwords)",
        "SMLALtb.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding)",
        "SMLALtb.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding)",
        "SMLALtbeq": "Signed Multiply Accumulate Long (halfwords) (If APSR.Z == 1 [Equal])",
        "SMLALtbeq.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLALtbeq.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLALtbne": "Signed Multiply Accumulate Long (halfwords) (If APSR.Z == 0 [Not Equal])",
        "SMLALtbne.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLALtbne.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLALtbcs": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 1 [Carry Set])",
        "SMLALtbcs.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLALtbcs.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLALtbcc": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 0 [Carry Clear])",
        "SMLALtbcc.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLALtbcc.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLALtbmi": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == 1 [Minus])",
        "SMLALtbmi.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLALtbmi.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLALtbpl": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == 0 [Plus])",
        "SMLALtbpl.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLALtbpl.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLALtbvs": "Signed Multiply Accumulate Long (halfwords) (If APSR.V == 1 [Overflow])",
        "SMLALtbvs.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLALtbvs.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLALtbvc": "Signed Multiply Accumulate Long (halfwords) (If APSR.V == 0 [No Overflow])",
        "SMLALtbvc.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLALtbvc.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLALtbhi": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALtbhi.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALtbhi.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALtbls": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALtbls.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALtbls.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALtbge": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALtbge.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALtbge.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALtblt": "Signed Multiply Accumulate Long (halfwords) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALtblt.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALtblt.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALtbgt": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALtbgt.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALtbgt.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALtble": "Signed Multiply Accumulate Long (halfwords) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALtble.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALtble.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALtbal": "Signed Multiply Accumulate Long (halfwords) (Always)",
        "SMLALtbal.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (Always)",
        "SMLALtbal.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (Always)",
        "SMLALtt": "Signed Multiply Accumulate Long (halfwords)",
        "SMLALtt.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding)",
        "SMLALtt.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding)",
        "SMLALtteq": "Signed Multiply Accumulate Long (halfwords) (If APSR.Z == 1 [Equal])",
        "SMLALtteq.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLALtteq.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLALttne": "Signed Multiply Accumulate Long (halfwords) (If APSR.Z == 0 [Not Equal])",
        "SMLALttne.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLALttne.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLALttcs": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 1 [Carry Set])",
        "SMLALttcs.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLALttcs.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLALttcc": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 0 [Carry Clear])",
        "SMLALttcc.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLALttcc.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLALttmi": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == 1 [Minus])",
        "SMLALttmi.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLALttmi.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLALttpl": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == 0 [Plus])",
        "SMLALttpl.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLALttpl.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLALttvs": "Signed Multiply Accumulate Long (halfwords) (If APSR.V == 1 [Overflow])",
        "SMLALttvs.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLALttvs.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLALttvc": "Signed Multiply Accumulate Long (halfwords) (If APSR.V == 0 [No Overflow])",
        "SMLALttvc.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLALttvc.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLALtthi": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALtthi.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALtthi.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLALttls": "Signed Multiply Accumulate Long (halfwords) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALttls.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALttls.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLALttge": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALttge.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALttge.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLALttlt": "Signed Multiply Accumulate Long (halfwords) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALttlt.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALttlt.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLALttgt": "Signed Multiply Accumulate Long (halfwords) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALttgt.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALttgt.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLALttle": "Signed Multiply Accumulate Long (halfwords) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALttle.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALttle.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLALttal": "Signed Multiply Accumulate Long (halfwords) (Always)",
        "SMLALttal.n": "Signed Multiply Accumulate Long (halfwords) (T 16bits encoding) (Always)",
        "SMLALttal.w": "Signed Multiply Accumulate Long (halfwords) (T/A 32bits encoding) (Always)"
      }
    },
    "SMLAW%{half_parts}%{c}%{q}": {
      "description": "Signed Multiply Accumulate (word by halfword) %{q} %{c}",
      "variants": {
        "SMLAWb": "Signed Multiply Accumulate (word by halfword)",
        "SMLAWb.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding)",
        "SMLAWb.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding)",
        "SMLAWbeq": "Signed Multiply Accumulate (word by halfword) (If APSR.Z == 1 [Equal])",
        "SMLAWbeq.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAWbeq.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAWbne": "Signed Multiply Accumulate (word by halfword) (If APSR.Z == 0 [Not Equal])",
        "SMLAWbne.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAWbne.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAWbcs": "Signed Multiply Accumulate (word by halfword) (If APSR.C == 1 [Carry Set])",
        "SMLAWbcs.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAWbcs.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAWbcc": "Signed Multiply Accumulate (word by halfword) (If APSR.C == 0 [Carry Clear])",
        "SMLAWbcc.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAWbcc.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAWbmi": "Signed Multiply Accumulate (word by halfword) (If APSR.N == 1 [Minus])",
        "SMLAWbmi.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAWbmi.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAWbpl": "Signed Multiply Accumulate (word by halfword) (If APSR.N == 0 [Plus])",
        "SMLAWbpl.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAWbpl.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAWbvs": "Signed Multiply Accumulate (word by halfword) (If APSR.V == 1 [Overflow])",
        "SMLAWbvs.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAWbvs.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAWbvc": "Signed Multiply Accumulate (word by halfword) (If APSR.V == 0 [No Overflow])",
        "SMLAWbvc.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAWbvc.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAWbhi": "Signed Multiply Accumulate (word by halfword) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAWbhi.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAWbhi.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAWbls": "Signed Multiply Accumulate (word by halfword) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAWbls.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAWbls.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAWbge": "Signed Multiply Accumulate (word by halfword) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAWbge.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAWbge.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAWblt": "Signed Multiply Accumulate (word by halfword) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAWblt.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAWblt.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAWbgt": "Signed Multiply Accumulate (word by halfword) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAWbgt.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAWbgt.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAWble": "Signed Multiply Accumulate (word by halfword) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAWble.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAWble.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAWbal": "Signed Multiply Accumulate (word by halfword) (Always)",
        "SMLAWbal.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (Always)",
        "SMLAWbal.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (Always)",
        "SMLAWt": "Signed Multiply Accumulate (word by halfword)",
        "SMLAWt.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding)",
        "SMLAWt.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding)",
        "SMLAWteq": "Signed Multiply Accumulate (word by halfword) (If APSR.Z == 1 [Equal])",
        "SMLAWteq.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAWteq.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLAWtne": "Signed Multiply Accumulate (word by halfword) (If APSR.Z == 0 [Not Equal])",
        "SMLAWtne.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAWtne.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLAWtcs": "Signed Multiply Accumulate (word by halfword) (If APSR.C == 1 [Carry Set])",
        "SMLAWtcs.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAWtcs.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLAWtcc": "Signed Multiply Accumulate (word by halfword) (If APSR.C == 0 [Carry Clear])",
        "SMLAWtcc.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAWtcc.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLAWtmi": "Signed Multiply Accumulate (word by halfword) (If APSR.N == 1 [Minus])",
        "SMLAWtmi.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAWtmi.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLAWtpl": "Signed Multiply Accumulate (word by halfword) (If APSR.N == 0 [Plus])",
        "SMLAWtpl.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAWtpl.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLAWtvs": "Signed Multiply Accumulate (word by halfword) (If APSR.V == 1 [Overflow])",
        "SMLAWtvs.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAWtvs.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLAWtvc": "Signed Multiply Accumulate (word by halfword) (If APSR.V == 0 [No Overflow])",
        "SMLAWtvc.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAWtvc.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLAWthi": "Signed Multiply Accumulate (word by halfword) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAWthi.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAWthi.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLAWtls": "Signed Multiply Accumulate (word by halfword) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAWtls.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAWtls.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLAWtge": "Signed Multiply Accumulate (word by halfword) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAWtge.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAWtge.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLAWtlt": "Signed Multiply Accumulate (word by halfword) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAWtlt.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAWtlt.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLAWtgt": "Signed Multiply Accumulate (word by halfword) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAWtgt.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAWtgt.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLAWtle": "Signed Multiply Accumulate (word by halfword) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAWtle.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAWtle.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLAWtal": "Signed Multiply Accumulate (word by halfword) (Always)",
        "SMLAWtal.n": "Signed Multiply Accumulate (word by halfword) (T 16bits encoding) (Always)",
        "SMLAWtal.w": "Signed Multiply Accumulate (word by halfword) (T/A 32bits encoding) (Always)"
      }
    },
    "SMLS%{l}D%{cross_mult}%{c}%{q}": {
      "description": "Signed Multiply Subtract %{l} Dual %{cross_mult} %{q} %{c}",
      "variants": {
        "SMLSD": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom)",
        "SMLSD.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding)",
        "SMLSD.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding)",
        "SMLSDeq": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.Z == 1 [Equal])",
        "SMLSDeq.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLSDeq.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLSDne": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.Z == 0 [Not Equal])",
        "SMLSDne.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLSDne.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLSDcs": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.C == 1 [Carry Set])",
        "SMLSDcs.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLSDcs.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLSDcc": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.C == 0 [Carry Clear])",
        "SMLSDcc.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLSDcc.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLSDmi": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N == 1 [Minus])",
        "SMLSDmi.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLSDmi.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLSDpl": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N == 0 [Plus])",
        "SMLSDpl.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLSDpl.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLSDvs": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.V == 1 [Overflow])",
        "SMLSDvs.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLSDvs.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLSDvc": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.V == 0 [No Overflow])",
        "SMLSDvc.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLSDvc.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLSDhi": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSDhi.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSDhi.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSDls": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSDls.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSDls.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSDge": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSDge.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSDge.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSDlt": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSDlt.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSDlt.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSDgt": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSDgt.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSDgt.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSDle": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSDle.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSDle.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSDal": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (Always)",
        "SMLSDal.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (Always)",
        "SMLSDal.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (Always)",
        "SMLSDx": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top)",
        "SMLSDx.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding)",
        "SMLSDx.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding)",
        "SMLSDxeq": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.Z == 1 [Equal])",
        "SMLSDxeq.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLSDxeq.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLSDxne": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.Z == 0 [Not Equal])",
        "SMLSDxne.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLSDxne.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLSDxcs": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.C == 1 [Carry Set])",
        "SMLSDxcs.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLSDxcs.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLSDxcc": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.C == 0 [Carry Clear])",
        "SMLSDxcc.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLSDxcc.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLSDxmi": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N == 1 [Minus])",
        "SMLSDxmi.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLSDxmi.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLSDxpl": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N == 0 [Plus])",
        "SMLSDxpl.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLSDxpl.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLSDxvs": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.V == 1 [Overflow])",
        "SMLSDxvs.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLSDxvs.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLSDxvc": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.V == 0 [No Overflow])",
        "SMLSDxvc.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLSDxvc.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLSDxhi": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSDxhi.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSDxhi.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSDxls": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSDxls.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSDxls.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSDxge": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSDxge.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSDxge.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSDxlt": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSDxlt.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSDxlt.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSDxgt": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSDxgt.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSDxgt.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSDxle": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSDxle.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSDxle.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSDxal": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (Always)",
        "SMLSDxal.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (Always)",
        "SMLSDxal.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (Always)",
        "SMLSlD": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom)",
        "SMLSlD.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding)",
        "SMLSlD.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding)",
        "SMLSlDeq": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.Z == 1 [Equal])",
        "SMLSlDeq.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLSlDeq.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLSlDne": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.Z == 0 [Not Equal])",
        "SMLSlDne.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLSlDne.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLSlDcs": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.C == 1 [Carry Set])",
        "SMLSlDcs.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLSlDcs.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLSlDcc": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.C == 0 [Carry Clear])",
        "SMLSlDcc.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLSlDcc.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLSlDmi": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.N == 1 [Minus])",
        "SMLSlDmi.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLSlDmi.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLSlDpl": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.N == 0 [Plus])",
        "SMLSlDpl.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLSlDpl.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLSlDvs": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.V == 1 [Overflow])",
        "SMLSlDvs.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLSlDvs.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLSlDvc": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.V == 0 [No Overflow])",
        "SMLSlDvc.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLSlDvc.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLSlDhi": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSlDhi.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSlDhi.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSlDls": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSlDls.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSlDls.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSlDge": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSlDge.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSlDge.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSlDlt": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSlDlt.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSlDlt.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSlDgt": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSlDgt.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSlDgt.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSlDle": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSlDle.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSlDle.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSlDal": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (Always)",
        "SMLSlDal.n": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (Always)",
        "SMLSlDal.w": "Signed Multiply Subtract Long Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (Always)",
        "SMLSlDx": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top)",
        "SMLSlDx.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding)",
        "SMLSlDx.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding)",
        "SMLSlDxeq": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.Z == 1 [Equal])",
        "SMLSlDxeq.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLSlDxeq.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMLSlDxne": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.Z == 0 [Not Equal])",
        "SMLSlDxne.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLSlDxne.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMLSlDxcs": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.C == 1 [Carry Set])",
        "SMLSlDxcs.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLSlDxcs.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMLSlDxcc": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.C == 0 [Carry Clear])",
        "SMLSlDxcc.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLSlDxcc.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMLSlDxmi": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.N == 1 [Minus])",
        "SMLSlDxmi.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMLSlDxmi.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMLSlDxpl": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.N == 0 [Plus])",
        "SMLSlDxpl.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMLSlDxpl.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMLSlDxvs": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.V == 1 [Overflow])",
        "SMLSlDxvs.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLSlDxvs.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMLSlDxvc": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.V == 0 [No Overflow])",
        "SMLSlDxvc.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLSlDxvc.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMLSlDxhi": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSlDxhi.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSlDxhi.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMLSlDxls": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSlDxls.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSlDxls.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMLSlDxge": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSlDxge.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSlDxge.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMLSlDxlt": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSlDxlt.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSlDxlt.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMLSlDxgt": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSlDxgt.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSlDxgt.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMLSlDxle": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSlDxle.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSlDxle.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMLSlDxal": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (Always)",
        "SMLSlDxal.n": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (Always)",
        "SMLSlDxal.w": "Signed Multiply Subtract Long Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (Always)"
      }
    },
    "SMML%{operations}%{mul_r}%{c}%{q}": {
      "description": "Signed Most Significant Word Multiply %{operations} %{mul_r} %{q} %{c}",
      "variants": {
        "SMMLA": "Signed Most Significant Word Multiply Accumulate (truncated results)",
        "SMMLA.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding)",
        "SMMLA.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding)",
        "SMMLAeq": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.Z == 1 [Equal])",
        "SMMLAeq.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMLAeq.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMLAne": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.Z == 0 [Not Equal])",
        "SMMLAne.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMLAne.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMLAcs": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.C == 1 [Carry Set])",
        "SMMLAcs.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMLAcs.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMLAcc": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.C == 0 [Carry Clear])",
        "SMMLAcc.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMLAcc.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMLAmi": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.N == 1 [Minus])",
        "SMMLAmi.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMMLAmi.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMMLApl": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.N == 0 [Plus])",
        "SMMLApl.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMMLApl.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMMLAvs": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.V == 1 [Overflow])",
        "SMMLAvs.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMLAvs.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMLAvc": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.V == 0 [No Overflow])",
        "SMMLAvc.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMLAvc.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMLAhi": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLAhi.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLAhi.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLAls": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLAls.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLAls.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLAge": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLAge.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLAge.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLAlt": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLAlt.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLAlt.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLAgt": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLAgt.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLAgt.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLAle": "Signed Most Significant Word Multiply Accumulate (truncated results) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLAle.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLAle.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLAal": "Signed Most Significant Word Multiply Accumulate (truncated results) (Always)",
        "SMMLAal.n": "Signed Most Significant Word Multiply Accumulate (truncated results) (T 16bits encoding) (Always)",
        "SMMLAal.w": "Signed Most Significant Word Multiply Accumulate (truncated results) (T/A 32bits encoding) (Always)",
        "SMMLAr": "Signed Most Significant Word Multiply Accumulate (Rounded results)",
        "SMMLAr.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding)",
        "SMMLAr.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding)",
        "SMMLAreq": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.Z == 1 [Equal])",
        "SMMLAreq.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMLAreq.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMLArne": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.Z == 0 [Not Equal])",
        "SMMLArne.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMLArne.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMLArcs": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.C == 1 [Carry Set])",
        "SMMLArcs.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMLArcs.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMLArcc": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.C == 0 [Carry Clear])",
        "SMMLArcc.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMLArcc.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMLArmi": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.N == 1 [Minus])",
        "SMMLArmi.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMMLArmi.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMMLArpl": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.N == 0 [Plus])",
        "SMMLArpl.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMMLArpl.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMMLArvs": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.V == 1 [Overflow])",
        "SMMLArvs.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMLArvs.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMLArvc": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.V == 0 [No Overflow])",
        "SMMLArvc.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMLArvc.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMLArhi": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLArhi.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLArhi.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLArls": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLArls.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLArls.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLArge": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLArge.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLArge.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLArlt": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLArlt.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLArlt.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLArgt": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLArgt.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLArgt.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLArle": "Signed Most Significant Word Multiply Accumulate (Rounded results) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLArle.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLArle.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLAral": "Signed Most Significant Word Multiply Accumulate (Rounded results) (Always)",
        "SMMLAral.n": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T 16bits encoding) (Always)",
        "SMMLAral.w": "Signed Most Significant Word Multiply Accumulate (Rounded results) (T/A 32bits encoding) (Always)",
        "SMMLS": "Signed Most Significant Word Multiply Subtract (truncated results)",
        "SMMLS.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding)",
        "SMMLS.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding)",
        "SMMLSeq": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.Z == 1 [Equal])",
        "SMMLSeq.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMLSeq.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMLSne": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.Z == 0 [Not Equal])",
        "SMMLSne.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMLSne.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMLScs": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.C == 1 [Carry Set])",
        "SMMLScs.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMLScs.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMLScc": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.C == 0 [Carry Clear])",
        "SMMLScc.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMLScc.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMLSmi": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.N == 1 [Minus])",
        "SMMLSmi.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMMLSmi.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMMLSpl": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.N == 0 [Plus])",
        "SMMLSpl.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMMLSpl.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMMLSvs": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.V == 1 [Overflow])",
        "SMMLSvs.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMLSvs.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMLSvc": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.V == 0 [No Overflow])",
        "SMMLSvc.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMLSvc.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMLShi": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLShi.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLShi.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLSls": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLSls.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLSls.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLSge": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLSge.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLSge.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLSlt": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLSlt.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLSlt.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLSgt": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLSgt.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLSgt.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLSle": "Signed Most Significant Word Multiply Subtract (truncated results) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLSle.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLSle.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLSal": "Signed Most Significant Word Multiply Subtract (truncated results) (Always)",
        "SMMLSal.n": "Signed Most Significant Word Multiply Subtract (truncated results) (T 16bits encoding) (Always)",
        "SMMLSal.w": "Signed Most Significant Word Multiply Subtract (truncated results) (T/A 32bits encoding) (Always)",
        "SMMLSr": "Signed Most Significant Word Multiply Subtract (Rounded results)",
        "SMMLSr.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding)",
        "SMMLSr.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding)",
        "SMMLSreq": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.Z == 1 [Equal])",
        "SMMLSreq.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMLSreq.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMLSrne": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.Z == 0 [Not Equal])",
        "SMMLSrne.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMLSrne.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMLSrcs": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.C == 1 [Carry Set])",
        "SMMLSrcs.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMLSrcs.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMLSrcc": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.C == 0 [Carry Clear])",
        "SMMLSrcc.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMLSrcc.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMLSrmi": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.N == 1 [Minus])",
        "SMMLSrmi.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMMLSrmi.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMMLSrpl": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.N == 0 [Plus])",
        "SMMLSrpl.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMMLSrpl.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMMLSrvs": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.V == 1 [Overflow])",
        "SMMLSrvs.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMLSrvs.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMLSrvc": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.V == 0 [No Overflow])",
        "SMMLSrvc.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMLSrvc.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMLSrhi": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLSrhi.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLSrhi.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMLSrls": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLSrls.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLSrls.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMLSrge": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLSrge.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLSrge.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMLSrlt": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLSrlt.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLSrlt.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMLSrgt": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLSrgt.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLSrgt.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMLSrle": "Signed Most Significant Word Multiply Subtract (Rounded results) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLSrle.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLSrle.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMLSral": "Signed Most Significant Word Multiply Subtract (Rounded results) (Always)",
        "SMMLSral.n": "Signed Most Significant Word Multiply Subtract (Rounded results) (T 16bits encoding) (Always)",
        "SMMLSral.w": "Signed Most Significant Word Multiply Subtract (Rounded results) (T/A 32bits encoding) (Always)"
      }
    },
    "SMMUL%{mul_r}%{c}%{q}": {
      "description": "Signed Most Significant Word Multiply %{mul_r} %{q} %{c}",
      "variants": {
        "SMMUL": "Signed Most Significant Word Multiply (truncated results)",
        "SMMUL.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding)",
        "SMMUL.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding)",
        "SMMULeq": "Signed Most Significant Word Multiply (truncated results) (If APSR.Z == 1 [Equal])",
        "SMMULeq.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMULeq.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMULne": "Signed Most Significant Word Multiply (truncated results) (If APSR.Z == 0 [Not Equal])",
        "SMMULne.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMULne.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMULcs": "Signed Most Significant Word Multiply (truncated results) (If APSR.C == 1 [Carry Set])",
        "SMMULcs.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMULcs.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMULcc": "Signed Most Significant Word Multiply (truncated results) (If APSR.C == 0 [Carry Clear])",
        "SMMULcc.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMULcc.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMULmi": "Signed Most Significant Word Multiply (truncated results) (If APSR.N == 1 [Minus])",
        "SMMULmi.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMMULmi.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMMULpl": "Signed Most Significant Word Multiply (truncated results) (If APSR.N == 0 [Plus])",
        "SMMULpl.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMMULpl.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMMULvs": "Signed Most Significant Word Multiply (truncated results) (If APSR.V == 1 [Overflow])",
        "SMMULvs.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMULvs.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMULvc": "Signed Most Significant Word Multiply (truncated results) (If APSR.V == 0 [No Overflow])",
        "SMMULvc.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMULvc.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMULhi": "Signed Most Significant Word Multiply (truncated results) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMULhi.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMULhi.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMULls": "Signed Most Significant Word Multiply (truncated results) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMULls.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMULls.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMULge": "Signed Most Significant Word Multiply (truncated results) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMULge.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMULge.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMULlt": "Signed Most Significant Word Multiply (truncated results) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMULlt.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMULlt.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMULgt": "Signed Most Significant Word Multiply (truncated results) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMULgt.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMULgt.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMULle": "Signed Most Significant Word Multiply (truncated results) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMULle.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMULle.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMULal": "Signed Most Significant Word Multiply (truncated results) (Always)",
        "SMMULal.n": "Signed Most Significant Word Multiply (truncated results) (T 16bits encoding) (Always)",
        "SMMULal.w": "Signed Most Significant Word Multiply (truncated results) (T/A 32bits encoding) (Always)",
        "SMMULr": "Signed Most Significant Word Multiply (Rounded results)",
        "SMMULr.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding)",
        "SMMULr.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding)",
        "SMMULreq": "Signed Most Significant Word Multiply (Rounded results) (If APSR.Z == 1 [Equal])",
        "SMMULreq.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMULreq.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMMULrne": "Signed Most Significant Word Multiply (Rounded results) (If APSR.Z == 0 [Not Equal])",
        "SMMULrne.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMULrne.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMMULrcs": "Signed Most Significant Word Multiply (Rounded results) (If APSR.C == 1 [Carry Set])",
        "SMMULrcs.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMULrcs.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMMULrcc": "Signed Most Significant Word Multiply (Rounded results) (If APSR.C == 0 [Carry Clear])",
        "SMMULrcc.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMULrcc.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMMULrmi": "Signed Most Significant Word Multiply (Rounded results) (If APSR.N == 1 [Minus])",
        "SMMULrmi.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMMULrmi.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMMULrpl": "Signed Most Significant Word Multiply (Rounded results) (If APSR.N == 0 [Plus])",
        "SMMULrpl.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMMULrpl.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMMULrvs": "Signed Most Significant Word Multiply (Rounded results) (If APSR.V == 1 [Overflow])",
        "SMMULrvs.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMULrvs.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMMULrvc": "Signed Most Significant Word Multiply (Rounded results) (If APSR.V == 0 [No Overflow])",
        "SMMULrvc.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMULrvc.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMMULrhi": "Signed Most Significant Word Multiply (Rounded results) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMULrhi.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMULrhi.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMMULrls": "Signed Most Significant Word Multiply (Rounded results) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMULrls.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMULrls.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMMULrge": "Signed Most Significant Word Multiply (Rounded results) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMULrge.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMULrge.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMMULrlt": "Signed Most Significant Word Multiply (Rounded results) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMULrlt.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMULrlt.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMMULrgt": "Signed Most Significant Word Multiply (Rounded results) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMULrgt.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMULrgt.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMMULrle": "Signed Most Significant Word Multiply (Rounded results) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMULrle.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMULrle.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMMULral": "Signed Most Significant Word Multiply (Rounded results) (Always)",
        "SMMULral.n": "Signed Most Significant Word Multiply (Rounded results) (T 16bits encoding) (Always)",
        "SMMULral.w": "Signed Most Significant Word Multiply (Rounded results) (T/A 32bits encoding) (Always)"
      }
    },
    "SMUAD%{cross_mult}%{c}%{q}": {
      "description": "Signed Dual Multiply Add %{cross_mult} %{q} %{c}",
      "variants": {
        "SMUAD": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom)",
        "SMUAD.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding)",
        "SMUAD.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding)",
        "SMUADeq": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.Z == 1 [Equal])",
        "SMUADeq.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMUADeq.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMUADne": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.Z == 0 [Not Equal])",
        "SMUADne.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMUADne.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMUADcs": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.C == 1 [Carry Set])",
        "SMUADcs.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMUADcs.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMUADcc": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.C == 0 [Carry Clear])",
        "SMUADcc.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMUADcc.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMUADmi": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.N == 1 [Minus])",
        "SMUADmi.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMUADmi.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMUADpl": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.N == 0 [Plus])",
        "SMUADpl.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMUADpl.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMUADvs": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.V == 1 [Overflow])",
        "SMUADvs.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMUADvs.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMUADvc": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.V == 0 [No Overflow])",
        "SMUADvc.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMUADvc.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMUADhi": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUADhi.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUADhi.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUADls": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUADls.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUADls.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUADge": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUADge.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUADge.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUADlt": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUADlt.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUADlt.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUADgt": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUADgt.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUADgt.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUADle": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUADle.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUADle.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUADal": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (Always)",
        "SMUADal.n": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T 16bits encoding) (Always)",
        "SMUADal.w": "Signed Dual Multiply Add (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (Always)",
        "SMUADx": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top)",
        "SMUADx.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding)",
        "SMUADx.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding)",
        "SMUADxeq": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.Z == 1 [Equal])",
        "SMUADxeq.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMUADxeq.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMUADxne": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.Z == 0 [Not Equal])",
        "SMUADxne.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMUADxne.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMUADxcs": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.C == 1 [Carry Set])",
        "SMUADxcs.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMUADxcs.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMUADxcc": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.C == 0 [Carry Clear])",
        "SMUADxcc.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMUADxcc.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMUADxmi": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.N == 1 [Minus])",
        "SMUADxmi.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMUADxmi.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMUADxpl": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.N == 0 [Plus])",
        "SMUADxpl.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMUADxpl.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMUADxvs": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.V == 1 [Overflow])",
        "SMUADxvs.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMUADxvs.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMUADxvc": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.V == 0 [No Overflow])",
        "SMUADxvc.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMUADxvc.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMUADxhi": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUADxhi.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUADxhi.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUADxls": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUADxls.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUADxls.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUADxge": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUADxge.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUADxge.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUADxlt": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUADxlt.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUADxlt.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUADxgt": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUADxgt.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUADxgt.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUADxle": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUADxle.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUADxle.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUADxal": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (Always)",
        "SMUADxal.n": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T 16bits encoding) (Always)",
        "SMUADxal.w": "Signed Dual Multiply Add (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (Always)"
      }
    },
    "SMUL%{half_parts}%{c}%{q}": {
      "description": "Signed Multiply (halfwords) %{half_parts} %{q} %{c}",
      "variants": {
        "SMUL": "Signed Multiply (halfwords)",
        "SMUL.n": "Signed Multiply (halfwords) (T 16bits encoding)",
        "SMUL.w": "Signed Multiply (halfwords) (T/A 32bits encoding)",
        "SMULeq": "Signed Multiply (halfwords) (If APSR.Z == 1 [Equal])",
        "SMULeq.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULeq.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULne": "Signed Multiply (halfwords) (If APSR.Z == 0 [Not Equal])",
        "SMULne.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULne.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULcs": "Signed Multiply (halfwords) (If APSR.C == 1 [Carry Set])",
        "SMULcs.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULcs.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULcc": "Signed Multiply (halfwords) (If APSR.C == 0 [Carry Clear])",
        "SMULcc.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULcc.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULmi": "Signed Multiply (halfwords) (If APSR.N == 1 [Minus])",
        "SMULmi.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMULmi.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMULpl": "Signed Multiply (halfwords) (If APSR.N == 0 [Plus])",
        "SMULpl.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMULpl.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMULvs": "Signed Multiply (halfwords) (If APSR.V == 1 [Overflow])",
        "SMULvs.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULvs.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULvc": "Signed Multiply (halfwords) (If APSR.V == 0 [No Overflow])",
        "SMULvc.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULvc.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULhi": "Signed Multiply (halfwords) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULhi.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULhi.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULls": "Signed Multiply (halfwords) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULls.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULls.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULge": "Signed Multiply (halfwords) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULge.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULge.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULlt": "Signed Multiply (halfwords) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULlt.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULlt.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULgt": "Signed Multiply (halfwords) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULgt.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULgt.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULle": "Signed Multiply (halfwords) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULle.n": "Signed Multiply (halfwords) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULle.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULal": "Signed Multiply (halfwords) (Always)",
        "SMULal.n": "Signed Multiply (halfwords) (T 16bits encoding) (Always)",
        "SMULal.w": "Signed Multiply (halfwords) (T/A 32bits encoding) (Always)",
        "SMULb": "Signed Multiply (halfwords) (with Bottom half)",
        "SMULb.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding)",
        "SMULb.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding)",
        "SMULbeq": "Signed Multiply (halfwords) (with Bottom half) (If APSR.Z == 1 [Equal])",
        "SMULbeq.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULbeq.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULbne": "Signed Multiply (halfwords) (with Bottom half) (If APSR.Z == 0 [Not Equal])",
        "SMULbne.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULbne.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULbcs": "Signed Multiply (halfwords) (with Bottom half) (If APSR.C == 1 [Carry Set])",
        "SMULbcs.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULbcs.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULbcc": "Signed Multiply (halfwords) (with Bottom half) (If APSR.C == 0 [Carry Clear])",
        "SMULbcc.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULbcc.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULbmi": "Signed Multiply (halfwords) (with Bottom half) (If APSR.N == 1 [Minus])",
        "SMULbmi.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMULbmi.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMULbpl": "Signed Multiply (halfwords) (with Bottom half) (If APSR.N == 0 [Plus])",
        "SMULbpl.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMULbpl.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMULbvs": "Signed Multiply (halfwords) (with Bottom half) (If APSR.V == 1 [Overflow])",
        "SMULbvs.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULbvs.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULbvc": "Signed Multiply (halfwords) (with Bottom half) (If APSR.V == 0 [No Overflow])",
        "SMULbvc.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULbvc.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULbhi": "Signed Multiply (halfwords) (with Bottom half) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULbhi.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULbhi.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULbls": "Signed Multiply (halfwords) (with Bottom half) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULbls.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULbls.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULbge": "Signed Multiply (halfwords) (with Bottom half) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULbge.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULbge.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULblt": "Signed Multiply (halfwords) (with Bottom half) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULblt.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULblt.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULbgt": "Signed Multiply (halfwords) (with Bottom half) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULbgt.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULbgt.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULble": "Signed Multiply (halfwords) (with Bottom half) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULble.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULble.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULbal": "Signed Multiply (halfwords) (with Bottom half) (Always)",
        "SMULbal.n": "Signed Multiply (halfwords) (with Bottom half) (T 16bits encoding) (Always)",
        "SMULbal.w": "Signed Multiply (halfwords) (with Bottom half) (T/A 32bits encoding) (Always)",
        "SMULt": "Signed Multiply (halfwords) (with Bottom top)",
        "SMULt.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding)",
        "SMULt.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding)",
        "SMULteq": "Signed Multiply (halfwords) (with Bottom top) (If APSR.Z == 1 [Equal])",
        "SMULteq.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULteq.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULtne": "Signed Multiply (halfwords) (with Bottom top) (If APSR.Z == 0 [Not Equal])",
        "SMULtne.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULtne.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULtcs": "Signed Multiply (halfwords) (with Bottom top) (If APSR.C == 1 [Carry Set])",
        "SMULtcs.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULtcs.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULtcc": "Signed Multiply (halfwords) (with Bottom top) (If APSR.C == 0 [Carry Clear])",
        "SMULtcc.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULtcc.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULtmi": "Signed Multiply (halfwords) (with Bottom top) (If APSR.N == 1 [Minus])",
        "SMULtmi.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMULtmi.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMULtpl": "Signed Multiply (halfwords) (with Bottom top) (If APSR.N == 0 [Plus])",
        "SMULtpl.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMULtpl.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMULtvs": "Signed Multiply (halfwords) (with Bottom top) (If APSR.V == 1 [Overflow])",
        "SMULtvs.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULtvs.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULtvc": "Signed Multiply (halfwords) (with Bottom top) (If APSR.V == 0 [No Overflow])",
        "SMULtvc.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULtvc.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULthi": "Signed Multiply (halfwords) (with Bottom top) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULthi.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULthi.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULtls": "Signed Multiply (halfwords) (with Bottom top) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULtls.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULtls.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULtge": "Signed Multiply (halfwords) (with Bottom top) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULtge.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULtge.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULtlt": "Signed Multiply (halfwords) (with Bottom top) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULtlt.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULtlt.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULtgt": "Signed Multiply (halfwords) (with Bottom top) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULtgt.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULtgt.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULtle": "Signed Multiply (halfwords) (with Bottom top) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULtle.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULtle.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULtal": "Signed Multiply (halfwords) (with Bottom top) (Always)",
        "SMULtal.n": "Signed Multiply (halfwords) (with Bottom top) (T 16bits encoding) (Always)",
        "SMULtal.w": "Signed Multiply (halfwords) (with Bottom top) (T/A 32bits encoding) (Always)",
        "SMULbb": "Signed Multiply (halfwords) (Bottom half with Bottom half)",
        "SMULbb.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding)",
        "SMULbb.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding)",
        "SMULbbeq": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.Z == 1 [Equal])",
        "SMULbbeq.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULbbeq.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULbbne": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.Z == 0 [Not Equal])",
        "SMULbbne.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULbbne.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULbbcs": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.C == 1 [Carry Set])",
        "SMULbbcs.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULbbcs.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULbbcc": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.C == 0 [Carry Clear])",
        "SMULbbcc.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULbbcc.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULbbmi": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.N == 1 [Minus])",
        "SMULbbmi.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMULbbmi.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMULbbpl": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.N == 0 [Plus])",
        "SMULbbpl.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMULbbpl.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMULbbvs": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.V == 1 [Overflow])",
        "SMULbbvs.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULbbvs.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULbbvc": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.V == 0 [No Overflow])",
        "SMULbbvc.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULbbvc.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULbbhi": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULbbhi.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULbbhi.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULbbls": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULbbls.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULbbls.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULbbge": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULbbge.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULbbge.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULbblt": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULbblt.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULbblt.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULbbgt": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULbbgt.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULbbgt.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULbble": "Signed Multiply (halfwords) (Bottom half with Bottom half) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULbble.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULbble.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULbbal": "Signed Multiply (halfwords) (Bottom half with Bottom half) (Always)",
        "SMULbbal.n": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T 16bits encoding) (Always)",
        "SMULbbal.w": "Signed Multiply (halfwords) (Bottom half with Bottom half) (T/A 32bits encoding) (Always)",
        "SMULbt": "Signed Multiply (halfwords) (Bottom half with Top half)",
        "SMULbt.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding)",
        "SMULbt.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding)",
        "SMULbteq": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.Z == 1 [Equal])",
        "SMULbteq.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULbteq.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULbtne": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.Z == 0 [Not Equal])",
        "SMULbtne.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULbtne.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULbtcs": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.C == 1 [Carry Set])",
        "SMULbtcs.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULbtcs.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULbtcc": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.C == 0 [Carry Clear])",
        "SMULbtcc.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULbtcc.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULbtmi": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.N == 1 [Minus])",
        "SMULbtmi.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMULbtmi.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMULbtpl": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.N == 0 [Plus])",
        "SMULbtpl.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMULbtpl.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMULbtvs": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.V == 1 [Overflow])",
        "SMULbtvs.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULbtvs.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULbtvc": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.V == 0 [No Overflow])",
        "SMULbtvc.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULbtvc.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULbthi": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULbthi.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULbthi.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULbtls": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULbtls.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULbtls.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULbtge": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULbtge.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULbtge.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULbtlt": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULbtlt.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULbtlt.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULbtgt": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULbtgt.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULbtgt.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULbtle": "Signed Multiply (halfwords) (Bottom half with Top half) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULbtle.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULbtle.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULbtal": "Signed Multiply (halfwords) (Bottom half with Top half) (Always)",
        "SMULbtal.n": "Signed Multiply (halfwords) (Bottom half with Top half) (T 16bits encoding) (Always)",
        "SMULbtal.w": "Signed Multiply (halfwords) (Bottom half with Top half) (T/A 32bits encoding) (Always)",
        "SMULtb": "Signed Multiply (halfwords) (Top half with Bottom half)",
        "SMULtb.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding)",
        "SMULtb.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding)",
        "SMULtbeq": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.Z == 1 [Equal])",
        "SMULtbeq.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULtbeq.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULtbne": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.Z == 0 [Not Equal])",
        "SMULtbne.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULtbne.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULtbcs": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.C == 1 [Carry Set])",
        "SMULtbcs.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULtbcs.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULtbcc": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.C == 0 [Carry Clear])",
        "SMULtbcc.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULtbcc.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULtbmi": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.N == 1 [Minus])",
        "SMULtbmi.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMULtbmi.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMULtbpl": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.N == 0 [Plus])",
        "SMULtbpl.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMULtbpl.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMULtbvs": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.V == 1 [Overflow])",
        "SMULtbvs.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULtbvs.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULtbvc": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.V == 0 [No Overflow])",
        "SMULtbvc.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULtbvc.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULtbhi": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULtbhi.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULtbhi.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULtbls": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULtbls.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULtbls.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULtbge": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULtbge.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULtbge.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULtblt": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULtblt.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULtblt.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULtbgt": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULtbgt.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULtbgt.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULtble": "Signed Multiply (halfwords) (Top half with Bottom half) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULtble.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULtble.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULtbal": "Signed Multiply (halfwords) (Top half with Bottom half) (Always)",
        "SMULtbal.n": "Signed Multiply (halfwords) (Top half with Bottom half) (T 16bits encoding) (Always)",
        "SMULtbal.w": "Signed Multiply (halfwords) (Top half with Bottom half) (T/A 32bits encoding) (Always)",
        "SMULtt": "Signed Multiply (halfwords) (Top half with Top half)",
        "SMULtt.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding)",
        "SMULtt.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding)",
        "SMULtteq": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.Z == 1 [Equal])",
        "SMULtteq.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULtteq.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULttne": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.Z == 0 [Not Equal])",
        "SMULttne.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULttne.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULttcs": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.C == 1 [Carry Set])",
        "SMULttcs.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULttcs.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULttcc": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.C == 0 [Carry Clear])",
        "SMULttcc.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULttcc.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULttmi": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.N == 1 [Minus])",
        "SMULttmi.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMULttmi.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMULttpl": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.N == 0 [Plus])",
        "SMULttpl.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMULttpl.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMULttvs": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.V == 1 [Overflow])",
        "SMULttvs.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULttvs.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULttvc": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.V == 0 [No Overflow])",
        "SMULttvc.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULttvc.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULtthi": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULtthi.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULtthi.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULttls": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULttls.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULttls.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULttge": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULttge.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULttge.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULttlt": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULttlt.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULttlt.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULttgt": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULttgt.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULttgt.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULttle": "Signed Multiply (halfwords) (Top half with Top half) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULttle.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULttle.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULttal": "Signed Multiply (halfwords) (Top half with Top half) (Always)",
        "SMULttal.n": "Signed Multiply (halfwords) (Top half with Top half) (T 16bits encoding) (Always)",
        "SMULttal.w": "Signed Multiply (halfwords) (Top half with Top half) (T/A 32bits encoding) (Always)"
      }
    },
    "SMULL%{s}%{c}%{q}": {
      "description": "Signed Multiply Long %{s} %{q} %{c}",
      "variants": {
        "SMULL": "Signed Multiply Long",
        "SMULL.n": "Signed Multiply Long (T 16bits encoding)",
        "SMULL.w": "Signed Multiply Long (T/A 32bits encoding)",
        "SMULLeq": "Signed Multiply Long (If APSR.Z == 1 [Equal])",
        "SMULLeq.n": "Signed Multiply Long (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULLeq.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULLne": "Signed Multiply Long (If APSR.Z == 0 [Not Equal])",
        "SMULLne.n": "Signed Multiply Long (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULLne.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULLcs": "Signed Multiply Long (If APSR.C == 1 [Carry Set])",
        "SMULLcs.n": "Signed Multiply Long (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULLcs.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULLcc": "Signed Multiply Long (If APSR.C == 0 [Carry Clear])",
        "SMULLcc.n": "Signed Multiply Long (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULLcc.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULLmi": "Signed Multiply Long (If APSR.N == 1 [Minus])",
        "SMULLmi.n": "Signed Multiply Long (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMULLmi.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMULLpl": "Signed Multiply Long (If APSR.N == 0 [Plus])",
        "SMULLpl.n": "Signed Multiply Long (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMULLpl.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMULLvs": "Signed Multiply Long (If APSR.V == 1 [Overflow])",
        "SMULLvs.n": "Signed Multiply Long (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULLvs.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULLvc": "Signed Multiply Long (If APSR.V == 0 [No Overflow])",
        "SMULLvc.n": "Signed Multiply Long (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULLvc.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULLhi": "Signed Multiply Long (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULLhi.n": "Signed Multiply Long (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULLhi.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULLls": "Signed Multiply Long (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULLls.n": "Signed Multiply Long (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULLls.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULLge": "Signed Multiply Long (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULLge.n": "Signed Multiply Long (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULLge.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULLlt": "Signed Multiply Long (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULLlt.n": "Signed Multiply Long (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULLlt.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULLgt": "Signed Multiply Long (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULLgt.n": "Signed Multiply Long (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULLgt.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULLle": "Signed Multiply Long (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULLle.n": "Signed Multiply Long (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULLle.w": "Signed Multiply Long (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULLal": "Signed Multiply Long (Always)",
        "SMULLal.n": "Signed Multiply Long (T 16bits encoding) (Always)",
        "SMULLal.w": "Signed Multiply Long (T/A 32bits encoding) (Always)",
        "SMULLs": "Signed Multiply Long (Update APSR)",
        "SMULLs.n": "Signed Multiply Long (Update APSR) (T 16bits encoding)",
        "SMULLs.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding)",
        "SMULLseq": "Signed Multiply Long (Update APSR) (If APSR.Z == 1 [Equal])",
        "SMULLseq.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULLseq.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULLsne": "Signed Multiply Long (Update APSR) (If APSR.Z == 0 [Not Equal])",
        "SMULLsne.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULLsne.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULLscs": "Signed Multiply Long (Update APSR) (If APSR.C == 1 [Carry Set])",
        "SMULLscs.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULLscs.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULLscc": "Signed Multiply Long (Update APSR) (If APSR.C == 0 [Carry Clear])",
        "SMULLscc.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULLscc.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULLsmi": "Signed Multiply Long (Update APSR) (If APSR.N == 1 [Minus])",
        "SMULLsmi.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMULLsmi.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMULLspl": "Signed Multiply Long (Update APSR) (If APSR.N == 0 [Plus])",
        "SMULLspl.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMULLspl.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMULLsvs": "Signed Multiply Long (Update APSR) (If APSR.V == 1 [Overflow])",
        "SMULLsvs.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULLsvs.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULLsvc": "Signed Multiply Long (Update APSR) (If APSR.V == 0 [No Overflow])",
        "SMULLsvc.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULLsvc.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULLshi": "Signed Multiply Long (Update APSR) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULLshi.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULLshi.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULLsls": "Signed Multiply Long (Update APSR) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULLsls.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULLsls.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULLsge": "Signed Multiply Long (Update APSR) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULLsge.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULLsge.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULLslt": "Signed Multiply Long (Update APSR) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULLslt.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULLslt.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULLsgt": "Signed Multiply Long (Update APSR) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULLsgt.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULLsgt.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULLsle": "Signed Multiply Long (Update APSR) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULLsle.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULLsle.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULLsal": "Signed Multiply Long (Update APSR) (Always)",
        "SMULLsal.n": "Signed Multiply Long (Update APSR) (T 16bits encoding) (Always)",
        "SMULLsal.w": "Signed Multiply Long (Update APSR) (T/A 32bits encoding) (Always)"
      }
    },
    "SMULW%{half_parts}%{c}%{q}": {
      "description": "Signed Multiply (word by halfword) %{q} %{c}",
      "variants": {
        "SMULWb": "Signed Multiply (word by halfword)",
        "SMULWb.n": "Signed Multiply (word by halfword) (T 16bits encoding)",
        "SMULWb.w": "Signed Multiply (word by halfword) (T/A 32bits encoding)",
        "SMULWbeq": "Signed Multiply (word by halfword) (If APSR.Z == 1 [Equal])",
        "SMULWbeq.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULWbeq.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULWbne": "Signed Multiply (word by halfword) (If APSR.Z == 0 [Not Equal])",
        "SMULWbne.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULWbne.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULWbcs": "Signed Multiply (word by halfword) (If APSR.C == 1 [Carry Set])",
        "SMULWbcs.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULWbcs.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULWbcc": "Signed Multiply (word by halfword) (If APSR.C == 0 [Carry Clear])",
        "SMULWbcc.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULWbcc.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULWbmi": "Signed Multiply (word by halfword) (If APSR.N == 1 [Minus])",
        "SMULWbmi.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMULWbmi.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMULWbpl": "Signed Multiply (word by halfword) (If APSR.N == 0 [Plus])",
        "SMULWbpl.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMULWbpl.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMULWbvs": "Signed Multiply (word by halfword) (If APSR.V == 1 [Overflow])",
        "SMULWbvs.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULWbvs.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULWbvc": "Signed Multiply (word by halfword) (If APSR.V == 0 [No Overflow])",
        "SMULWbvc.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULWbvc.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULWbhi": "Signed Multiply (word by halfword) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULWbhi.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULWbhi.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULWbls": "Signed Multiply (word by halfword) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULWbls.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULWbls.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULWbge": "Signed Multiply (word by halfword) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULWbge.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULWbge.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULWblt": "Signed Multiply (word by halfword) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULWblt.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULWblt.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULWbgt": "Signed Multiply (word by halfword) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULWbgt.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULWbgt.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULWble": "Signed Multiply (word by halfword) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULWble.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULWble.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULWbal": "Signed Multiply (word by halfword) (Always)",
        "SMULWbal.n": "Signed Multiply (word by halfword) (T 16bits encoding) (Always)",
        "SMULWbal.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (Always)",
        "SMULWt": "Signed Multiply (word by halfword)",
        "SMULWt.n": "Signed Multiply (word by halfword) (T 16bits encoding)",
        "SMULWt.w": "Signed Multiply (word by halfword) (T/A 32bits encoding)",
        "SMULWteq": "Signed Multiply (word by halfword) (If APSR.Z == 1 [Equal])",
        "SMULWteq.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULWteq.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMULWtne": "Signed Multiply (word by halfword) (If APSR.Z == 0 [Not Equal])",
        "SMULWtne.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULWtne.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMULWtcs": "Signed Multiply (word by halfword) (If APSR.C == 1 [Carry Set])",
        "SMULWtcs.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULWtcs.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMULWtcc": "Signed Multiply (word by halfword) (If APSR.C == 0 [Carry Clear])",
        "SMULWtcc.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULWtcc.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMULWtmi": "Signed Multiply (word by halfword) (If APSR.N == 1 [Minus])",
        "SMULWtmi.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMULWtmi.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMULWtpl": "Signed Multiply (word by halfword) (If APSR.N == 0 [Plus])",
        "SMULWtpl.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMULWtpl.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMULWtvs": "Signed Multiply (word by halfword) (If APSR.V == 1 [Overflow])",
        "SMULWtvs.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULWtvs.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMULWtvc": "Signed Multiply (word by halfword) (If APSR.V == 0 [No Overflow])",
        "SMULWtvc.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULWtvc.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMULWthi": "Signed Multiply (word by halfword) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULWthi.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULWthi.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMULWtls": "Signed Multiply (word by halfword) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULWtls.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULWtls.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMULWtge": "Signed Multiply (word by halfword) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULWtge.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULWtge.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMULWtlt": "Signed Multiply (word by halfword) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULWtlt.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULWtlt.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMULWtgt": "Signed Multiply (word by halfword) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULWtgt.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULWtgt.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMULWtle": "Signed Multiply (word by halfword) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULWtle.n": "Signed Multiply (word by halfword) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULWtle.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMULWtal": "Signed Multiply (word by halfword) (Always)",
        "SMULWtal.n": "Signed Multiply (word by halfword) (T 16bits encoding) (Always)",
        "SMULWtal.w": "Signed Multiply (word by halfword) (T/A 32bits encoding) (Always)"
      }
    },
    "SMUSD%{cross_mult}%{c}%{q}": {
      "description": "Signed Multiply Subtract Dual %{cross_mult} %{q} %{c}",
      "variants": {
        "SMUSD": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom)",
        "SMUSD.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding)",
        "SMUSD.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding)",
        "SMUSDeq": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.Z == 1 [Equal])",
        "SMUSDeq.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMUSDeq.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMUSDne": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.Z == 0 [Not Equal])",
        "SMUSDne.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMUSDne.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMUSDcs": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.C == 1 [Carry Set])",
        "SMUSDcs.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMUSDcs.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMUSDcc": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.C == 0 [Carry Clear])",
        "SMUSDcc.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMUSDcc.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMUSDmi": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N == 1 [Minus])",
        "SMUSDmi.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMUSDmi.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMUSDpl": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N == 0 [Plus])",
        "SMUSDpl.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMUSDpl.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMUSDvs": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.V == 1 [Overflow])",
        "SMUSDvs.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMUSDvs.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMUSDvc": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.V == 0 [No Overflow])",
        "SMUSDvc.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMUSDvc.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMUSDhi": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUSDhi.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUSDhi.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUSDls": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUSDls.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUSDls.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUSDge": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUSDge.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUSDge.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUSDlt": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUSDlt.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUSDlt.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUSDgt": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUSDgt.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUSDgt.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUSDle": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUSDle.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUSDle.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUSDal": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (Always)",
        "SMUSDal.n": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T 16bits encoding) (Always)",
        "SMUSDal.w": "Signed Multiply Subtract Dual (Top x Top | Bottom x Bottom) (T/A 32bits encoding) (Always)",
        "SMUSDx": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top)",
        "SMUSDx.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding)",
        "SMUSDx.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding)",
        "SMUSDxeq": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.Z == 1 [Equal])",
        "SMUSDxeq.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SMUSDxeq.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SMUSDxne": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.Z == 0 [Not Equal])",
        "SMUSDxne.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMUSDxne.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SMUSDxcs": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.C == 1 [Carry Set])",
        "SMUSDxcs.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMUSDxcs.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SMUSDxcc": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.C == 0 [Carry Clear])",
        "SMUSDxcc.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMUSDxcc.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SMUSDxmi": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N == 1 [Minus])",
        "SMUSDxmi.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SMUSDxmi.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SMUSDxpl": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N == 0 [Plus])",
        "SMUSDxpl.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SMUSDxpl.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SMUSDxvs": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.V == 1 [Overflow])",
        "SMUSDxvs.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SMUSDxvs.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SMUSDxvc": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.V == 0 [No Overflow])",
        "SMUSDxvc.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMUSDxvc.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SMUSDxhi": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUSDxhi.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUSDxhi.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SMUSDxls": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUSDxls.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUSDxls.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SMUSDxge": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUSDxge.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUSDxge.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SMUSDxlt": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUSDxlt.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUSDxlt.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SMUSDxgt": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUSDxgt.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUSDxgt.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SMUSDxle": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUSDxle.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUSDxle.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SMUSDxal": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (Always)",
        "SMUSDxal.n": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T 16bits encoding) (Always)",
        "SMUSDxal.w": "Signed Multiply Subtract Dual (Top x Bottom | Bottom x Top) (T/A 32bits encoding) (Always)"
      }
    },
    "SRS%{amode}%{c}%{q}": {
      "description": "Store Return State %{q} %{c}",
      "variants": {
        "SRS": "Store Return State",
        "SRS.n": "Store Return State (T 16bits encoding)",
        "SRS.w": "Store Return State (T/A 32bits encoding)",
        "SRSeq": "Store Return State (If APSR.Z == 1 [Equal])",
        "SRSeq.n": "Store Return State (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SRSeq.w": "Store Return State (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SRSne": "Store Return State (If APSR.Z == 0 [Not Equal])",
        "SRSne.n": "Store Return State (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SRSne.w": "Store Return State (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SRScs": "Store Return State (If APSR.C == 1 [Carry Set])",
        "SRScs.n": "Store Return State (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SRScs.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SRScc": "Store Return State (If APSR.C == 0 [Carry Clear])",
        "SRScc.n": "Store Return State (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SRScc.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SRSmi": "Store Return State (If APSR.N == 1 [Minus])",
        "SRSmi.n": "Store Return State (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SRSmi.w": "Store Return State (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SRSpl": "Store Return State (If APSR.N == 0 [Plus])",
        "SRSpl.n": "Store Return State (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SRSpl.w": "Store Return State (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SRSvs": "Store Return State (If APSR.V == 1 [Overflow])",
        "SRSvs.n": "Store Return State (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SRSvs.w": "Store Return State (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SRSvc": "Store Return State (If APSR.V == 0 [No Overflow])",
        "SRSvc.n": "Store Return State (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SRSvc.w": "Store Return State (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SRShi": "Store Return State (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRShi.n": "Store Return State (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRShi.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSls": "Store Return State (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSls.n": "Store Return State (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSls.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSge": "Store Return State (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSge.n": "Store Return State (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSge.w": "Store Return State (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSlt": "Store Return State (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSlt.n": "Store Return State (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSlt.w": "Store Return State (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSgt": "Store Return State (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSgt.n": "Store Return State (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSgt.w": "Store Return State (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSle": "Store Return State (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSle.n": "Store Return State (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSle.w": "Store Return State (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSal": "Store Return State (Always)",
        "SRSal.n": "Store Return State (T 16bits encoding) (Always)",
        "SRSal.w": "Store Return State (T/A 32bits encoding) (Always)",
        "SRSia": "Store Return State",
        "SRSia.n": "Store Return State (T 16bits encoding)",
        "SRSia.w": "Store Return State (T/A 32bits encoding)",
        "SRSiaeq": "Store Return State (If APSR.Z == 1 [Equal])",
        "SRSiaeq.n": "Store Return State (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SRSiaeq.w": "Store Return State (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SRSiane": "Store Return State (If APSR.Z == 0 [Not Equal])",
        "SRSiane.n": "Store Return State (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SRSiane.w": "Store Return State (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SRSiacs": "Store Return State (If APSR.C == 1 [Carry Set])",
        "SRSiacs.n": "Store Return State (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SRSiacs.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SRSiacc": "Store Return State (If APSR.C == 0 [Carry Clear])",
        "SRSiacc.n": "Store Return State (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SRSiacc.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SRSiami": "Store Return State (If APSR.N == 1 [Minus])",
        "SRSiami.n": "Store Return State (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SRSiami.w": "Store Return State (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SRSiapl": "Store Return State (If APSR.N == 0 [Plus])",
        "SRSiapl.n": "Store Return State (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SRSiapl.w": "Store Return State (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SRSiavs": "Store Return State (If APSR.V == 1 [Overflow])",
        "SRSiavs.n": "Store Return State (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SRSiavs.w": "Store Return State (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SRSiavc": "Store Return State (If APSR.V == 0 [No Overflow])",
        "SRSiavc.n": "Store Return State (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SRSiavc.w": "Store Return State (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SRSiahi": "Store Return State (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSiahi.n": "Store Return State (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSiahi.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSials": "Store Return State (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSials.n": "Store Return State (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSials.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSiage": "Store Return State (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSiage.n": "Store Return State (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSiage.w": "Store Return State (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSialt": "Store Return State (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSialt.n": "Store Return State (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSialt.w": "Store Return State (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSiagt": "Store Return State (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSiagt.n": "Store Return State (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSiagt.w": "Store Return State (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSiale": "Store Return State (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSiale.n": "Store Return State (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSiale.w": "Store Return State (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSiaal": "Store Return State (Always)",
        "SRSiaal.n": "Store Return State (T 16bits encoding) (Always)",
        "SRSiaal.w": "Store Return State (T/A 32bits encoding) (Always)",
        "SRSea": "Store Return State",
        "SRSea.n": "Store Return State (T 16bits encoding)",
        "SRSea.w": "Store Return State (T/A 32bits encoding)",
        "SRSeaeq": "Store Return State (If APSR.Z == 1 [Equal])",
        "SRSeaeq.n": "Store Return State (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SRSeaeq.w": "Store Return State (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SRSeane": "Store Return State (If APSR.Z == 0 [Not Equal])",
        "SRSeane.n": "Store Return State (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SRSeane.w": "Store Return State (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SRSeacs": "Store Return State (If APSR.C == 1 [Carry Set])",
        "SRSeacs.n": "Store Return State (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SRSeacs.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SRSeacc": "Store Return State (If APSR.C == 0 [Carry Clear])",
        "SRSeacc.n": "Store Return State (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SRSeacc.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SRSeami": "Store Return State (If APSR.N == 1 [Minus])",
        "SRSeami.n": "Store Return State (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SRSeami.w": "Store Return State (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SRSeapl": "Store Return State (If APSR.N == 0 [Plus])",
        "SRSeapl.n": "Store Return State (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SRSeapl.w": "Store Return State (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SRSeavs": "Store Return State (If APSR.V == 1 [Overflow])",
        "SRSeavs.n": "Store Return State (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SRSeavs.w": "Store Return State (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SRSeavc": "Store Return State (If APSR.V == 0 [No Overflow])",
        "SRSeavc.n": "Store Return State (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SRSeavc.w": "Store Return State (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SRSeahi": "Store Return State (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSeahi.n": "Store Return State (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSeahi.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSeals": "Store Return State (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSeals.n": "Store Return State (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSeals.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSeage": "Store Return State (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSeage.n": "Store Return State (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSeage.w": "Store Return State (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSealt": "Store Return State (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSealt.n": "Store Return State (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSealt.w": "Store Return State (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSeagt": "Store Return State (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSeagt.n": "Store Return State (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSeagt.w": "Store Return State (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSeale": "Store Return State (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSeale.n": "Store Return State (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSeale.w": "Store Return State (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSeaal": "Store Return State (Always)",
        "SRSeaal.n": "Store Return State (T 16bits encoding) (Always)",
        "SRSeaal.w": "Store Return State (T/A 32bits encoding) (Always)",
        "SRSdb": "Store Return State",
        "SRSdb.n": "Store Return State (T 16bits encoding)",
        "SRSdb.w": "Store Return State (T/A 32bits encoding)",
        "SRSdbeq": "Store Return State (If APSR.Z == 1 [Equal])",
        "SRSdbeq.n": "Store Return State (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SRSdbeq.w": "Store Return State (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SRSdbne": "Store Return State (If APSR.Z == 0 [Not Equal])",
        "SRSdbne.n": "Store Return State (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SRSdbne.w": "Store Return State (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SRSdbcs": "Store Return State (If APSR.C == 1 [Carry Set])",
        "SRSdbcs.n": "Store Return State (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SRSdbcs.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SRSdbcc": "Store Return State (If APSR.C == 0 [Carry Clear])",
        "SRSdbcc.n": "Store Return State (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SRSdbcc.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SRSdbmi": "Store Return State (If APSR.N == 1 [Minus])",
        "SRSdbmi.n": "Store Return State (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SRSdbmi.w": "Store Return State (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SRSdbpl": "Store Return State (If APSR.N == 0 [Plus])",
        "SRSdbpl.n": "Store Return State (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SRSdbpl.w": "Store Return State (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SRSdbvs": "Store Return State (If APSR.V == 1 [Overflow])",
        "SRSdbvs.n": "Store Return State (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SRSdbvs.w": "Store Return State (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SRSdbvc": "Store Return State (If APSR.V == 0 [No Overflow])",
        "SRSdbvc.n": "Store Return State (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SRSdbvc.w": "Store Return State (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SRSdbhi": "Store Return State (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSdbhi.n": "Store Return State (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSdbhi.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSdbls": "Store Return State (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSdbls.n": "Store Return State (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSdbls.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSdbge": "Store Return State (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSdbge.n": "Store Return State (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSdbge.w": "Store Return State (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSdblt": "Store Return State (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSdblt.n": "Store Return State (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSdblt.w": "Store Return State (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSdbgt": "Store Return State (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSdbgt.n": "Store Return State (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSdbgt.w": "Store Return State (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSdble": "Store Return State (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSdble.n": "Store Return State (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSdble.w": "Store Return State (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSdbal": "Store Return State (Always)",
        "SRSdbal.n": "Store Return State (T 16bits encoding) (Always)",
        "SRSdbal.w": "Store Return State (T/A 32bits encoding) (Always)",
        "SRSfd": "Store Return State",
        "SRSfd.n": "Store Return State (T 16bits encoding)",
        "SRSfd.w": "Store Return State (T/A 32bits encoding)",
        "SRSfdeq": "Store Return State (If APSR.Z == 1 [Equal])",
        "SRSfdeq.n": "Store Return State (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SRSfdeq.w": "Store Return State (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SRSfdne": "Store Return State (If APSR.Z == 0 [Not Equal])",
        "SRSfdne.n": "Store Return State (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SRSfdne.w": "Store Return State (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SRSfdcs": "Store Return State (If APSR.C == 1 [Carry Set])",
        "SRSfdcs.n": "Store Return State (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SRSfdcs.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SRSfdcc": "Store Return State (If APSR.C == 0 [Carry Clear])",
        "SRSfdcc.n": "Store Return State (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SRSfdcc.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SRSfdmi": "Store Return State (If APSR.N == 1 [Minus])",
        "SRSfdmi.n": "Store Return State (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SRSfdmi.w": "Store Return State (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SRSfdpl": "Store Return State (If APSR.N == 0 [Plus])",
        "SRSfdpl.n": "Store Return State (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SRSfdpl.w": "Store Return State (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SRSfdvs": "Store Return State (If APSR.V == 1 [Overflow])",
        "SRSfdvs.n": "Store Return State (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SRSfdvs.w": "Store Return State (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SRSfdvc": "Store Return State (If APSR.V == 0 [No Overflow])",
        "SRSfdvc.n": "Store Return State (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SRSfdvc.w": "Store Return State (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SRSfdhi": "Store Return State (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSfdhi.n": "Store Return State (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSfdhi.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SRSfdls": "Store Return State (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSfdls.n": "Store Return State (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSfdls.w": "Store Return State (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SRSfdge": "Store Return State (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSfdge.n": "Store Return State (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSfdge.w": "Store Return State (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SRSfdlt": "Store Return State (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSfdlt.n": "Store Return State (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSfdlt.w": "Store Return State (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SRSfdgt": "Store Return State (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSfdgt.n": "Store Return State (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSfdgt.w": "Store Return State (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SRSfdle": "Store Return State (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSfdle.n": "Store Return State (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSfdle.w": "Store Return State (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SRSfdal": "Store Return State (Always)",
        "SRSfdal.n": "Store Return State (T 16bits encoding) (Always)",
        "SRSfdal.w": "Store Return State (T/A 32bits encoding) (Always)"
      }
    },
    "SSAT%{c}%{q}": {
      "description": "Signed Saturate %{q} %{c}",
      "variants": {
        "SSAT": "Signed Saturate",
        "SSAT.n": "Signed Saturate (T 16bits encoding)",
        "SSAT.w": "Signed Saturate (T/A 32bits encoding)",
        "SSATeq": "Signed Saturate (If APSR.Z == 1 [Equal])",
        "SSATeq.n": "Signed Saturate (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SSATeq.w": "Signed Saturate (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SSATne": "Signed Saturate (If APSR.Z == 0 [Not Equal])",
        "SSATne.n": "Signed Saturate (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SSATne.w": "Signed Saturate (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SSATcs": "Signed Saturate (If APSR.C == 1 [Carry Set])",
        "SSATcs.n": "Signed Saturate (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SSATcs.w": "Signed Saturate (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SSATcc": "Signed Saturate (If APSR.C == 0 [Carry Clear])",
        "SSATcc.n": "Signed Saturate (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SSATcc.w": "Signed Saturate (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SSATmi": "Signed Saturate (If APSR.N == 1 [Minus])",
        "SSATmi.n": "Signed Saturate (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SSATmi.w": "Signed Saturate (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SSATpl": "Signed Saturate (If APSR.N == 0 [Plus])",
        "SSATpl.n": "Signed Saturate (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SSATpl.w": "Signed Saturate (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SSATvs": "Signed Saturate (If APSR.V == 1 [Overflow])",
        "SSATvs.n": "Signed Saturate (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SSATvs.w": "Signed Saturate (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SSATvc": "Signed Saturate (If APSR.V == 0 [No Overflow])",
        "SSATvc.n": "Signed Saturate (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SSATvc.w": "Signed Saturate (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SSAThi": "Signed Saturate (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSAThi.n": "Signed Saturate (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSAThi.w": "Signed Saturate (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSATls": "Signed Saturate (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSATls.n": "Signed Saturate (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSATls.w": "Signed Saturate (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSATge": "Signed Saturate (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSATge.n": "Signed Saturate (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSATge.w": "Signed Saturate (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSATlt": "Signed Saturate (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSATlt.n": "Signed Saturate (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSATlt.w": "Signed Saturate (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSATgt": "Signed Saturate (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSATgt.n": "Signed Saturate (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSATgt.w": "Signed Saturate (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSATle": "Signed Saturate (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSATle.n": "Signed Saturate (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSATle.w": "Signed Saturate (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSATal": "Signed Saturate (Always)",
        "SSATal.n": "Signed Saturate (T 16bits encoding) (Always)",
        "SSATal.w": "Signed Saturate (T/A 32bits encoding) (Always)"
      }
    },
    "SSAT16%{c}%{q}": {
      "description": "Signed Saturate 16 %{q} %{c}",
      "variants": {
        "SSAT16": "Signed Saturate 16",
        "SSAT16.n": "Signed Saturate 16 (T 16bits encoding)",
        "SSAT16.w": "Signed Saturate 16 (T/A 32bits encoding)",
        "SSAT16eq": "Signed Saturate 16 (If APSR.Z == 1 [Equal])",
        "SSAT16eq.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SSAT16eq.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SSAT16ne": "Signed Saturate 16 (If APSR.Z == 0 [Not Equal])",
        "SSAT16ne.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SSAT16ne.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SSAT16cs": "Signed Saturate 16 (If APSR.C == 1 [Carry Set])",
        "SSAT16cs.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SSAT16cs.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SSAT16cc": "Signed Saturate 16 (If APSR.C == 0 [Carry Clear])",
        "SSAT16cc.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SSAT16cc.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SSAT16mi": "Signed Saturate 16 (If APSR.N == 1 [Minus])",
        "SSAT16mi.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SSAT16mi.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SSAT16pl": "Signed Saturate 16 (If APSR.N == 0 [Plus])",
        "SSAT16pl.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SSAT16pl.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SSAT16vs": "Signed Saturate 16 (If APSR.V == 1 [Overflow])",
        "SSAT16vs.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SSAT16vs.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SSAT16vc": "Signed Saturate 16 (If APSR.V == 0 [No Overflow])",
        "SSAT16vc.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SSAT16vc.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SSAT16hi": "Signed Saturate 16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSAT16hi.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSAT16hi.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSAT16ls": "Signed Saturate 16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSAT16ls.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSAT16ls.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSAT16ge": "Signed Saturate 16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSAT16ge.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSAT16ge.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSAT16lt": "Signed Saturate 16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSAT16lt.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSAT16lt.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSAT16gt": "Signed Saturate 16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSAT16gt.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSAT16gt.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSAT16le": "Signed Saturate 16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSAT16le.n": "Signed Saturate 16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSAT16le.w": "Signed Saturate 16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSAT16al": "Signed Saturate 16 (Always)",
        "SSAT16al.n": "Signed Saturate 16 (T 16bits encoding) (Always)",
        "SSAT16al.w": "Signed Saturate 16 (T/A 32bits encoding) (Always)"
      }
    },
    "SSAX%{c}%{q}": {
      "description": "Signed Subtract and Add with Exchange %{q} %{c}",
      "variants": {
        "SSAX": "Signed Subtract and Add with Exchange",
        "SSAX.n": "Signed Subtract and Add with Exchange (T 16bits encoding)",
        "SSAX.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding)",
        "SSAXeq": "Signed Subtract and Add with Exchange (If APSR.Z == 1 [Equal])",
        "SSAXeq.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SSAXeq.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SSAXne": "Signed Subtract and Add with Exchange (If APSR.Z == 0 [Not Equal])",
        "SSAXne.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SSAXne.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SSAXcs": "Signed Subtract and Add with Exchange (If APSR.C == 1 [Carry Set])",
        "SSAXcs.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SSAXcs.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SSAXcc": "Signed Subtract and Add with Exchange (If APSR.C == 0 [Carry Clear])",
        "SSAXcc.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SSAXcc.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SSAXmi": "Signed Subtract and Add with Exchange (If APSR.N == 1 [Minus])",
        "SSAXmi.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SSAXmi.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SSAXpl": "Signed Subtract and Add with Exchange (If APSR.N == 0 [Plus])",
        "SSAXpl.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SSAXpl.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SSAXvs": "Signed Subtract and Add with Exchange (If APSR.V == 1 [Overflow])",
        "SSAXvs.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SSAXvs.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SSAXvc": "Signed Subtract and Add with Exchange (If APSR.V == 0 [No Overflow])",
        "SSAXvc.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SSAXvc.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SSAXhi": "Signed Subtract and Add with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSAXhi.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSAXhi.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSAXls": "Signed Subtract and Add with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSAXls.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSAXls.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSAXge": "Signed Subtract and Add with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSAXge.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSAXge.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSAXlt": "Signed Subtract and Add with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSAXlt.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSAXlt.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSAXgt": "Signed Subtract and Add with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSAXgt.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSAXgt.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSAXle": "Signed Subtract and Add with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSAXle.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSAXle.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSAXal": "Signed Subtract and Add with Exchange (Always)",
        "SSAXal.n": "Signed Subtract and Add with Exchange (T 16bits encoding) (Always)",
        "SSAXal.w": "Signed Subtract and Add with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "SSUB16%{c}%{q}": {
      "description": "Signed Subtract 16 %{q} %{c}",
      "variants": {
        "SSUB16": "Signed Subtract 16",
        "SSUB16.n": "Signed Subtract 16 (T 16bits encoding)",
        "SSUB16.w": "Signed Subtract 16 (T/A 32bits encoding)",
        "SSUB16eq": "Signed Subtract 16 (If APSR.Z == 1 [Equal])",
        "SSUB16eq.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SSUB16eq.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SSUB16ne": "Signed Subtract 16 (If APSR.Z == 0 [Not Equal])",
        "SSUB16ne.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SSUB16ne.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SSUB16cs": "Signed Subtract 16 (If APSR.C == 1 [Carry Set])",
        "SSUB16cs.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SSUB16cs.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SSUB16cc": "Signed Subtract 16 (If APSR.C == 0 [Carry Clear])",
        "SSUB16cc.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SSUB16cc.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SSUB16mi": "Signed Subtract 16 (If APSR.N == 1 [Minus])",
        "SSUB16mi.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SSUB16mi.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SSUB16pl": "Signed Subtract 16 (If APSR.N == 0 [Plus])",
        "SSUB16pl.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SSUB16pl.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SSUB16vs": "Signed Subtract 16 (If APSR.V == 1 [Overflow])",
        "SSUB16vs.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SSUB16vs.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SSUB16vc": "Signed Subtract 16 (If APSR.V == 0 [No Overflow])",
        "SSUB16vc.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SSUB16vc.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SSUB16hi": "Signed Subtract 16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSUB16hi.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSUB16hi.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSUB16ls": "Signed Subtract 16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSUB16ls.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSUB16ls.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSUB16ge": "Signed Subtract 16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSUB16ge.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSUB16ge.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSUB16lt": "Signed Subtract 16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSUB16lt.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSUB16lt.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSUB16gt": "Signed Subtract 16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSUB16gt.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSUB16gt.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSUB16le": "Signed Subtract 16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSUB16le.n": "Signed Subtract 16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSUB16le.w": "Signed Subtract 16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSUB16al": "Signed Subtract 16 (Always)",
        "SSUB16al.n": "Signed Subtract 16 (T 16bits encoding) (Always)",
        "SSUB16al.w": "Signed Subtract 16 (T/A 32bits encoding) (Always)"
      }
    },
    "SSUB8%{c}%{q}": {
      "description": "Signed Subtract 8 %{q} %{c}",
      "variants": {
        "SSUB8": "Signed Subtract 8",
        "SSUB8.n": "Signed Subtract 8 (T 16bits encoding)",
        "SSUB8.w": "Signed Subtract 8 (T/A 32bits encoding)",
        "SSUB8eq": "Signed Subtract 8 (If APSR.Z == 1 [Equal])",
        "SSUB8eq.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SSUB8eq.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SSUB8ne": "Signed Subtract 8 (If APSR.Z == 0 [Not Equal])",
        "SSUB8ne.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SSUB8ne.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SSUB8cs": "Signed Subtract 8 (If APSR.C == 1 [Carry Set])",
        "SSUB8cs.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SSUB8cs.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SSUB8cc": "Signed Subtract 8 (If APSR.C == 0 [Carry Clear])",
        "SSUB8cc.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SSUB8cc.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SSUB8mi": "Signed Subtract 8 (If APSR.N == 1 [Minus])",
        "SSUB8mi.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SSUB8mi.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SSUB8pl": "Signed Subtract 8 (If APSR.N == 0 [Plus])",
        "SSUB8pl.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SSUB8pl.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SSUB8vs": "Signed Subtract 8 (If APSR.V == 1 [Overflow])",
        "SSUB8vs.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SSUB8vs.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SSUB8vc": "Signed Subtract 8 (If APSR.V == 0 [No Overflow])",
        "SSUB8vc.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SSUB8vc.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SSUB8hi": "Signed Subtract 8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSUB8hi.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSUB8hi.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SSUB8ls": "Signed Subtract 8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSUB8ls.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSUB8ls.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SSUB8ge": "Signed Subtract 8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSUB8ge.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSUB8ge.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SSUB8lt": "Signed Subtract 8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSUB8lt.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSUB8lt.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SSUB8gt": "Signed Subtract 8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSUB8gt.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSUB8gt.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SSUB8le": "Signed Subtract 8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSUB8le.n": "Signed Subtract 8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSUB8le.w": "Signed Subtract 8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SSUB8al": "Signed Subtract 8 (Always)",
        "SSUB8al.n": "Signed Subtract 8 (T 16bits encoding) (Always)",
        "SSUB8al.w": "Signed Subtract 8 (T/A 32bits encoding) (Always)"
      }
    },
    "STC%{coproc_l}%{coproc_2}%{c}%{q}": {
      "description": "Store Coprocessor %{q} %{c}",
      "variants": {
        "STC": "Store Coprocessor",
        "STC.n": "Store Coprocessor (T 16bits encoding)",
        "STC.w": "Store Coprocessor (T/A 32bits encoding)",
        "STCeq": "Store Coprocessor (If APSR.Z == 1 [Equal])",
        "STCeq.n": "Store Coprocessor (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STCeq.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STCne": "Store Coprocessor (If APSR.Z == 0 [Not Equal])",
        "STCne.n": "Store Coprocessor (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STCne.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STCcs": "Store Coprocessor (If APSR.C == 1 [Carry Set])",
        "STCcs.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STCcs.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STCcc": "Store Coprocessor (If APSR.C == 0 [Carry Clear])",
        "STCcc.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STCcc.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STCmi": "Store Coprocessor (If APSR.N == 1 [Minus])",
        "STCmi.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STCmi.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STCpl": "Store Coprocessor (If APSR.N == 0 [Plus])",
        "STCpl.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STCpl.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STCvs": "Store Coprocessor (If APSR.V == 1 [Overflow])",
        "STCvs.n": "Store Coprocessor (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STCvs.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STCvc": "Store Coprocessor (If APSR.V == 0 [No Overflow])",
        "STCvc.n": "Store Coprocessor (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STCvc.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STChi": "Store Coprocessor (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STChi.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STChi.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STCls": "Store Coprocessor (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STCls.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STCls.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STCge": "Store Coprocessor (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STCge.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STCge.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STClt": "Store Coprocessor (If APSR.N != APSR.V [Signed Lesser Than])",
        "STClt.n": "Store Coprocessor (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STClt.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STCgt": "Store Coprocessor (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STCgt.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STCgt.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STCle": "Store Coprocessor (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STCle.n": "Store Coprocessor (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STCle.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STCal": "Store Coprocessor (Always)",
        "STCal.n": "Store Coprocessor (T 16bits encoding) (Always)",
        "STCal.w": "Store Coprocessor (T/A 32bits encoding) (Always)",
        "STC2": "Store Coprocessor",
        "STC2.n": "Store Coprocessor (T 16bits encoding)",
        "STC2.w": "Store Coprocessor (T/A 32bits encoding)",
        "STC2eq": "Store Coprocessor (If APSR.Z == 1 [Equal])",
        "STC2eq.n": "Store Coprocessor (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STC2eq.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STC2ne": "Store Coprocessor (If APSR.Z == 0 [Not Equal])",
        "STC2ne.n": "Store Coprocessor (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STC2ne.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STC2cs": "Store Coprocessor (If APSR.C == 1 [Carry Set])",
        "STC2cs.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STC2cs.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STC2cc": "Store Coprocessor (If APSR.C == 0 [Carry Clear])",
        "STC2cc.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STC2cc.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STC2mi": "Store Coprocessor (If APSR.N == 1 [Minus])",
        "STC2mi.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STC2mi.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STC2pl": "Store Coprocessor (If APSR.N == 0 [Plus])",
        "STC2pl.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STC2pl.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STC2vs": "Store Coprocessor (If APSR.V == 1 [Overflow])",
        "STC2vs.n": "Store Coprocessor (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STC2vs.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STC2vc": "Store Coprocessor (If APSR.V == 0 [No Overflow])",
        "STC2vc.n": "Store Coprocessor (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STC2vc.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STC2hi": "Store Coprocessor (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STC2hi.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STC2hi.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STC2ls": "Store Coprocessor (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STC2ls.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STC2ls.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STC2ge": "Store Coprocessor (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STC2ge.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STC2ge.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STC2lt": "Store Coprocessor (If APSR.N != APSR.V [Signed Lesser Than])",
        "STC2lt.n": "Store Coprocessor (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STC2lt.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STC2gt": "Store Coprocessor (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STC2gt.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STC2gt.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STC2le": "Store Coprocessor (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STC2le.n": "Store Coprocessor (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STC2le.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STC2al": "Store Coprocessor (Always)",
        "STC2al.n": "Store Coprocessor (T 16bits encoding) (Always)",
        "STC2al.w": "Store Coprocessor (T/A 32bits encoding) (Always)",
        "STCl": "Store Coprocessor",
        "STCl.n": "Store Coprocessor (T 16bits encoding)",
        "STCl.w": "Store Coprocessor (T/A 32bits encoding)",
        "STCleq": "Store Coprocessor (If APSR.Z == 1 [Equal])",
        "STCleq.n": "Store Coprocessor (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STCleq.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STClne": "Store Coprocessor (If APSR.Z == 0 [Not Equal])",
        "STClne.n": "Store Coprocessor (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STClne.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STClcs": "Store Coprocessor (If APSR.C == 1 [Carry Set])",
        "STClcs.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STClcs.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STClcc": "Store Coprocessor (If APSR.C == 0 [Carry Clear])",
        "STClcc.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STClcc.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STClmi": "Store Coprocessor (If APSR.N == 1 [Minus])",
        "STClmi.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STClmi.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STClpl": "Store Coprocessor (If APSR.N == 0 [Plus])",
        "STClpl.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STClpl.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STClvs": "Store Coprocessor (If APSR.V == 1 [Overflow])",
        "STClvs.n": "Store Coprocessor (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STClvs.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STClvc": "Store Coprocessor (If APSR.V == 0 [No Overflow])",
        "STClvc.n": "Store Coprocessor (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STClvc.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STClhi": "Store Coprocessor (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STClhi.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STClhi.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STClls": "Store Coprocessor (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STClls.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STClls.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STClge": "Store Coprocessor (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STClge.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STClge.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STCllt": "Store Coprocessor (If APSR.N != APSR.V [Signed Lesser Than])",
        "STCllt.n": "Store Coprocessor (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STCllt.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STClgt": "Store Coprocessor (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STClgt.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STClgt.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STClle": "Store Coprocessor (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STClle.n": "Store Coprocessor (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STClle.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STClal": "Store Coprocessor (Always)",
        "STClal.n": "Store Coprocessor (T 16bits encoding) (Always)",
        "STClal.w": "Store Coprocessor (T/A 32bits encoding) (Always)",
        "STCl2": "Store Coprocessor",
        "STCl2.n": "Store Coprocessor (T 16bits encoding)",
        "STCl2.w": "Store Coprocessor (T/A 32bits encoding)",
        "STCl2eq": "Store Coprocessor (If APSR.Z == 1 [Equal])",
        "STCl2eq.n": "Store Coprocessor (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STCl2eq.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STCl2ne": "Store Coprocessor (If APSR.Z == 0 [Not Equal])",
        "STCl2ne.n": "Store Coprocessor (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STCl2ne.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STCl2cs": "Store Coprocessor (If APSR.C == 1 [Carry Set])",
        "STCl2cs.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STCl2cs.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STCl2cc": "Store Coprocessor (If APSR.C == 0 [Carry Clear])",
        "STCl2cc.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STCl2cc.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STCl2mi": "Store Coprocessor (If APSR.N == 1 [Minus])",
        "STCl2mi.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STCl2mi.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STCl2pl": "Store Coprocessor (If APSR.N == 0 [Plus])",
        "STCl2pl.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STCl2pl.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STCl2vs": "Store Coprocessor (If APSR.V == 1 [Overflow])",
        "STCl2vs.n": "Store Coprocessor (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STCl2vs.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STCl2vc": "Store Coprocessor (If APSR.V == 0 [No Overflow])",
        "STCl2vc.n": "Store Coprocessor (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STCl2vc.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STCl2hi": "Store Coprocessor (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STCl2hi.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STCl2hi.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STCl2ls": "Store Coprocessor (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STCl2ls.n": "Store Coprocessor (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STCl2ls.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STCl2ge": "Store Coprocessor (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STCl2ge.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STCl2ge.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STCl2lt": "Store Coprocessor (If APSR.N != APSR.V [Signed Lesser Than])",
        "STCl2lt.n": "Store Coprocessor (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STCl2lt.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STCl2gt": "Store Coprocessor (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STCl2gt.n": "Store Coprocessor (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STCl2gt.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STCl2le": "Store Coprocessor (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STCl2le.n": "Store Coprocessor (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STCl2le.w": "Store Coprocessor (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STCl2al": "Store Coprocessor (Always)",
        "STCl2al.n": "Store Coprocessor (T 16bits encoding) (Always)",
        "STCl2al.w": "Store Coprocessor (T/A 32bits encoding) (Always)"
      }
    },
    "STM%{amode}%{c}%{q}": {
      "description": "Store Multiple %{amode} %{q} %{c}",
      "variants": {
        "STM": "Store Multiple Increment After",
        "STM.n": "Store Multiple Increment After (T 16bits encoding)",
        "STM.w": "Store Multiple Increment After (T/A 32bits encoding)",
        "STMeq": "Store Multiple Increment After (If APSR.Z == 1 [Equal])",
        "STMeq.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STMeq.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STMne": "Store Multiple Increment After (If APSR.Z == 0 [Not Equal])",
        "STMne.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMne.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMcs": "Store Multiple Increment After (If APSR.C == 1 [Carry Set])",
        "STMcs.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMcs.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMcc": "Store Multiple Increment After (If APSR.C == 0 [Carry Clear])",
        "STMcc.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMcc.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMmi": "Store Multiple Increment After (If APSR.N == 1 [Minus])",
        "STMmi.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STMmi.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STMpl": "Store Multiple Increment After (If APSR.N == 0 [Plus])",
        "STMpl.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STMpl.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STMvs": "Store Multiple Increment After (If APSR.V == 1 [Overflow])",
        "STMvs.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STMvs.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STMvc": "Store Multiple Increment After (If APSR.V == 0 [No Overflow])",
        "STMvc.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMvc.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMhi": "Store Multiple Increment After (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMhi.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMhi.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMls": "Store Multiple Increment After (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMls.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMls.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMge": "Store Multiple Increment After (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMge.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMge.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMlt": "Store Multiple Increment After (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMlt.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMlt.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMgt": "Store Multiple Increment After (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMgt.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMgt.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMle": "Store Multiple Increment After (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMle.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMle.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMal": "Store Multiple Increment After (Always)",
        "STMal.n": "Store Multiple Increment After (T 16bits encoding) (Always)",
        "STMal.w": "Store Multiple Increment After (T/A 32bits encoding) (Always)",
        "STMda": "Store Multiple Decrement After",
        "STMda.n": "Store Multiple Decrement After (T 16bits encoding)",
        "STMda.w": "Store Multiple Decrement After (T/A 32bits encoding)",
        "STMdaeq": "Store Multiple Decrement After (If APSR.Z == 1 [Equal])",
        "STMdaeq.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STMdaeq.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STMdane": "Store Multiple Decrement After (If APSR.Z == 0 [Not Equal])",
        "STMdane.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMdane.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMdacs": "Store Multiple Decrement After (If APSR.C == 1 [Carry Set])",
        "STMdacs.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMdacs.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMdacc": "Store Multiple Decrement After (If APSR.C == 0 [Carry Clear])",
        "STMdacc.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMdacc.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMdami": "Store Multiple Decrement After (If APSR.N == 1 [Minus])",
        "STMdami.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STMdami.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STMdapl": "Store Multiple Decrement After (If APSR.N == 0 [Plus])",
        "STMdapl.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STMdapl.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STMdavs": "Store Multiple Decrement After (If APSR.V == 1 [Overflow])",
        "STMdavs.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STMdavs.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STMdavc": "Store Multiple Decrement After (If APSR.V == 0 [No Overflow])",
        "STMdavc.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMdavc.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMdahi": "Store Multiple Decrement After (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMdahi.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMdahi.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMdals": "Store Multiple Decrement After (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMdals.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMdals.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMdage": "Store Multiple Decrement After (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMdage.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMdage.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMdalt": "Store Multiple Decrement After (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMdalt.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMdalt.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMdagt": "Store Multiple Decrement After (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMdagt.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMdagt.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMdale": "Store Multiple Decrement After (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMdale.n": "Store Multiple Decrement After (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMdale.w": "Store Multiple Decrement After (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMdaal": "Store Multiple Decrement After (Always)",
        "STMdaal.n": "Store Multiple Decrement After (T 16bits encoding) (Always)",
        "STMdaal.w": "Store Multiple Decrement After (T/A 32bits encoding) (Always)",
        "STMed": "Store Multiple Empty Descending",
        "STMed.n": "Store Multiple Empty Descending (T 16bits encoding)",
        "STMed.w": "Store Multiple Empty Descending (T/A 32bits encoding)",
        "STMedeq": "Store Multiple Empty Descending (If APSR.Z == 1 [Equal])",
        "STMedeq.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STMedeq.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STMedne": "Store Multiple Empty Descending (If APSR.Z == 0 [Not Equal])",
        "STMedne.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMedne.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMedcs": "Store Multiple Empty Descending (If APSR.C == 1 [Carry Set])",
        "STMedcs.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMedcs.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMedcc": "Store Multiple Empty Descending (If APSR.C == 0 [Carry Clear])",
        "STMedcc.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMedcc.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMedmi": "Store Multiple Empty Descending (If APSR.N == 1 [Minus])",
        "STMedmi.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STMedmi.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STMedpl": "Store Multiple Empty Descending (If APSR.N == 0 [Plus])",
        "STMedpl.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STMedpl.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STMedvs": "Store Multiple Empty Descending (If APSR.V == 1 [Overflow])",
        "STMedvs.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STMedvs.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STMedvc": "Store Multiple Empty Descending (If APSR.V == 0 [No Overflow])",
        "STMedvc.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMedvc.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMedhi": "Store Multiple Empty Descending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMedhi.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMedhi.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMedls": "Store Multiple Empty Descending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMedls.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMedls.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMedge": "Store Multiple Empty Descending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMedge.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMedge.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMedlt": "Store Multiple Empty Descending (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMedlt.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMedlt.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMedgt": "Store Multiple Empty Descending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMedgt.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMedgt.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMedle": "Store Multiple Empty Descending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMedle.n": "Store Multiple Empty Descending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMedle.w": "Store Multiple Empty Descending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMedal": "Store Multiple Empty Descending (Always)",
        "STMedal.n": "Store Multiple Empty Descending (T 16bits encoding) (Always)",
        "STMedal.w": "Store Multiple Empty Descending (T/A 32bits encoding) (Always)",
        "STMdb": "Store Multiple Decrement Before",
        "STMdb.n": "Store Multiple Decrement Before (T 16bits encoding)",
        "STMdb.w": "Store Multiple Decrement Before (T/A 32bits encoding)",
        "STMdbeq": "Store Multiple Decrement Before (If APSR.Z == 1 [Equal])",
        "STMdbeq.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STMdbeq.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STMdbne": "Store Multiple Decrement Before (If APSR.Z == 0 [Not Equal])",
        "STMdbne.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMdbne.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMdbcs": "Store Multiple Decrement Before (If APSR.C == 1 [Carry Set])",
        "STMdbcs.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMdbcs.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMdbcc": "Store Multiple Decrement Before (If APSR.C == 0 [Carry Clear])",
        "STMdbcc.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMdbcc.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMdbmi": "Store Multiple Decrement Before (If APSR.N == 1 [Minus])",
        "STMdbmi.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STMdbmi.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STMdbpl": "Store Multiple Decrement Before (If APSR.N == 0 [Plus])",
        "STMdbpl.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STMdbpl.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STMdbvs": "Store Multiple Decrement Before (If APSR.V == 1 [Overflow])",
        "STMdbvs.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STMdbvs.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STMdbvc": "Store Multiple Decrement Before (If APSR.V == 0 [No Overflow])",
        "STMdbvc.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMdbvc.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMdbhi": "Store Multiple Decrement Before (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMdbhi.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMdbhi.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMdbls": "Store Multiple Decrement Before (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMdbls.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMdbls.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMdbge": "Store Multiple Decrement Before (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMdbge.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMdbge.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMdblt": "Store Multiple Decrement Before (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMdblt.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMdblt.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMdbgt": "Store Multiple Decrement Before (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMdbgt.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMdbgt.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMdble": "Store Multiple Decrement Before (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMdble.n": "Store Multiple Decrement Before (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMdble.w": "Store Multiple Decrement Before (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMdbal": "Store Multiple Decrement Before (Always)",
        "STMdbal.n": "Store Multiple Decrement Before (T 16bits encoding) (Always)",
        "STMdbal.w": "Store Multiple Decrement Before (T/A 32bits encoding) (Always)",
        "STMfd": "Store Multiple Full Descending",
        "STMfd.n": "Store Multiple Full Descending (T 16bits encoding)",
        "STMfd.w": "Store Multiple Full Descending (T/A 32bits encoding)",
        "STMfdeq": "Store Multiple Full Descending (If APSR.Z == 1 [Equal])",
        "STMfdeq.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STMfdeq.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STMfdne": "Store Multiple Full Descending (If APSR.Z == 0 [Not Equal])",
        "STMfdne.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMfdne.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMfdcs": "Store Multiple Full Descending (If APSR.C == 1 [Carry Set])",
        "STMfdcs.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMfdcs.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMfdcc": "Store Multiple Full Descending (If APSR.C == 0 [Carry Clear])",
        "STMfdcc.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMfdcc.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMfdmi": "Store Multiple Full Descending (If APSR.N == 1 [Minus])",
        "STMfdmi.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STMfdmi.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STMfdpl": "Store Multiple Full Descending (If APSR.N == 0 [Plus])",
        "STMfdpl.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STMfdpl.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STMfdvs": "Store Multiple Full Descending (If APSR.V == 1 [Overflow])",
        "STMfdvs.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STMfdvs.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STMfdvc": "Store Multiple Full Descending (If APSR.V == 0 [No Overflow])",
        "STMfdvc.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMfdvc.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMfdhi": "Store Multiple Full Descending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMfdhi.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMfdhi.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMfdls": "Store Multiple Full Descending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMfdls.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMfdls.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMfdge": "Store Multiple Full Descending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMfdge.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMfdge.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMfdlt": "Store Multiple Full Descending (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMfdlt.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMfdlt.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMfdgt": "Store Multiple Full Descending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMfdgt.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMfdgt.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMfdle": "Store Multiple Full Descending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMfdle.n": "Store Multiple Full Descending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMfdle.w": "Store Multiple Full Descending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMfdal": "Store Multiple Full Descending (Always)",
        "STMfdal.n": "Store Multiple Full Descending (T 16bits encoding) (Always)",
        "STMfdal.w": "Store Multiple Full Descending (T/A 32bits encoding) (Always)",
        "STMia": "Store Multiple Increment After",
        "STMia.n": "Store Multiple Increment After (T 16bits encoding)",
        "STMia.w": "Store Multiple Increment After (T/A 32bits encoding)",
        "STMiaeq": "Store Multiple Increment After (If APSR.Z == 1 [Equal])",
        "STMiaeq.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STMiaeq.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STMiane": "Store Multiple Increment After (If APSR.Z == 0 [Not Equal])",
        "STMiane.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMiane.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMiacs": "Store Multiple Increment After (If APSR.C == 1 [Carry Set])",
        "STMiacs.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMiacs.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMiacc": "Store Multiple Increment After (If APSR.C == 0 [Carry Clear])",
        "STMiacc.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMiacc.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMiami": "Store Multiple Increment After (If APSR.N == 1 [Minus])",
        "STMiami.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STMiami.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STMiapl": "Store Multiple Increment After (If APSR.N == 0 [Plus])",
        "STMiapl.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STMiapl.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STMiavs": "Store Multiple Increment After (If APSR.V == 1 [Overflow])",
        "STMiavs.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STMiavs.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STMiavc": "Store Multiple Increment After (If APSR.V == 0 [No Overflow])",
        "STMiavc.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMiavc.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMiahi": "Store Multiple Increment After (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMiahi.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMiahi.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMials": "Store Multiple Increment After (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMials.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMials.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMiage": "Store Multiple Increment After (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMiage.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMiage.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMialt": "Store Multiple Increment After (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMialt.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMialt.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMiagt": "Store Multiple Increment After (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMiagt.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMiagt.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMiale": "Store Multiple Increment After (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMiale.n": "Store Multiple Increment After (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMiale.w": "Store Multiple Increment After (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMiaal": "Store Multiple Increment After (Always)",
        "STMiaal.n": "Store Multiple Increment After (T 16bits encoding) (Always)",
        "STMiaal.w": "Store Multiple Increment After (T/A 32bits encoding) (Always)",
        "STMea": "Store Multiple Empty Ascending",
        "STMea.n": "Store Multiple Empty Ascending (T 16bits encoding)",
        "STMea.w": "Store Multiple Empty Ascending (T/A 32bits encoding)",
        "STMeaeq": "Store Multiple Empty Ascending (If APSR.Z == 1 [Equal])",
        "STMeaeq.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STMeaeq.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STMeane": "Store Multiple Empty Ascending (If APSR.Z == 0 [Not Equal])",
        "STMeane.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMeane.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMeacs": "Store Multiple Empty Ascending (If APSR.C == 1 [Carry Set])",
        "STMeacs.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMeacs.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMeacc": "Store Multiple Empty Ascending (If APSR.C == 0 [Carry Clear])",
        "STMeacc.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMeacc.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMeami": "Store Multiple Empty Ascending (If APSR.N == 1 [Minus])",
        "STMeami.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STMeami.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STMeapl": "Store Multiple Empty Ascending (If APSR.N == 0 [Plus])",
        "STMeapl.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STMeapl.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STMeavs": "Store Multiple Empty Ascending (If APSR.V == 1 [Overflow])",
        "STMeavs.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STMeavs.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STMeavc": "Store Multiple Empty Ascending (If APSR.V == 0 [No Overflow])",
        "STMeavc.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMeavc.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMeahi": "Store Multiple Empty Ascending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMeahi.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMeahi.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMeals": "Store Multiple Empty Ascending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMeals.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMeals.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMeage": "Store Multiple Empty Ascending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMeage.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMeage.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMealt": "Store Multiple Empty Ascending (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMealt.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMealt.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMeagt": "Store Multiple Empty Ascending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMeagt.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMeagt.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMeale": "Store Multiple Empty Ascending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMeale.n": "Store Multiple Empty Ascending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMeale.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMeaal": "Store Multiple Empty Ascending (Always)",
        "STMeaal.n": "Store Multiple Empty Ascending (T 16bits encoding) (Always)",
        "STMeaal.w": "Store Multiple Empty Ascending (T/A 32bits encoding) (Always)",
        "STMib": "Store Multiple Increment Before",
        "STMib.n": "Store Multiple Increment Before (T 16bits encoding)",
        "STMib.w": "Store Multiple Increment Before (T/A 32bits encoding)",
        "STMibeq": "Store Multiple Increment Before (If APSR.Z == 1 [Equal])",
        "STMibeq.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STMibeq.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STMibne": "Store Multiple Increment Before (If APSR.Z == 0 [Not Equal])",
        "STMibne.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMibne.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMibcs": "Store Multiple Increment Before (If APSR.C == 1 [Carry Set])",
        "STMibcs.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMibcs.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMibcc": "Store Multiple Increment Before (If APSR.C == 0 [Carry Clear])",
        "STMibcc.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMibcc.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMibmi": "Store Multiple Increment Before (If APSR.N == 1 [Minus])",
        "STMibmi.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STMibmi.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STMibpl": "Store Multiple Increment Before (If APSR.N == 0 [Plus])",
        "STMibpl.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STMibpl.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STMibvs": "Store Multiple Increment Before (If APSR.V == 1 [Overflow])",
        "STMibvs.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STMibvs.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STMibvc": "Store Multiple Increment Before (If APSR.V == 0 [No Overflow])",
        "STMibvc.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMibvc.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMibhi": "Store Multiple Increment Before (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMibhi.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMibhi.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMibls": "Store Multiple Increment Before (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMibls.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMibls.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMibge": "Store Multiple Increment Before (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMibge.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMibge.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMiblt": "Store Multiple Increment Before (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMiblt.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMiblt.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMibgt": "Store Multiple Increment Before (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMibgt.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMibgt.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMible": "Store Multiple Increment Before (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMible.n": "Store Multiple Increment Before (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMible.w": "Store Multiple Increment Before (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMibal": "Store Multiple Increment Before (Always)",
        "STMibal.n": "Store Multiple Increment Before (T 16bits encoding) (Always)",
        "STMibal.w": "Store Multiple Increment Before (T/A 32bits encoding) (Always)",
        "STMfa": "Store Multiple Full Ascending",
        "STMfa.n": "Store Multiple Full Ascending (T 16bits encoding)",
        "STMfa.w": "Store Multiple Full Ascending (T/A 32bits encoding)",
        "STMfaeq": "Store Multiple Full Ascending (If APSR.Z == 1 [Equal])",
        "STMfaeq.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STMfaeq.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STMfane": "Store Multiple Full Ascending (If APSR.Z == 0 [Not Equal])",
        "STMfane.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMfane.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STMfacs": "Store Multiple Full Ascending (If APSR.C == 1 [Carry Set])",
        "STMfacs.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMfacs.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STMfacc": "Store Multiple Full Ascending (If APSR.C == 0 [Carry Clear])",
        "STMfacc.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMfacc.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STMfami": "Store Multiple Full Ascending (If APSR.N == 1 [Minus])",
        "STMfami.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STMfami.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STMfapl": "Store Multiple Full Ascending (If APSR.N == 0 [Plus])",
        "STMfapl.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STMfapl.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STMfavs": "Store Multiple Full Ascending (If APSR.V == 1 [Overflow])",
        "STMfavs.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STMfavs.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STMfavc": "Store Multiple Full Ascending (If APSR.V == 0 [No Overflow])",
        "STMfavc.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMfavc.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STMfahi": "Store Multiple Full Ascending (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMfahi.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMfahi.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STMfals": "Store Multiple Full Ascending (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMfals.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMfals.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STMfage": "Store Multiple Full Ascending (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMfage.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMfage.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STMfalt": "Store Multiple Full Ascending (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMfalt.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMfalt.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STMfagt": "Store Multiple Full Ascending (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMfagt.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMfagt.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STMfale": "Store Multiple Full Ascending (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMfale.n": "Store Multiple Full Ascending (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMfale.w": "Store Multiple Full Ascending (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STMfaal": "Store Multiple Full Ascending (Always)",
        "STMfaal.n": "Store Multiple Full Ascending (T 16bits encoding) (Always)",
        "STMfaal.w": "Store Multiple Full Ascending (T/A 32bits encoding) (Always)"
      }
    },
    "STR%{exclusive}%{wsize}%{c}%{q}": {
      "description": "Store Register %{exclusive} %{wsize} %{q} %{c}",
      "variants": {
        "STR": "Store Register",
        "STR.n": "Store Register (T 16bits encoding)",
        "STR.w": "Store Register (T/A 32bits encoding)",
        "STReq": "Store Register (If APSR.Z == 1 [Equal])",
        "STReq.n": "Store Register (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STReq.w": "Store Register (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STRne": "Store Register (If APSR.Z == 0 [Not Equal])",
        "STRne.n": "Store Register (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRne.w": "Store Register (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRcs": "Store Register (If APSR.C == 1 [Carry Set])",
        "STRcs.n": "Store Register (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRcs.w": "Store Register (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRcc": "Store Register (If APSR.C == 0 [Carry Clear])",
        "STRcc.n": "Store Register (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRcc.w": "Store Register (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRmi": "Store Register (If APSR.N == 1 [Minus])",
        "STRmi.n": "Store Register (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STRmi.w": "Store Register (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STRpl": "Store Register (If APSR.N == 0 [Plus])",
        "STRpl.n": "Store Register (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STRpl.w": "Store Register (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STRvs": "Store Register (If APSR.V == 1 [Overflow])",
        "STRvs.n": "Store Register (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STRvs.w": "Store Register (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STRvc": "Store Register (If APSR.V == 0 [No Overflow])",
        "STRvc.n": "Store Register (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRvc.w": "Store Register (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRhi": "Store Register (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRhi.n": "Store Register (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRhi.w": "Store Register (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRls": "Store Register (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRls.n": "Store Register (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRls.w": "Store Register (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRge": "Store Register (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRge.n": "Store Register (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRge.w": "Store Register (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRlt": "Store Register (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRlt.n": "Store Register (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRlt.w": "Store Register (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRgt": "Store Register (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRgt.n": "Store Register (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRgt.w": "Store Register (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRle": "Store Register (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRle.n": "Store Register (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRle.w": "Store Register (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRal": "Store Register (Always)",
        "STRal.n": "Store Register (T 16bits encoding) (Always)",
        "STRal.w": "Store Register (T/A 32bits encoding) (Always)",
        "STRb": "Store Register Byte",
        "STRb.n": "Store Register Byte (T 16bits encoding)",
        "STRb.w": "Store Register Byte (T/A 32bits encoding)",
        "STRbeq": "Store Register Byte (If APSR.Z == 1 [Equal])",
        "STRbeq.n": "Store Register Byte (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STRbeq.w": "Store Register Byte (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STRbne": "Store Register Byte (If APSR.Z == 0 [Not Equal])",
        "STRbne.n": "Store Register Byte (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRbne.w": "Store Register Byte (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRbcs": "Store Register Byte (If APSR.C == 1 [Carry Set])",
        "STRbcs.n": "Store Register Byte (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRbcs.w": "Store Register Byte (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRbcc": "Store Register Byte (If APSR.C == 0 [Carry Clear])",
        "STRbcc.n": "Store Register Byte (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRbcc.w": "Store Register Byte (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRbmi": "Store Register Byte (If APSR.N == 1 [Minus])",
        "STRbmi.n": "Store Register Byte (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STRbmi.w": "Store Register Byte (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STRbpl": "Store Register Byte (If APSR.N == 0 [Plus])",
        "STRbpl.n": "Store Register Byte (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STRbpl.w": "Store Register Byte (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STRbvs": "Store Register Byte (If APSR.V == 1 [Overflow])",
        "STRbvs.n": "Store Register Byte (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STRbvs.w": "Store Register Byte (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STRbvc": "Store Register Byte (If APSR.V == 0 [No Overflow])",
        "STRbvc.n": "Store Register Byte (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRbvc.w": "Store Register Byte (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRbhi": "Store Register Byte (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRbhi.n": "Store Register Byte (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRbhi.w": "Store Register Byte (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRbls": "Store Register Byte (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRbls.n": "Store Register Byte (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRbls.w": "Store Register Byte (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRbge": "Store Register Byte (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRbge.n": "Store Register Byte (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRbge.w": "Store Register Byte (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRblt": "Store Register Byte (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRblt.n": "Store Register Byte (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRblt.w": "Store Register Byte (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRbgt": "Store Register Byte (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRbgt.n": "Store Register Byte (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRbgt.w": "Store Register Byte (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRble": "Store Register Byte (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRble.n": "Store Register Byte (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRble.w": "Store Register Byte (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRbal": "Store Register Byte (Always)",
        "STRbal.n": "Store Register Byte (T 16bits encoding) (Always)",
        "STRbal.w": "Store Register Byte (T/A 32bits encoding) (Always)",
        "STRh": "Store Register Halfword",
        "STRh.n": "Store Register Halfword (T 16bits encoding)",
        "STRh.w": "Store Register Halfword (T/A 32bits encoding)",
        "STRheq": "Store Register Halfword (If APSR.Z == 1 [Equal])",
        "STRheq.n": "Store Register Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STRheq.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STRhne": "Store Register Halfword (If APSR.Z == 0 [Not Equal])",
        "STRhne.n": "Store Register Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRhne.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRhcs": "Store Register Halfword (If APSR.C == 1 [Carry Set])",
        "STRhcs.n": "Store Register Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRhcs.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRhcc": "Store Register Halfword (If APSR.C == 0 [Carry Clear])",
        "STRhcc.n": "Store Register Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRhcc.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRhmi": "Store Register Halfword (If APSR.N == 1 [Minus])",
        "STRhmi.n": "Store Register Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STRhmi.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STRhpl": "Store Register Halfword (If APSR.N == 0 [Plus])",
        "STRhpl.n": "Store Register Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STRhpl.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STRhvs": "Store Register Halfword (If APSR.V == 1 [Overflow])",
        "STRhvs.n": "Store Register Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STRhvs.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STRhvc": "Store Register Halfword (If APSR.V == 0 [No Overflow])",
        "STRhvc.n": "Store Register Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRhvc.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRhhi": "Store Register Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRhhi.n": "Store Register Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRhhi.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRhls": "Store Register Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRhls.n": "Store Register Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRhls.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRhge": "Store Register Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRhge.n": "Store Register Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRhge.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRhlt": "Store Register Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRhlt.n": "Store Register Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRhlt.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRhgt": "Store Register Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRhgt.n": "Store Register Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRhgt.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRhle": "Store Register Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRhle.n": "Store Register Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRhle.w": "Store Register Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRhal": "Store Register Halfword (Always)",
        "STRhal.n": "Store Register Halfword (T 16bits encoding) (Always)",
        "STRhal.w": "Store Register Halfword (T/A 32bits encoding) (Always)",
        "STRd": "Store Register Doubleword",
        "STRd.n": "Store Register Doubleword (T 16bits encoding)",
        "STRd.w": "Store Register Doubleword (T/A 32bits encoding)",
        "STRdeq": "Store Register Doubleword (If APSR.Z == 1 [Equal])",
        "STRdeq.n": "Store Register Doubleword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STRdeq.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STRdne": "Store Register Doubleword (If APSR.Z == 0 [Not Equal])",
        "STRdne.n": "Store Register Doubleword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRdne.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRdcs": "Store Register Doubleword (If APSR.C == 1 [Carry Set])",
        "STRdcs.n": "Store Register Doubleword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRdcs.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRdcc": "Store Register Doubleword (If APSR.C == 0 [Carry Clear])",
        "STRdcc.n": "Store Register Doubleword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRdcc.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRdmi": "Store Register Doubleword (If APSR.N == 1 [Minus])",
        "STRdmi.n": "Store Register Doubleword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STRdmi.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STRdpl": "Store Register Doubleword (If APSR.N == 0 [Plus])",
        "STRdpl.n": "Store Register Doubleword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STRdpl.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STRdvs": "Store Register Doubleword (If APSR.V == 1 [Overflow])",
        "STRdvs.n": "Store Register Doubleword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STRdvs.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STRdvc": "Store Register Doubleword (If APSR.V == 0 [No Overflow])",
        "STRdvc.n": "Store Register Doubleword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRdvc.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRdhi": "Store Register Doubleword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRdhi.n": "Store Register Doubleword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRdhi.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRdls": "Store Register Doubleword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRdls.n": "Store Register Doubleword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRdls.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRdge": "Store Register Doubleword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRdge.n": "Store Register Doubleword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRdge.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRdlt": "Store Register Doubleword (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRdlt.n": "Store Register Doubleword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRdlt.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRdgt": "Store Register Doubleword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRdgt.n": "Store Register Doubleword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRdgt.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRdle": "Store Register Doubleword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRdle.n": "Store Register Doubleword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRdle.w": "Store Register Doubleword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRdal": "Store Register Doubleword (Always)",
        "STRdal.n": "Store Register Doubleword (T 16bits encoding) (Always)",
        "STRdal.w": "Store Register Doubleword (T/A 32bits encoding) (Always)",
        "STRex": "Store Register Exclusive",
        "STRex.n": "Store Register Exclusive (T 16bits encoding)",
        "STRex.w": "Store Register Exclusive (T/A 32bits encoding)",
        "STRexeq": "Store Register Exclusive (If APSR.Z == 1 [Equal])",
        "STRexeq.n": "Store Register Exclusive (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STRexeq.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STRexne": "Store Register Exclusive (If APSR.Z == 0 [Not Equal])",
        "STRexne.n": "Store Register Exclusive (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRexne.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRexcs": "Store Register Exclusive (If APSR.C == 1 [Carry Set])",
        "STRexcs.n": "Store Register Exclusive (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRexcs.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRexcc": "Store Register Exclusive (If APSR.C == 0 [Carry Clear])",
        "STRexcc.n": "Store Register Exclusive (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRexcc.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRexmi": "Store Register Exclusive (If APSR.N == 1 [Minus])",
        "STRexmi.n": "Store Register Exclusive (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STRexmi.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STRexpl": "Store Register Exclusive (If APSR.N == 0 [Plus])",
        "STRexpl.n": "Store Register Exclusive (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STRexpl.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STRexvs": "Store Register Exclusive (If APSR.V == 1 [Overflow])",
        "STRexvs.n": "Store Register Exclusive (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STRexvs.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STRexvc": "Store Register Exclusive (If APSR.V == 0 [No Overflow])",
        "STRexvc.n": "Store Register Exclusive (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRexvc.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRexhi": "Store Register Exclusive (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexhi.n": "Store Register Exclusive (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexhi.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexls": "Store Register Exclusive (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexls.n": "Store Register Exclusive (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexls.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexge": "Store Register Exclusive (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexge.n": "Store Register Exclusive (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexge.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexlt": "Store Register Exclusive (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexlt.n": "Store Register Exclusive (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexlt.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexgt": "Store Register Exclusive (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexgt.n": "Store Register Exclusive (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexgt.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexle": "Store Register Exclusive (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexle.n": "Store Register Exclusive (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexle.w": "Store Register Exclusive (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexal": "Store Register Exclusive (Always)",
        "STRexal.n": "Store Register Exclusive (T 16bits encoding) (Always)",
        "STRexal.w": "Store Register Exclusive (T/A 32bits encoding) (Always)",
        "STRexb": "Store Register Exclusive Byte",
        "STRexb.n": "Store Register Exclusive Byte (T 16bits encoding)",
        "STRexb.w": "Store Register Exclusive Byte (T/A 32bits encoding)",
        "STRexbeq": "Store Register Exclusive Byte (If APSR.Z == 1 [Equal])",
        "STRexbeq.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STRexbeq.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STRexbne": "Store Register Exclusive Byte (If APSR.Z == 0 [Not Equal])",
        "STRexbne.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRexbne.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRexbcs": "Store Register Exclusive Byte (If APSR.C == 1 [Carry Set])",
        "STRexbcs.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRexbcs.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRexbcc": "Store Register Exclusive Byte (If APSR.C == 0 [Carry Clear])",
        "STRexbcc.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRexbcc.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRexbmi": "Store Register Exclusive Byte (If APSR.N == 1 [Minus])",
        "STRexbmi.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STRexbmi.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STRexbpl": "Store Register Exclusive Byte (If APSR.N == 0 [Plus])",
        "STRexbpl.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STRexbpl.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STRexbvs": "Store Register Exclusive Byte (If APSR.V == 1 [Overflow])",
        "STRexbvs.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STRexbvs.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STRexbvc": "Store Register Exclusive Byte (If APSR.V == 0 [No Overflow])",
        "STRexbvc.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRexbvc.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRexbhi": "Store Register Exclusive Byte (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexbhi.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexbhi.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexbls": "Store Register Exclusive Byte (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexbls.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexbls.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexbge": "Store Register Exclusive Byte (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexbge.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexbge.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexblt": "Store Register Exclusive Byte (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexblt.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexblt.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexbgt": "Store Register Exclusive Byte (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexbgt.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexbgt.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexble": "Store Register Exclusive Byte (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexble.n": "Store Register Exclusive Byte (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexble.w": "Store Register Exclusive Byte (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexbal": "Store Register Exclusive Byte (Always)",
        "STRexbal.n": "Store Register Exclusive Byte (T 16bits encoding) (Always)",
        "STRexbal.w": "Store Register Exclusive Byte (T/A 32bits encoding) (Always)",
        "STRexh": "Store Register Exclusive Halfword",
        "STRexh.n": "Store Register Exclusive Halfword (T 16bits encoding)",
        "STRexh.w": "Store Register Exclusive Halfword (T/A 32bits encoding)",
        "STRexheq": "Store Register Exclusive Halfword (If APSR.Z == 1 [Equal])",
        "STRexheq.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STRexheq.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STRexhne": "Store Register Exclusive Halfword (If APSR.Z == 0 [Not Equal])",
        "STRexhne.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRexhne.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRexhcs": "Store Register Exclusive Halfword (If APSR.C == 1 [Carry Set])",
        "STRexhcs.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRexhcs.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRexhcc": "Store Register Exclusive Halfword (If APSR.C == 0 [Carry Clear])",
        "STRexhcc.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRexhcc.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRexhmi": "Store Register Exclusive Halfword (If APSR.N == 1 [Minus])",
        "STRexhmi.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STRexhmi.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STRexhpl": "Store Register Exclusive Halfword (If APSR.N == 0 [Plus])",
        "STRexhpl.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STRexhpl.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STRexhvs": "Store Register Exclusive Halfword (If APSR.V == 1 [Overflow])",
        "STRexhvs.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STRexhvs.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STRexhvc": "Store Register Exclusive Halfword (If APSR.V == 0 [No Overflow])",
        "STRexhvc.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRexhvc.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRexhhi": "Store Register Exclusive Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexhhi.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexhhi.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexhls": "Store Register Exclusive Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexhls.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexhls.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexhge": "Store Register Exclusive Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexhge.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexhge.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexhlt": "Store Register Exclusive Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexhlt.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexhlt.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexhgt": "Store Register Exclusive Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexhgt.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexhgt.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexhle": "Store Register Exclusive Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexhle.n": "Store Register Exclusive Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexhle.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexhal": "Store Register Exclusive Halfword (Always)",
        "STRexhal.n": "Store Register Exclusive Halfword (T 16bits encoding) (Always)",
        "STRexhal.w": "Store Register Exclusive Halfword (T/A 32bits encoding) (Always)",
        "STRexd": "Store Register Exclusive Doubleword",
        "STRexd.n": "Store Register Exclusive Doubleword (T 16bits encoding)",
        "STRexd.w": "Store Register Exclusive Doubleword (T/A 32bits encoding)",
        "STRexdeq": "Store Register Exclusive Doubleword (If APSR.Z == 1 [Equal])",
        "STRexdeq.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STRexdeq.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STRexdne": "Store Register Exclusive Doubleword (If APSR.Z == 0 [Not Equal])",
        "STRexdne.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRexdne.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRexdcs": "Store Register Exclusive Doubleword (If APSR.C == 1 [Carry Set])",
        "STRexdcs.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRexdcs.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRexdcc": "Store Register Exclusive Doubleword (If APSR.C == 0 [Carry Clear])",
        "STRexdcc.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRexdcc.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRexdmi": "Store Register Exclusive Doubleword (If APSR.N == 1 [Minus])",
        "STRexdmi.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STRexdmi.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STRexdpl": "Store Register Exclusive Doubleword (If APSR.N == 0 [Plus])",
        "STRexdpl.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STRexdpl.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STRexdvs": "Store Register Exclusive Doubleword (If APSR.V == 1 [Overflow])",
        "STRexdvs.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STRexdvs.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STRexdvc": "Store Register Exclusive Doubleword (If APSR.V == 0 [No Overflow])",
        "STRexdvc.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRexdvc.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRexdhi": "Store Register Exclusive Doubleword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexdhi.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexdhi.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRexdls": "Store Register Exclusive Doubleword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexdls.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexdls.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRexdge": "Store Register Exclusive Doubleword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexdge.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexdge.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRexdlt": "Store Register Exclusive Doubleword (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexdlt.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexdlt.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRexdgt": "Store Register Exclusive Doubleword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexdgt.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexdgt.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRexdle": "Store Register Exclusive Doubleword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexdle.n": "Store Register Exclusive Doubleword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexdle.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRexdal": "Store Register Exclusive Doubleword (Always)",
        "STRexdal.n": "Store Register Exclusive Doubleword (T 16bits encoding) (Always)",
        "STRexdal.w": "Store Register Exclusive Doubleword (T/A 32bits encoding) (Always)"
      }
    },
    "STRBT%{c}%{q}": {
      "description": "Store Register Byte Unprivileged %{q} %{c}",
      "variants": {
        "STRBT": "Store Register Byte Unprivileged",
        "STRBT.n": "Store Register Byte Unprivileged (T 16bits encoding)",
        "STRBT.w": "Store Register Byte Unprivileged (T/A 32bits encoding)",
        "STRBTeq": "Store Register Byte Unprivileged (If APSR.Z == 1 [Equal])",
        "STRBTeq.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STRBTeq.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STRBTne": "Store Register Byte Unprivileged (If APSR.Z == 0 [Not Equal])",
        "STRBTne.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRBTne.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRBTcs": "Store Register Byte Unprivileged (If APSR.C == 1 [Carry Set])",
        "STRBTcs.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRBTcs.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRBTcc": "Store Register Byte Unprivileged (If APSR.C == 0 [Carry Clear])",
        "STRBTcc.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRBTcc.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRBTmi": "Store Register Byte Unprivileged (If APSR.N == 1 [Minus])",
        "STRBTmi.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STRBTmi.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STRBTpl": "Store Register Byte Unprivileged (If APSR.N == 0 [Plus])",
        "STRBTpl.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STRBTpl.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STRBTvs": "Store Register Byte Unprivileged (If APSR.V == 1 [Overflow])",
        "STRBTvs.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STRBTvs.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STRBTvc": "Store Register Byte Unprivileged (If APSR.V == 0 [No Overflow])",
        "STRBTvc.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRBTvc.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRBThi": "Store Register Byte Unprivileged (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRBThi.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRBThi.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRBTls": "Store Register Byte Unprivileged (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRBTls.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRBTls.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRBTge": "Store Register Byte Unprivileged (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRBTge.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRBTge.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRBTlt": "Store Register Byte Unprivileged (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRBTlt.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRBTlt.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRBTgt": "Store Register Byte Unprivileged (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRBTgt.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRBTgt.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRBTle": "Store Register Byte Unprivileged (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRBTle.n": "Store Register Byte Unprivileged (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRBTle.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRBTal": "Store Register Byte Unprivileged (Always)",
        "STRBTal.n": "Store Register Byte Unprivileged (T 16bits encoding) (Always)",
        "STRBTal.w": "Store Register Byte Unprivileged (T/A 32bits encoding) (Always)"
      }
    },
    "STRHT%{c}%{q}": {
      "description": "Store Register Halfword Unprivileged %{q} %{c}",
      "variants": {
        "STRHT": "Store Register Halfword Unprivileged",
        "STRHT.n": "Store Register Halfword Unprivileged (T 16bits encoding)",
        "STRHT.w": "Store Register Halfword Unprivileged (T/A 32bits encoding)",
        "STRHTeq": "Store Register Halfword Unprivileged (If APSR.Z == 1 [Equal])",
        "STRHTeq.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STRHTeq.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STRHTne": "Store Register Halfword Unprivileged (If APSR.Z == 0 [Not Equal])",
        "STRHTne.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRHTne.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRHTcs": "Store Register Halfword Unprivileged (If APSR.C == 1 [Carry Set])",
        "STRHTcs.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRHTcs.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRHTcc": "Store Register Halfword Unprivileged (If APSR.C == 0 [Carry Clear])",
        "STRHTcc.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRHTcc.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRHTmi": "Store Register Halfword Unprivileged (If APSR.N == 1 [Minus])",
        "STRHTmi.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STRHTmi.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STRHTpl": "Store Register Halfword Unprivileged (If APSR.N == 0 [Plus])",
        "STRHTpl.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STRHTpl.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STRHTvs": "Store Register Halfword Unprivileged (If APSR.V == 1 [Overflow])",
        "STRHTvs.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STRHTvs.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STRHTvc": "Store Register Halfword Unprivileged (If APSR.V == 0 [No Overflow])",
        "STRHTvc.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRHTvc.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRHThi": "Store Register Halfword Unprivileged (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRHThi.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRHThi.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRHTls": "Store Register Halfword Unprivileged (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRHTls.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRHTls.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRHTge": "Store Register Halfword Unprivileged (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRHTge.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRHTge.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRHTlt": "Store Register Halfword Unprivileged (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRHTlt.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRHTlt.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRHTgt": "Store Register Halfword Unprivileged (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRHTgt.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRHTgt.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRHTle": "Store Register Halfword Unprivileged (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRHTle.n": "Store Register Halfword Unprivileged (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRHTle.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRHTal": "Store Register Halfword Unprivileged (Always)",
        "STRHTal.n": "Store Register Halfword Unprivileged (T 16bits encoding) (Always)",
        "STRHTal.w": "Store Register Halfword Unprivileged (T/A 32bits encoding) (Always)"
      }
    },
    "STRT%{c}%{q}": {
      "description": "Store Register Unprivileged %{q} %{c}",
      "variants": {
        "STRT": "Store Register Unprivileged",
        "STRT.n": "Store Register Unprivileged (T 16bits encoding)",
        "STRT.w": "Store Register Unprivileged (T/A 32bits encoding)",
        "STRTeq": "Store Register Unprivileged (If APSR.Z == 1 [Equal])",
        "STRTeq.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "STRTeq.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "STRTne": "Store Register Unprivileged (If APSR.Z == 0 [Not Equal])",
        "STRTne.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRTne.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "STRTcs": "Store Register Unprivileged (If APSR.C == 1 [Carry Set])",
        "STRTcs.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRTcs.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "STRTcc": "Store Register Unprivileged (If APSR.C == 0 [Carry Clear])",
        "STRTcc.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRTcc.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "STRTmi": "Store Register Unprivileged (If APSR.N == 1 [Minus])",
        "STRTmi.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "STRTmi.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "STRTpl": "Store Register Unprivileged (If APSR.N == 0 [Plus])",
        "STRTpl.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "STRTpl.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "STRTvs": "Store Register Unprivileged (If APSR.V == 1 [Overflow])",
        "STRTvs.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "STRTvs.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "STRTvc": "Store Register Unprivileged (If APSR.V == 0 [No Overflow])",
        "STRTvc.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRTvc.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "STRThi": "Store Register Unprivileged (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRThi.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRThi.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "STRTls": "Store Register Unprivileged (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRTls.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRTls.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "STRTge": "Store Register Unprivileged (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRTge.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRTge.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "STRTlt": "Store Register Unprivileged (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRTlt.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRTlt.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "STRTgt": "Store Register Unprivileged (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRTgt.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRTgt.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "STRTle": "Store Register Unprivileged (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRTle.n": "Store Register Unprivileged (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRTle.w": "Store Register Unprivileged (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "STRTal": "Store Register Unprivileged (Always)",
        "STRTal.n": "Store Register Unprivileged (T 16bits encoding) (Always)",
        "STRTal.w": "Store Register Unprivileged (T/A 32bits encoding) (Always)"
      }
    },
    "SUB%{s}%{c}%{q}": {
      "description": "Subtract %{q} %{c} %{s}",
      "variants": {
        "SUB": "Subtract",
        "SUB.n": "Subtract (T 16bits encoding)",
        "SUB.w": "Subtract (T/A 32bits encoding)",
        "SUBeq": "Subtract (If APSR.Z == 1 [Equal])",
        "SUBeq.n": "Subtract (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SUBeq.w": "Subtract (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SUBne": "Subtract (If APSR.Z == 0 [Not Equal])",
        "SUBne.n": "Subtract (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SUBne.w": "Subtract (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SUBcs": "Subtract (If APSR.C == 1 [Carry Set])",
        "SUBcs.n": "Subtract (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SUBcs.w": "Subtract (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SUBcc": "Subtract (If APSR.C == 0 [Carry Clear])",
        "SUBcc.n": "Subtract (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SUBcc.w": "Subtract (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SUBmi": "Subtract (If APSR.N == 1 [Minus])",
        "SUBmi.n": "Subtract (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SUBmi.w": "Subtract (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SUBpl": "Subtract (If APSR.N == 0 [Plus])",
        "SUBpl.n": "Subtract (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SUBpl.w": "Subtract (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SUBvs": "Subtract (If APSR.V == 1 [Overflow])",
        "SUBvs.n": "Subtract (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SUBvs.w": "Subtract (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SUBvc": "Subtract (If APSR.V == 0 [No Overflow])",
        "SUBvc.n": "Subtract (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SUBvc.w": "Subtract (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SUBhi": "Subtract (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SUBhi.n": "Subtract (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SUBhi.w": "Subtract (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SUBls": "Subtract (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SUBls.n": "Subtract (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SUBls.w": "Subtract (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SUBge": "Subtract (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SUBge.n": "Subtract (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SUBge.w": "Subtract (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SUBlt": "Subtract (If APSR.N != APSR.V [Signed Lesser Than])",
        "SUBlt.n": "Subtract (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SUBlt.w": "Subtract (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SUBgt": "Subtract (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SUBgt.n": "Subtract (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SUBgt.w": "Subtract (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SUBle": "Subtract (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SUBle.n": "Subtract (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SUBle.w": "Subtract (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SUBal": "Subtract (Always)",
        "SUBal.n": "Subtract (T 16bits encoding) (Always)",
        "SUBal.w": "Subtract (T/A 32bits encoding) (Always)",
        "SUBs": "Subtract (Update APSR)",
        "SUBs.n": "Subtract (T 16bits encoding) (Update APSR)",
        "SUBs.w": "Subtract (T/A 32bits encoding) (Update APSR)",
        "SUBseq": "Subtract (If APSR.Z == 1 [Equal]) (Update APSR)",
        "SUBseq.n": "Subtract (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "SUBseq.w": "Subtract (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "SUBsne": "Subtract (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "SUBsne.n": "Subtract (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "SUBsne.w": "Subtract (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "SUBscs": "Subtract (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "SUBscs.n": "Subtract (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "SUBscs.w": "Subtract (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "SUBscc": "Subtract (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "SUBscc.n": "Subtract (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "SUBscc.w": "Subtract (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "SUBsmi": "Subtract (If APSR.N == 1 [Minus]) (Update APSR)",
        "SUBsmi.n": "Subtract (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "SUBsmi.w": "Subtract (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "SUBspl": "Subtract (If APSR.N == 0 [Plus]) (Update APSR)",
        "SUBspl.n": "Subtract (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "SUBspl.w": "Subtract (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "SUBsvs": "Subtract (If APSR.V == 1 [Overflow]) (Update APSR)",
        "SUBsvs.n": "Subtract (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "SUBsvs.w": "Subtract (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "SUBsvc": "Subtract (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "SUBsvc.n": "Subtract (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "SUBsvc.w": "Subtract (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "SUBshi": "Subtract (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "SUBshi.n": "Subtract (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "SUBshi.w": "Subtract (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "SUBsls": "Subtract (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "SUBsls.n": "Subtract (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "SUBsls.w": "Subtract (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "SUBsge": "Subtract (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "SUBsge.n": "Subtract (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "SUBsge.w": "Subtract (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "SUBslt": "Subtract (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "SUBslt.n": "Subtract (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "SUBslt.w": "Subtract (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "SUBsgt": "Subtract (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "SUBsgt.n": "Subtract (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "SUBsgt.w": "Subtract (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "SUBsle": "Subtract (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "SUBsle.n": "Subtract (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "SUBsle.w": "Subtract (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "SUBsal": "Subtract (Always) (Update APSR)",
        "SUBsal.n": "Subtract (T 16bits encoding) (Always) (Update APSR)",
        "SUBsal.w": "Subtract (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "SVC%{c}%{q}": {
      "description": "Supervisor Call %{q} %{c}",
      "variants": {
        "SVC": "Supervisor Call",
        "SVC.n": "Supervisor Call (T 16bits encoding)",
        "SVC.w": "Supervisor Call (T/A 32bits encoding)",
        "SVCeq": "Supervisor Call (If APSR.Z == 1 [Equal])",
        "SVCeq.n": "Supervisor Call (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SVCeq.w": "Supervisor Call (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SVCne": "Supervisor Call (If APSR.Z == 0 [Not Equal])",
        "SVCne.n": "Supervisor Call (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SVCne.w": "Supervisor Call (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SVCcs": "Supervisor Call (If APSR.C == 1 [Carry Set])",
        "SVCcs.n": "Supervisor Call (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SVCcs.w": "Supervisor Call (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SVCcc": "Supervisor Call (If APSR.C == 0 [Carry Clear])",
        "SVCcc.n": "Supervisor Call (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SVCcc.w": "Supervisor Call (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SVCmi": "Supervisor Call (If APSR.N == 1 [Minus])",
        "SVCmi.n": "Supervisor Call (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SVCmi.w": "Supervisor Call (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SVCpl": "Supervisor Call (If APSR.N == 0 [Plus])",
        "SVCpl.n": "Supervisor Call (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SVCpl.w": "Supervisor Call (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SVCvs": "Supervisor Call (If APSR.V == 1 [Overflow])",
        "SVCvs.n": "Supervisor Call (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SVCvs.w": "Supervisor Call (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SVCvc": "Supervisor Call (If APSR.V == 0 [No Overflow])",
        "SVCvc.n": "Supervisor Call (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SVCvc.w": "Supervisor Call (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SVChi": "Supervisor Call (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SVChi.n": "Supervisor Call (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SVChi.w": "Supervisor Call (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SVCls": "Supervisor Call (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SVCls.n": "Supervisor Call (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SVCls.w": "Supervisor Call (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SVCge": "Supervisor Call (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SVCge.n": "Supervisor Call (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SVCge.w": "Supervisor Call (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SVClt": "Supervisor Call (If APSR.N != APSR.V [Signed Lesser Than])",
        "SVClt.n": "Supervisor Call (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SVClt.w": "Supervisor Call (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SVCgt": "Supervisor Call (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SVCgt.n": "Supervisor Call (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SVCgt.w": "Supervisor Call (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SVCle": "Supervisor Call (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SVCle.n": "Supervisor Call (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SVCle.w": "Supervisor Call (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SVCal": "Supervisor Call (Always)",
        "SVCal.n": "Supervisor Call (T 16bits encoding) (Always)",
        "SVCal.w": "Supervisor Call (T/A 32bits encoding) (Always)"
      }
    },
    "SWP%{wsize}%{c}%{q}": {
      "description": "Swap %{q} %{c}",
      "variants": {
        "SWP": "Swap",
        "SWP.n": "Swap (T 16bits encoding)",
        "SWP.w": "Swap (T/A 32bits encoding)",
        "SWPeq": "Swap (If APSR.Z == 1 [Equal])",
        "SWPeq.n": "Swap (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SWPeq.w": "Swap (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SWPne": "Swap (If APSR.Z == 0 [Not Equal])",
        "SWPne.n": "Swap (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SWPne.w": "Swap (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SWPcs": "Swap (If APSR.C == 1 [Carry Set])",
        "SWPcs.n": "Swap (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SWPcs.w": "Swap (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SWPcc": "Swap (If APSR.C == 0 [Carry Clear])",
        "SWPcc.n": "Swap (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SWPcc.w": "Swap (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SWPmi": "Swap (If APSR.N == 1 [Minus])",
        "SWPmi.n": "Swap (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SWPmi.w": "Swap (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SWPpl": "Swap (If APSR.N == 0 [Plus])",
        "SWPpl.n": "Swap (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SWPpl.w": "Swap (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SWPvs": "Swap (If APSR.V == 1 [Overflow])",
        "SWPvs.n": "Swap (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SWPvs.w": "Swap (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SWPvc": "Swap (If APSR.V == 0 [No Overflow])",
        "SWPvc.n": "Swap (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SWPvc.w": "Swap (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SWPhi": "Swap (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SWPhi.n": "Swap (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SWPhi.w": "Swap (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SWPls": "Swap (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SWPls.n": "Swap (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SWPls.w": "Swap (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SWPge": "Swap (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SWPge.n": "Swap (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SWPge.w": "Swap (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SWPlt": "Swap (If APSR.N != APSR.V [Signed Lesser Than])",
        "SWPlt.n": "Swap (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SWPlt.w": "Swap (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SWPgt": "Swap (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SWPgt.n": "Swap (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SWPgt.w": "Swap (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SWPle": "Swap (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SWPle.n": "Swap (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SWPle.w": "Swap (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SWPal": "Swap (Always)",
        "SWPal.n": "Swap (T 16bits encoding) (Always)",
        "SWPal.w": "Swap (T/A 32bits encoding) (Always)",
        "SWPb": "Swap",
        "SWPb.n": "Swap (T 16bits encoding)",
        "SWPb.w": "Swap (T/A 32bits encoding)",
        "SWPbeq": "Swap (If APSR.Z == 1 [Equal])",
        "SWPbeq.n": "Swap (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SWPbeq.w": "Swap (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SWPbne": "Swap (If APSR.Z == 0 [Not Equal])",
        "SWPbne.n": "Swap (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SWPbne.w": "Swap (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SWPbcs": "Swap (If APSR.C == 1 [Carry Set])",
        "SWPbcs.n": "Swap (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SWPbcs.w": "Swap (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SWPbcc": "Swap (If APSR.C == 0 [Carry Clear])",
        "SWPbcc.n": "Swap (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SWPbcc.w": "Swap (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SWPbmi": "Swap (If APSR.N == 1 [Minus])",
        "SWPbmi.n": "Swap (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SWPbmi.w": "Swap (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SWPbpl": "Swap (If APSR.N == 0 [Plus])",
        "SWPbpl.n": "Swap (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SWPbpl.w": "Swap (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SWPbvs": "Swap (If APSR.V == 1 [Overflow])",
        "SWPbvs.n": "Swap (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SWPbvs.w": "Swap (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SWPbvc": "Swap (If APSR.V == 0 [No Overflow])",
        "SWPbvc.n": "Swap (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SWPbvc.w": "Swap (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SWPbhi": "Swap (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SWPbhi.n": "Swap (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SWPbhi.w": "Swap (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SWPbls": "Swap (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SWPbls.n": "Swap (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SWPbls.w": "Swap (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SWPbge": "Swap (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SWPbge.n": "Swap (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SWPbge.w": "Swap (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SWPblt": "Swap (If APSR.N != APSR.V [Signed Lesser Than])",
        "SWPblt.n": "Swap (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SWPblt.w": "Swap (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SWPbgt": "Swap (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SWPbgt.n": "Swap (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SWPbgt.w": "Swap (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SWPble": "Swap (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SWPble.n": "Swap (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SWPble.w": "Swap (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SWPbal": "Swap (Always)",
        "SWPbal.n": "Swap (T 16bits encoding) (Always)",
        "SWPbal.w": "Swap (T/A 32bits encoding) (Always)"
      }
    },
    "SXTAB%{c}%{q}": {
      "description": "Signed Extend and Add Byte %{q} %{c}",
      "variants": {
        "SXTAB": "Signed Extend and Add Byte",
        "SXTAB.n": "Signed Extend and Add Byte (T 16bits encoding)",
        "SXTAB.w": "Signed Extend and Add Byte (T/A 32bits encoding)",
        "SXTABeq": "Signed Extend and Add Byte (If APSR.Z == 1 [Equal])",
        "SXTABeq.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTABeq.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTABne": "Signed Extend and Add Byte (If APSR.Z == 0 [Not Equal])",
        "SXTABne.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTABne.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTABcs": "Signed Extend and Add Byte (If APSR.C == 1 [Carry Set])",
        "SXTABcs.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTABcs.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTABcc": "Signed Extend and Add Byte (If APSR.C == 0 [Carry Clear])",
        "SXTABcc.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTABcc.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTABmi": "Signed Extend and Add Byte (If APSR.N == 1 [Minus])",
        "SXTABmi.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SXTABmi.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SXTABpl": "Signed Extend and Add Byte (If APSR.N == 0 [Plus])",
        "SXTABpl.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SXTABpl.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SXTABvs": "Signed Extend and Add Byte (If APSR.V == 1 [Overflow])",
        "SXTABvs.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTABvs.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTABvc": "Signed Extend and Add Byte (If APSR.V == 0 [No Overflow])",
        "SXTABvc.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTABvc.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTABhi": "Signed Extend and Add Byte (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTABhi.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTABhi.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTABls": "Signed Extend and Add Byte (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTABls.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTABls.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTABge": "Signed Extend and Add Byte (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTABge.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTABge.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTABlt": "Signed Extend and Add Byte (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTABlt.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTABlt.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTABgt": "Signed Extend and Add Byte (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTABgt.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTABgt.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTABle": "Signed Extend and Add Byte (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTABle.n": "Signed Extend and Add Byte (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTABle.w": "Signed Extend and Add Byte (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTABal": "Signed Extend and Add Byte (Always)",
        "SXTABal.n": "Signed Extend and Add Byte (T 16bits encoding) (Always)",
        "SXTABal.w": "Signed Extend and Add Byte (T/A 32bits encoding) (Always)"
      }
    },
    "SXTAB16%{c}%{q}": {
      "description": "Signed Extend and Add Byte 16 %{q} %{c}",
      "variants": {
        "SXTAB16": "Signed Extend and Add Byte 16",
        "SXTAB16.n": "Signed Extend and Add Byte 16 (T 16bits encoding)",
        "SXTAB16.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding)",
        "SXTAB16eq": "Signed Extend and Add Byte 16 (If APSR.Z == 1 [Equal])",
        "SXTAB16eq.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTAB16eq.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTAB16ne": "Signed Extend and Add Byte 16 (If APSR.Z == 0 [Not Equal])",
        "SXTAB16ne.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTAB16ne.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTAB16cs": "Signed Extend and Add Byte 16 (If APSR.C == 1 [Carry Set])",
        "SXTAB16cs.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTAB16cs.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTAB16cc": "Signed Extend and Add Byte 16 (If APSR.C == 0 [Carry Clear])",
        "SXTAB16cc.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTAB16cc.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTAB16mi": "Signed Extend and Add Byte 16 (If APSR.N == 1 [Minus])",
        "SXTAB16mi.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SXTAB16mi.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SXTAB16pl": "Signed Extend and Add Byte 16 (If APSR.N == 0 [Plus])",
        "SXTAB16pl.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SXTAB16pl.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SXTAB16vs": "Signed Extend and Add Byte 16 (If APSR.V == 1 [Overflow])",
        "SXTAB16vs.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTAB16vs.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTAB16vc": "Signed Extend and Add Byte 16 (If APSR.V == 0 [No Overflow])",
        "SXTAB16vc.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTAB16vc.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTAB16hi": "Signed Extend and Add Byte 16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTAB16hi.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTAB16hi.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTAB16ls": "Signed Extend and Add Byte 16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTAB16ls.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTAB16ls.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTAB16ge": "Signed Extend and Add Byte 16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTAB16ge.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTAB16ge.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTAB16lt": "Signed Extend and Add Byte 16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTAB16lt.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTAB16lt.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTAB16gt": "Signed Extend and Add Byte 16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTAB16gt.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTAB16gt.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTAB16le": "Signed Extend and Add Byte 16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTAB16le.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTAB16le.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTAB16al": "Signed Extend and Add Byte 16 (Always)",
        "SXTAB16al.n": "Signed Extend and Add Byte 16 (T 16bits encoding) (Always)",
        "SXTAB16al.w": "Signed Extend and Add Byte 16 (T/A 32bits encoding) (Always)"
      }
    },
    "SXTAH%{c}%{q}": {
      "description": "Signed Extend and Add Halfword %{q} %{c}",
      "variants": {
        "SXTAH": "Signed Extend and Add Halfword",
        "SXTAH.n": "Signed Extend and Add Halfword (T 16bits encoding)",
        "SXTAH.w": "Signed Extend and Add Halfword (T/A 32bits encoding)",
        "SXTAHeq": "Signed Extend and Add Halfword (If APSR.Z == 1 [Equal])",
        "SXTAHeq.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTAHeq.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTAHne": "Signed Extend and Add Halfword (If APSR.Z == 0 [Not Equal])",
        "SXTAHne.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTAHne.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTAHcs": "Signed Extend and Add Halfword (If APSR.C == 1 [Carry Set])",
        "SXTAHcs.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTAHcs.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTAHcc": "Signed Extend and Add Halfword (If APSR.C == 0 [Carry Clear])",
        "SXTAHcc.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTAHcc.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTAHmi": "Signed Extend and Add Halfword (If APSR.N == 1 [Minus])",
        "SXTAHmi.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SXTAHmi.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SXTAHpl": "Signed Extend and Add Halfword (If APSR.N == 0 [Plus])",
        "SXTAHpl.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SXTAHpl.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SXTAHvs": "Signed Extend and Add Halfword (If APSR.V == 1 [Overflow])",
        "SXTAHvs.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTAHvs.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTAHvc": "Signed Extend and Add Halfword (If APSR.V == 0 [No Overflow])",
        "SXTAHvc.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTAHvc.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTAHhi": "Signed Extend and Add Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTAHhi.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTAHhi.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTAHls": "Signed Extend and Add Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTAHls.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTAHls.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTAHge": "Signed Extend and Add Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTAHge.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTAHge.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTAHlt": "Signed Extend and Add Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTAHlt.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTAHlt.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTAHgt": "Signed Extend and Add Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTAHgt.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTAHgt.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTAHle": "Signed Extend and Add Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTAHle.n": "Signed Extend and Add Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTAHle.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTAHal": "Signed Extend and Add Halfword (Always)",
        "SXTAHal.n": "Signed Extend and Add Halfword (T 16bits encoding) (Always)",
        "SXTAHal.w": "Signed Extend and Add Halfword (T/A 32bits encoding) (Always)"
      }
    },
    "SXTB%{c}%{q}": {
      "description": "Signed Extend Byte %{q} %{c}",
      "variants": {
        "SXTB": "Signed Extend Byte",
        "SXTB.n": "Signed Extend Byte (T 16bits encoding)",
        "SXTB.w": "Signed Extend Byte (T/A 32bits encoding)",
        "SXTBeq": "Signed Extend Byte (If APSR.Z == 1 [Equal])",
        "SXTBeq.n": "Signed Extend Byte (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTBeq.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTBne": "Signed Extend Byte (If APSR.Z == 0 [Not Equal])",
        "SXTBne.n": "Signed Extend Byte (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTBne.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTBcs": "Signed Extend Byte (If APSR.C == 1 [Carry Set])",
        "SXTBcs.n": "Signed Extend Byte (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTBcs.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTBcc": "Signed Extend Byte (If APSR.C == 0 [Carry Clear])",
        "SXTBcc.n": "Signed Extend Byte (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTBcc.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTBmi": "Signed Extend Byte (If APSR.N == 1 [Minus])",
        "SXTBmi.n": "Signed Extend Byte (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SXTBmi.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SXTBpl": "Signed Extend Byte (If APSR.N == 0 [Plus])",
        "SXTBpl.n": "Signed Extend Byte (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SXTBpl.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SXTBvs": "Signed Extend Byte (If APSR.V == 1 [Overflow])",
        "SXTBvs.n": "Signed Extend Byte (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTBvs.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTBvc": "Signed Extend Byte (If APSR.V == 0 [No Overflow])",
        "SXTBvc.n": "Signed Extend Byte (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTBvc.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTBhi": "Signed Extend Byte (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTBhi.n": "Signed Extend Byte (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTBhi.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTBls": "Signed Extend Byte (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTBls.n": "Signed Extend Byte (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTBls.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTBge": "Signed Extend Byte (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTBge.n": "Signed Extend Byte (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTBge.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTBlt": "Signed Extend Byte (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTBlt.n": "Signed Extend Byte (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTBlt.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTBgt": "Signed Extend Byte (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTBgt.n": "Signed Extend Byte (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTBgt.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTBle": "Signed Extend Byte (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTBle.n": "Signed Extend Byte (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTBle.w": "Signed Extend Byte (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTBal": "Signed Extend Byte (Always)",
        "SXTBal.n": "Signed Extend Byte (T 16bits encoding) (Always)",
        "SXTBal.w": "Signed Extend Byte (T/A 32bits encoding) (Always)"
      }
    },
    "SXTB16%{c}%{q}": {
      "description": "Signed Extend Byte 16 %{q} %{c}",
      "variants": {
        "SXTB16": "Signed Extend Byte 16",
        "SXTB16.n": "Signed Extend Byte 16 (T 16bits encoding)",
        "SXTB16.w": "Signed Extend Byte 16 (T/A 32bits encoding)",
        "SXTB16eq": "Signed Extend Byte 16 (If APSR.Z == 1 [Equal])",
        "SXTB16eq.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTB16eq.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTB16ne": "Signed Extend Byte 16 (If APSR.Z == 0 [Not Equal])",
        "SXTB16ne.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTB16ne.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTB16cs": "Signed Extend Byte 16 (If APSR.C == 1 [Carry Set])",
        "SXTB16cs.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTB16cs.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTB16cc": "Signed Extend Byte 16 (If APSR.C == 0 [Carry Clear])",
        "SXTB16cc.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTB16cc.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTB16mi": "Signed Extend Byte 16 (If APSR.N == 1 [Minus])",
        "SXTB16mi.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SXTB16mi.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SXTB16pl": "Signed Extend Byte 16 (If APSR.N == 0 [Plus])",
        "SXTB16pl.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SXTB16pl.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SXTB16vs": "Signed Extend Byte 16 (If APSR.V == 1 [Overflow])",
        "SXTB16vs.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTB16vs.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTB16vc": "Signed Extend Byte 16 (If APSR.V == 0 [No Overflow])",
        "SXTB16vc.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTB16vc.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTB16hi": "Signed Extend Byte 16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTB16hi.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTB16hi.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTB16ls": "Signed Extend Byte 16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTB16ls.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTB16ls.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTB16ge": "Signed Extend Byte 16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTB16ge.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTB16ge.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTB16lt": "Signed Extend Byte 16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTB16lt.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTB16lt.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTB16gt": "Signed Extend Byte 16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTB16gt.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTB16gt.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTB16le": "Signed Extend Byte 16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTB16le.n": "Signed Extend Byte 16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTB16le.w": "Signed Extend Byte 16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTB16al": "Signed Extend Byte 16 (Always)",
        "SXTB16al.n": "Signed Extend Byte 16 (T 16bits encoding) (Always)",
        "SXTB16al.w": "Signed Extend Byte 16 (T/A 32bits encoding) (Always)"
      }
    },
    "SXTH%{c}%{q}": {
      "description": "Signed Extend Halfword %{q} %{c}",
      "variants": {
        "SXTH": "Signed Extend Halfword",
        "SXTH.n": "Signed Extend Halfword (T 16bits encoding)",
        "SXTH.w": "Signed Extend Halfword (T/A 32bits encoding)",
        "SXTHeq": "Signed Extend Halfword (If APSR.Z == 1 [Equal])",
        "SXTHeq.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTHeq.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "SXTHne": "Signed Extend Halfword (If APSR.Z == 0 [Not Equal])",
        "SXTHne.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTHne.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "SXTHcs": "Signed Extend Halfword (If APSR.C == 1 [Carry Set])",
        "SXTHcs.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTHcs.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "SXTHcc": "Signed Extend Halfword (If APSR.C == 0 [Carry Clear])",
        "SXTHcc.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTHcc.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "SXTHmi": "Signed Extend Halfword (If APSR.N == 1 [Minus])",
        "SXTHmi.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "SXTHmi.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "SXTHpl": "Signed Extend Halfword (If APSR.N == 0 [Plus])",
        "SXTHpl.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "SXTHpl.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "SXTHvs": "Signed Extend Halfword (If APSR.V == 1 [Overflow])",
        "SXTHvs.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTHvs.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "SXTHvc": "Signed Extend Halfword (If APSR.V == 0 [No Overflow])",
        "SXTHvc.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTHvc.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "SXTHhi": "Signed Extend Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTHhi.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTHhi.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "SXTHls": "Signed Extend Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTHls.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTHls.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "SXTHge": "Signed Extend Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTHge.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTHge.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "SXTHlt": "Signed Extend Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTHlt.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTHlt.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "SXTHgt": "Signed Extend Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTHgt.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTHgt.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "SXTHle": "Signed Extend Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTHle.n": "Signed Extend Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTHle.w": "Signed Extend Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "SXTHal": "Signed Extend Halfword (Always)",
        "SXTHal.n": "Signed Extend Halfword (T 16bits encoding) (Always)",
        "SXTHal.w": "Signed Extend Halfword (T/A 32bits encoding) (Always)"
      }
    },
    "TBB%{c}%{q}": {
      "description": "Table Branch Byte",
      "variants": {
        "TBB": "Table Branch Byte",
        "TBB.n": "Table Branch Byte",
        "TBB.w": "Table Branch Byte",
        "TBBeq": "Table Branch Byte",
        "TBBeq.n": "Table Branch Byte",
        "TBBeq.w": "Table Branch Byte",
        "TBBne": "Table Branch Byte",
        "TBBne.n": "Table Branch Byte",
        "TBBne.w": "Table Branch Byte",
        "TBBcs": "Table Branch Byte",
        "TBBcs.n": "Table Branch Byte",
        "TBBcs.w": "Table Branch Byte",
        "TBBcc": "Table Branch Byte",
        "TBBcc.n": "Table Branch Byte",
        "TBBcc.w": "Table Branch Byte",
        "TBBmi": "Table Branch Byte",
        "TBBmi.n": "Table Branch Byte",
        "TBBmi.w": "Table Branch Byte",
        "TBBpl": "Table Branch Byte",
        "TBBpl.n": "Table Branch Byte",
        "TBBpl.w": "Table Branch Byte",
        "TBBvs": "Table Branch Byte",
        "TBBvs.n": "Table Branch Byte",
        "TBBvs.w": "Table Branch Byte",
        "TBBvc": "Table Branch Byte",
        "TBBvc.n": "Table Branch Byte",
        "TBBvc.w": "Table Branch Byte",
        "TBBhi": "Table Branch Byte",
        "TBBhi.n": "Table Branch Byte",
        "TBBhi.w": "Table Branch Byte",
        "TBBls": "Table Branch Byte",
        "TBBls.n": "Table Branch Byte",
        "TBBls.w": "Table Branch Byte",
        "TBBge": "Table Branch Byte",
        "TBBge.n": "Table Branch Byte",
        "TBBge.w": "Table Branch Byte",
        "TBBlt": "Table Branch Byte",
        "TBBlt.n": "Table Branch Byte",
        "TBBlt.w": "Table Branch Byte",
        "TBBgt": "Table Branch Byte",
        "TBBgt.n": "Table Branch Byte",
        "TBBgt.w": "Table Branch Byte",
        "TBBle": "Table Branch Byte",
        "TBBle.n": "Table Branch Byte",
        "TBBle.w": "Table Branch Byte",
        "TBBal": "Table Branch Byte",
        "TBBal.n": "Table Branch Byte",
        "TBBal.w": "Table Branch Byte"
      }
    },
    "TBH%{c}%{q}": {
      "description": "Table Branch Halfword",
      "variants": {
        "TBH": "Table Branch Halfword",
        "TBH.n": "Table Branch Halfword",
        "TBH.w": "Table Branch Halfword",
        "TBHeq": "Table Branch Halfword",
        "TBHeq.n": "Table Branch Halfword",
        "TBHeq.w": "Table Branch Halfword",
        "TBHne": "Table Branch Halfword",
        "TBHne.n": "Table Branch Halfword",
        "TBHne.w": "Table Branch Halfword",
        "TBHcs": "Table Branch Halfword",
        "TBHcs.n": "Table Branch Halfword",
        "TBHcs.w": "Table Branch Halfword",
        "TBHcc": "Table Branch Halfword",
        "TBHcc.n": "Table Branch Halfword",
        "TBHcc.w": "Table Branch Halfword",
        "TBHmi": "Table Branch Halfword",
        "TBHmi.n": "Table Branch Halfword",
        "TBHmi.w": "Table Branch Halfword",
        "TBHpl": "Table Branch Halfword",
        "TBHpl.n": "Table Branch Halfword",
        "TBHpl.w": "Table Branch Halfword",
        "TBHvs": "Table Branch Halfword",
        "TBHvs.n": "Table Branch Halfword",
        "TBHvs.w": "Table Branch Halfword",
        "TBHvc": "Table Branch Halfword",
        "TBHvc.n": "Table Branch Halfword",
        "TBHvc.w": "Table Branch Halfword",
        "TBHhi": "Table Branch Halfword",
        "TBHhi.n": "Table Branch Halfword",
        "TBHhi.w": "Table Branch Halfword",
        "TBHls": "Table Branch Halfword",
        "TBHls.n": "Table Branch Halfword",
        "TBHls.w": "Table Branch Halfword",
        "TBHge": "Table Branch Halfword",
        "TBHge.n": "Table Branch Halfword",
        "TBHge.w": "Table Branch Halfword",
        "TBHlt": "Table Branch Halfword",
        "TBHlt.n": "Table Branch Halfword",
        "TBHlt.w": "Table Branch Halfword",
        "TBHgt": "Table Branch Halfword",
        "TBHgt.n": "Table Branch Halfword",
        "TBHgt.w": "Table Branch Halfword",
        "TBHle": "Table Branch Halfword",
        "TBHle.n": "Table Branch Halfword",
        "TBHle.w": "Table Branch Halfword",
        "TBHal": "Table Branch Halfword",
        "TBHal.n": "Table Branch Halfword",
        "TBHal.w": "Table Branch Halfword"
      }
    },
    "TEQ%{c}%{q}": {
      "description": "Test Equivalence %{q} %{c}",
      "variants": {
        "TEQ": "Test Equivalence",
        "TEQ.n": "Test Equivalence (T 16bits encoding)",
        "TEQ.w": "Test Equivalence (T/A 32bits encoding)",
        "TEQeq": "Test Equivalence (If APSR.Z == 1 [Equal])",
        "TEQeq.n": "Test Equivalence (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "TEQeq.w": "Test Equivalence (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "TEQne": "Test Equivalence (If APSR.Z == 0 [Not Equal])",
        "TEQne.n": "Test Equivalence (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "TEQne.w": "Test Equivalence (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "TEQcs": "Test Equivalence (If APSR.C == 1 [Carry Set])",
        "TEQcs.n": "Test Equivalence (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "TEQcs.w": "Test Equivalence (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "TEQcc": "Test Equivalence (If APSR.C == 0 [Carry Clear])",
        "TEQcc.n": "Test Equivalence (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "TEQcc.w": "Test Equivalence (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "TEQmi": "Test Equivalence (If APSR.N == 1 [Minus])",
        "TEQmi.n": "Test Equivalence (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "TEQmi.w": "Test Equivalence (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "TEQpl": "Test Equivalence (If APSR.N == 0 [Plus])",
        "TEQpl.n": "Test Equivalence (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "TEQpl.w": "Test Equivalence (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "TEQvs": "Test Equivalence (If APSR.V == 1 [Overflow])",
        "TEQvs.n": "Test Equivalence (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "TEQvs.w": "Test Equivalence (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "TEQvc": "Test Equivalence (If APSR.V == 0 [No Overflow])",
        "TEQvc.n": "Test Equivalence (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "TEQvc.w": "Test Equivalence (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "TEQhi": "Test Equivalence (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "TEQhi.n": "Test Equivalence (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "TEQhi.w": "Test Equivalence (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "TEQls": "Test Equivalence (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "TEQls.n": "Test Equivalence (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "TEQls.w": "Test Equivalence (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "TEQge": "Test Equivalence (If APSR.N == APSR.V [Signed Greater or Equal])",
        "TEQge.n": "Test Equivalence (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "TEQge.w": "Test Equivalence (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "TEQlt": "Test Equivalence (If APSR.N != APSR.V [Signed Lesser Than])",
        "TEQlt.n": "Test Equivalence (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "TEQlt.w": "Test Equivalence (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "TEQgt": "Test Equivalence (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "TEQgt.n": "Test Equivalence (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "TEQgt.w": "Test Equivalence (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "TEQle": "Test Equivalence (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "TEQle.n": "Test Equivalence (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "TEQle.w": "Test Equivalence (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "TEQal": "Test Equivalence (Always)",
        "TEQal.n": "Test Equivalence (T 16bits encoding) (Always)",
        "TEQal.w": "Test Equivalence (T/A 32bits encoding) (Always)"
      }
    },
    "TST%{c}%{q}": {
      "description": "Test %{q} %{c}",
      "variants": {
        "TST": "Test",
        "TST.n": "Test (T 16bits encoding)",
        "TST.w": "Test (T/A 32bits encoding)",
        "TSTeq": "Test (If APSR.Z == 1 [Equal])",
        "TSTeq.n": "Test (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "TSTeq.w": "Test (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "TSTne": "Test (If APSR.Z == 0 [Not Equal])",
        "TSTne.n": "Test (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "TSTne.w": "Test (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "TSTcs": "Test (If APSR.C == 1 [Carry Set])",
        "TSTcs.n": "Test (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "TSTcs.w": "Test (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "TSTcc": "Test (If APSR.C == 0 [Carry Clear])",
        "TSTcc.n": "Test (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "TSTcc.w": "Test (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "TSTmi": "Test (If APSR.N == 1 [Minus])",
        "TSTmi.n": "Test (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "TSTmi.w": "Test (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "TSTpl": "Test (If APSR.N == 0 [Plus])",
        "TSTpl.n": "Test (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "TSTpl.w": "Test (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "TSTvs": "Test (If APSR.V == 1 [Overflow])",
        "TSTvs.n": "Test (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "TSTvs.w": "Test (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "TSTvc": "Test (If APSR.V == 0 [No Overflow])",
        "TSTvc.n": "Test (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "TSTvc.w": "Test (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "TSThi": "Test (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "TSThi.n": "Test (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "TSThi.w": "Test (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "TSTls": "Test (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "TSTls.n": "Test (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "TSTls.w": "Test (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "TSTge": "Test (If APSR.N == APSR.V [Signed Greater or Equal])",
        "TSTge.n": "Test (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "TSTge.w": "Test (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "TSTlt": "Test (If APSR.N != APSR.V [Signed Lesser Than])",
        "TSTlt.n": "Test (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "TSTlt.w": "Test (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "TSTgt": "Test (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "TSTgt.n": "Test (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "TSTgt.w": "Test (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "TSTle": "Test (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "TSTle.n": "Test (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "TSTle.w": "Test (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "TSTal": "Test (Always)",
        "TSTal.n": "Test (T 16bits encoding) (Always)",
        "TSTal.w": "Test (T/A 32bits encoding) (Always)"
      }
    },
    "U%{opmode}%{operations}%{bsize}%{c}%{q}": {
      "description": "Unsigned %{opmode} %{operations} %{bsize} %{q} %{c}",
      "variants": {
        "UA.8": "Unsigned Add .8",
        "UA.8.n": "Unsigned Add .8 (T 16bits encoding)",
        "UA.8.w": "Unsigned Add .8 (T/A 32bits encoding)",
        "UA.8eq": "Unsigned Add .8 (If APSR.Z == 1 [Equal])",
        "UA.8eq.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UA.8eq.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UA.8ne": "Unsigned Add .8 (If APSR.Z == 0 [Not Equal])",
        "UA.8ne.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UA.8ne.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UA.8cs": "Unsigned Add .8 (If APSR.C == 1 [Carry Set])",
        "UA.8cs.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UA.8cs.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UA.8cc": "Unsigned Add .8 (If APSR.C == 0 [Carry Clear])",
        "UA.8cc.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UA.8cc.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UA.8mi": "Unsigned Add .8 (If APSR.N == 1 [Minus])",
        "UA.8mi.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UA.8mi.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UA.8pl": "Unsigned Add .8 (If APSR.N == 0 [Plus])",
        "UA.8pl.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UA.8pl.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UA.8vs": "Unsigned Add .8 (If APSR.V == 1 [Overflow])",
        "UA.8vs.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UA.8vs.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UA.8vc": "Unsigned Add .8 (If APSR.V == 0 [No Overflow])",
        "UA.8vc.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UA.8vc.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UA.8hi": "Unsigned Add .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UA.8hi.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UA.8hi.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UA.8ls": "Unsigned Add .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UA.8ls.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UA.8ls.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UA.8ge": "Unsigned Add .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UA.8ge.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UA.8ge.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UA.8lt": "Unsigned Add .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UA.8lt.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UA.8lt.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UA.8gt": "Unsigned Add .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UA.8gt.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UA.8gt.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UA.8le": "Unsigned Add .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UA.8le.n": "Unsigned Add .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UA.8le.w": "Unsigned Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UA.8al": "Unsigned Add .8 (Always)",
        "UA.8al.n": "Unsigned Add .8 (T 16bits encoding) (Always)",
        "UA.8al.w": "Unsigned Add .8 (T/A 32bits encoding) (Always)",
        "UA.16": "Unsigned Add .16",
        "UA.16.n": "Unsigned Add .16 (T 16bits encoding)",
        "UA.16.w": "Unsigned Add .16 (T/A 32bits encoding)",
        "UA.16eq": "Unsigned Add .16 (If APSR.Z == 1 [Equal])",
        "UA.16eq.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UA.16eq.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UA.16ne": "Unsigned Add .16 (If APSR.Z == 0 [Not Equal])",
        "UA.16ne.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UA.16ne.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UA.16cs": "Unsigned Add .16 (If APSR.C == 1 [Carry Set])",
        "UA.16cs.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UA.16cs.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UA.16cc": "Unsigned Add .16 (If APSR.C == 0 [Carry Clear])",
        "UA.16cc.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UA.16cc.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UA.16mi": "Unsigned Add .16 (If APSR.N == 1 [Minus])",
        "UA.16mi.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UA.16mi.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UA.16pl": "Unsigned Add .16 (If APSR.N == 0 [Plus])",
        "UA.16pl.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UA.16pl.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UA.16vs": "Unsigned Add .16 (If APSR.V == 1 [Overflow])",
        "UA.16vs.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UA.16vs.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UA.16vc": "Unsigned Add .16 (If APSR.V == 0 [No Overflow])",
        "UA.16vc.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UA.16vc.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UA.16hi": "Unsigned Add .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UA.16hi.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UA.16hi.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UA.16ls": "Unsigned Add .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UA.16ls.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UA.16ls.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UA.16ge": "Unsigned Add .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UA.16ge.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UA.16ge.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UA.16lt": "Unsigned Add .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UA.16lt.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UA.16lt.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UA.16gt": "Unsigned Add .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UA.16gt.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UA.16gt.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UA.16le": "Unsigned Add .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UA.16le.n": "Unsigned Add .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UA.16le.w": "Unsigned Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UA.16al": "Unsigned Add .16 (Always)",
        "UA.16al.n": "Unsigned Add .16 (T 16bits encoding) (Always)",
        "UA.16al.w": "Unsigned Add .16 (T/A 32bits encoding) (Always)",
        "US.8": "Unsigned Subtract .8",
        "US.8.n": "Unsigned Subtract .8 (T 16bits encoding)",
        "US.8.w": "Unsigned Subtract .8 (T/A 32bits encoding)",
        "US.8eq": "Unsigned Subtract .8 (If APSR.Z == 1 [Equal])",
        "US.8eq.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "US.8eq.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "US.8ne": "Unsigned Subtract .8 (If APSR.Z == 0 [Not Equal])",
        "US.8ne.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "US.8ne.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "US.8cs": "Unsigned Subtract .8 (If APSR.C == 1 [Carry Set])",
        "US.8cs.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "US.8cs.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "US.8cc": "Unsigned Subtract .8 (If APSR.C == 0 [Carry Clear])",
        "US.8cc.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "US.8cc.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "US.8mi": "Unsigned Subtract .8 (If APSR.N == 1 [Minus])",
        "US.8mi.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "US.8mi.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "US.8pl": "Unsigned Subtract .8 (If APSR.N == 0 [Plus])",
        "US.8pl.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "US.8pl.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "US.8vs": "Unsigned Subtract .8 (If APSR.V == 1 [Overflow])",
        "US.8vs.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "US.8vs.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "US.8vc": "Unsigned Subtract .8 (If APSR.V == 0 [No Overflow])",
        "US.8vc.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "US.8vc.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "US.8hi": "Unsigned Subtract .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "US.8hi.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "US.8hi.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "US.8ls": "Unsigned Subtract .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "US.8ls.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "US.8ls.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "US.8ge": "Unsigned Subtract .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "US.8ge.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "US.8ge.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "US.8lt": "Unsigned Subtract .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "US.8lt.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "US.8lt.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "US.8gt": "Unsigned Subtract .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "US.8gt.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "US.8gt.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "US.8le": "Unsigned Subtract .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "US.8le.n": "Unsigned Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "US.8le.w": "Unsigned Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "US.8al": "Unsigned Subtract .8 (Always)",
        "US.8al.n": "Unsigned Subtract .8 (T 16bits encoding) (Always)",
        "US.8al.w": "Unsigned Subtract .8 (T/A 32bits encoding) (Always)",
        "US.16": "Unsigned Subtract .16",
        "US.16.n": "Unsigned Subtract .16 (T 16bits encoding)",
        "US.16.w": "Unsigned Subtract .16 (T/A 32bits encoding)",
        "US.16eq": "Unsigned Subtract .16 (If APSR.Z == 1 [Equal])",
        "US.16eq.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "US.16eq.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "US.16ne": "Unsigned Subtract .16 (If APSR.Z == 0 [Not Equal])",
        "US.16ne.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "US.16ne.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "US.16cs": "Unsigned Subtract .16 (If APSR.C == 1 [Carry Set])",
        "US.16cs.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "US.16cs.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "US.16cc": "Unsigned Subtract .16 (If APSR.C == 0 [Carry Clear])",
        "US.16cc.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "US.16cc.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "US.16mi": "Unsigned Subtract .16 (If APSR.N == 1 [Minus])",
        "US.16mi.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "US.16mi.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "US.16pl": "Unsigned Subtract .16 (If APSR.N == 0 [Plus])",
        "US.16pl.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "US.16pl.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "US.16vs": "Unsigned Subtract .16 (If APSR.V == 1 [Overflow])",
        "US.16vs.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "US.16vs.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "US.16vc": "Unsigned Subtract .16 (If APSR.V == 0 [No Overflow])",
        "US.16vc.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "US.16vc.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "US.16hi": "Unsigned Subtract .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "US.16hi.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "US.16hi.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "US.16ls": "Unsigned Subtract .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "US.16ls.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "US.16ls.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "US.16ge": "Unsigned Subtract .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "US.16ge.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "US.16ge.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "US.16lt": "Unsigned Subtract .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "US.16lt.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "US.16lt.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "US.16gt": "Unsigned Subtract .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "US.16gt.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "US.16gt.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "US.16le": "Unsigned Subtract .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "US.16le.n": "Unsigned Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "US.16le.w": "Unsigned Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "US.16al": "Unsigned Subtract .16 (Always)",
        "US.16al.n": "Unsigned Subtract .16 (T 16bits encoding) (Always)",
        "US.16al.w": "Unsigned Subtract .16 (T/A 32bits encoding) (Always)",
        "UhA.8": "Unsigned Halving Add .8",
        "UhA.8.n": "Unsigned Halving Add .8 (T 16bits encoding)",
        "UhA.8.w": "Unsigned Halving Add .8 (T/A 32bits encoding)",
        "UhA.8eq": "Unsigned Halving Add .8 (If APSR.Z == 1 [Equal])",
        "UhA.8eq.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UhA.8eq.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UhA.8ne": "Unsigned Halving Add .8 (If APSR.Z == 0 [Not Equal])",
        "UhA.8ne.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UhA.8ne.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UhA.8cs": "Unsigned Halving Add .8 (If APSR.C == 1 [Carry Set])",
        "UhA.8cs.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UhA.8cs.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UhA.8cc": "Unsigned Halving Add .8 (If APSR.C == 0 [Carry Clear])",
        "UhA.8cc.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UhA.8cc.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UhA.8mi": "Unsigned Halving Add .8 (If APSR.N == 1 [Minus])",
        "UhA.8mi.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UhA.8mi.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UhA.8pl": "Unsigned Halving Add .8 (If APSR.N == 0 [Plus])",
        "UhA.8pl.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UhA.8pl.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UhA.8vs": "Unsigned Halving Add .8 (If APSR.V == 1 [Overflow])",
        "UhA.8vs.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UhA.8vs.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UhA.8vc": "Unsigned Halving Add .8 (If APSR.V == 0 [No Overflow])",
        "UhA.8vc.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UhA.8vc.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UhA.8hi": "Unsigned Halving Add .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhA.8hi.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhA.8hi.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhA.8ls": "Unsigned Halving Add .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhA.8ls.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhA.8ls.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhA.8ge": "Unsigned Halving Add .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhA.8ge.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhA.8ge.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhA.8lt": "Unsigned Halving Add .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhA.8lt.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhA.8lt.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhA.8gt": "Unsigned Halving Add .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhA.8gt.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhA.8gt.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhA.8le": "Unsigned Halving Add .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhA.8le.n": "Unsigned Halving Add .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhA.8le.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhA.8al": "Unsigned Halving Add .8 (Always)",
        "UhA.8al.n": "Unsigned Halving Add .8 (T 16bits encoding) (Always)",
        "UhA.8al.w": "Unsigned Halving Add .8 (T/A 32bits encoding) (Always)",
        "UhA.16": "Unsigned Halving Add .16",
        "UhA.16.n": "Unsigned Halving Add .16 (T 16bits encoding)",
        "UhA.16.w": "Unsigned Halving Add .16 (T/A 32bits encoding)",
        "UhA.16eq": "Unsigned Halving Add .16 (If APSR.Z == 1 [Equal])",
        "UhA.16eq.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UhA.16eq.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UhA.16ne": "Unsigned Halving Add .16 (If APSR.Z == 0 [Not Equal])",
        "UhA.16ne.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UhA.16ne.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UhA.16cs": "Unsigned Halving Add .16 (If APSR.C == 1 [Carry Set])",
        "UhA.16cs.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UhA.16cs.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UhA.16cc": "Unsigned Halving Add .16 (If APSR.C == 0 [Carry Clear])",
        "UhA.16cc.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UhA.16cc.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UhA.16mi": "Unsigned Halving Add .16 (If APSR.N == 1 [Minus])",
        "UhA.16mi.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UhA.16mi.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UhA.16pl": "Unsigned Halving Add .16 (If APSR.N == 0 [Plus])",
        "UhA.16pl.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UhA.16pl.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UhA.16vs": "Unsigned Halving Add .16 (If APSR.V == 1 [Overflow])",
        "UhA.16vs.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UhA.16vs.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UhA.16vc": "Unsigned Halving Add .16 (If APSR.V == 0 [No Overflow])",
        "UhA.16vc.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UhA.16vc.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UhA.16hi": "Unsigned Halving Add .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhA.16hi.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhA.16hi.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhA.16ls": "Unsigned Halving Add .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhA.16ls.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhA.16ls.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhA.16ge": "Unsigned Halving Add .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhA.16ge.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhA.16ge.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhA.16lt": "Unsigned Halving Add .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhA.16lt.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhA.16lt.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhA.16gt": "Unsigned Halving Add .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhA.16gt.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhA.16gt.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhA.16le": "Unsigned Halving Add .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhA.16le.n": "Unsigned Halving Add .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhA.16le.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhA.16al": "Unsigned Halving Add .16 (Always)",
        "UhA.16al.n": "Unsigned Halving Add .16 (T 16bits encoding) (Always)",
        "UhA.16al.w": "Unsigned Halving Add .16 (T/A 32bits encoding) (Always)",
        "UhS.8": "Unsigned Halving Subtract .8",
        "UhS.8.n": "Unsigned Halving Subtract .8 (T 16bits encoding)",
        "UhS.8.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding)",
        "UhS.8eq": "Unsigned Halving Subtract .8 (If APSR.Z == 1 [Equal])",
        "UhS.8eq.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UhS.8eq.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UhS.8ne": "Unsigned Halving Subtract .8 (If APSR.Z == 0 [Not Equal])",
        "UhS.8ne.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UhS.8ne.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UhS.8cs": "Unsigned Halving Subtract .8 (If APSR.C == 1 [Carry Set])",
        "UhS.8cs.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UhS.8cs.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UhS.8cc": "Unsigned Halving Subtract .8 (If APSR.C == 0 [Carry Clear])",
        "UhS.8cc.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UhS.8cc.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UhS.8mi": "Unsigned Halving Subtract .8 (If APSR.N == 1 [Minus])",
        "UhS.8mi.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UhS.8mi.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UhS.8pl": "Unsigned Halving Subtract .8 (If APSR.N == 0 [Plus])",
        "UhS.8pl.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UhS.8pl.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UhS.8vs": "Unsigned Halving Subtract .8 (If APSR.V == 1 [Overflow])",
        "UhS.8vs.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UhS.8vs.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UhS.8vc": "Unsigned Halving Subtract .8 (If APSR.V == 0 [No Overflow])",
        "UhS.8vc.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UhS.8vc.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UhS.8hi": "Unsigned Halving Subtract .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhS.8hi.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhS.8hi.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhS.8ls": "Unsigned Halving Subtract .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhS.8ls.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhS.8ls.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhS.8ge": "Unsigned Halving Subtract .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhS.8ge.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhS.8ge.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhS.8lt": "Unsigned Halving Subtract .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhS.8lt.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhS.8lt.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhS.8gt": "Unsigned Halving Subtract .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhS.8gt.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhS.8gt.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhS.8le": "Unsigned Halving Subtract .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhS.8le.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhS.8le.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhS.8al": "Unsigned Halving Subtract .8 (Always)",
        "UhS.8al.n": "Unsigned Halving Subtract .8 (T 16bits encoding) (Always)",
        "UhS.8al.w": "Unsigned Halving Subtract .8 (T/A 32bits encoding) (Always)",
        "UhS.16": "Unsigned Halving Subtract .16",
        "UhS.16.n": "Unsigned Halving Subtract .16 (T 16bits encoding)",
        "UhS.16.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding)",
        "UhS.16eq": "Unsigned Halving Subtract .16 (If APSR.Z == 1 [Equal])",
        "UhS.16eq.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UhS.16eq.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UhS.16ne": "Unsigned Halving Subtract .16 (If APSR.Z == 0 [Not Equal])",
        "UhS.16ne.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UhS.16ne.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UhS.16cs": "Unsigned Halving Subtract .16 (If APSR.C == 1 [Carry Set])",
        "UhS.16cs.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UhS.16cs.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UhS.16cc": "Unsigned Halving Subtract .16 (If APSR.C == 0 [Carry Clear])",
        "UhS.16cc.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UhS.16cc.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UhS.16mi": "Unsigned Halving Subtract .16 (If APSR.N == 1 [Minus])",
        "UhS.16mi.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UhS.16mi.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UhS.16pl": "Unsigned Halving Subtract .16 (If APSR.N == 0 [Plus])",
        "UhS.16pl.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UhS.16pl.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UhS.16vs": "Unsigned Halving Subtract .16 (If APSR.V == 1 [Overflow])",
        "UhS.16vs.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UhS.16vs.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UhS.16vc": "Unsigned Halving Subtract .16 (If APSR.V == 0 [No Overflow])",
        "UhS.16vc.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UhS.16vc.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UhS.16hi": "Unsigned Halving Subtract .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhS.16hi.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhS.16hi.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UhS.16ls": "Unsigned Halving Subtract .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhS.16ls.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhS.16ls.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UhS.16ge": "Unsigned Halving Subtract .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhS.16ge.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhS.16ge.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UhS.16lt": "Unsigned Halving Subtract .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhS.16lt.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhS.16lt.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UhS.16gt": "Unsigned Halving Subtract .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhS.16gt.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhS.16gt.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UhS.16le": "Unsigned Halving Subtract .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhS.16le.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhS.16le.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UhS.16al": "Unsigned Halving Subtract .16 (Always)",
        "UhS.16al.n": "Unsigned Halving Subtract .16 (T 16bits encoding) (Always)",
        "UhS.16al.w": "Unsigned Halving Subtract .16 (T/A 32bits encoding) (Always)",
        "UqA.8": "Unsigned Saturating Add .8",
        "UqA.8.n": "Unsigned Saturating Add .8 (T 16bits encoding)",
        "UqA.8.w": "Unsigned Saturating Add .8 (T/A 32bits encoding)",
        "UqA.8eq": "Unsigned Saturating Add .8 (If APSR.Z == 1 [Equal])",
        "UqA.8eq.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UqA.8eq.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UqA.8ne": "Unsigned Saturating Add .8 (If APSR.Z == 0 [Not Equal])",
        "UqA.8ne.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UqA.8ne.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UqA.8cs": "Unsigned Saturating Add .8 (If APSR.C == 1 [Carry Set])",
        "UqA.8cs.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UqA.8cs.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UqA.8cc": "Unsigned Saturating Add .8 (If APSR.C == 0 [Carry Clear])",
        "UqA.8cc.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UqA.8cc.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UqA.8mi": "Unsigned Saturating Add .8 (If APSR.N == 1 [Minus])",
        "UqA.8mi.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UqA.8mi.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UqA.8pl": "Unsigned Saturating Add .8 (If APSR.N == 0 [Plus])",
        "UqA.8pl.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UqA.8pl.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UqA.8vs": "Unsigned Saturating Add .8 (If APSR.V == 1 [Overflow])",
        "UqA.8vs.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UqA.8vs.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UqA.8vc": "Unsigned Saturating Add .8 (If APSR.V == 0 [No Overflow])",
        "UqA.8vc.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UqA.8vc.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UqA.8hi": "Unsigned Saturating Add .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqA.8hi.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqA.8hi.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqA.8ls": "Unsigned Saturating Add .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqA.8ls.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqA.8ls.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqA.8ge": "Unsigned Saturating Add .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqA.8ge.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqA.8ge.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqA.8lt": "Unsigned Saturating Add .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqA.8lt.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqA.8lt.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqA.8gt": "Unsigned Saturating Add .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqA.8gt.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqA.8gt.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqA.8le": "Unsigned Saturating Add .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqA.8le.n": "Unsigned Saturating Add .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqA.8le.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqA.8al": "Unsigned Saturating Add .8 (Always)",
        "UqA.8al.n": "Unsigned Saturating Add .8 (T 16bits encoding) (Always)",
        "UqA.8al.w": "Unsigned Saturating Add .8 (T/A 32bits encoding) (Always)",
        "UqA.16": "Unsigned Saturating Add .16",
        "UqA.16.n": "Unsigned Saturating Add .16 (T 16bits encoding)",
        "UqA.16.w": "Unsigned Saturating Add .16 (T/A 32bits encoding)",
        "UqA.16eq": "Unsigned Saturating Add .16 (If APSR.Z == 1 [Equal])",
        "UqA.16eq.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UqA.16eq.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UqA.16ne": "Unsigned Saturating Add .16 (If APSR.Z == 0 [Not Equal])",
        "UqA.16ne.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UqA.16ne.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UqA.16cs": "Unsigned Saturating Add .16 (If APSR.C == 1 [Carry Set])",
        "UqA.16cs.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UqA.16cs.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UqA.16cc": "Unsigned Saturating Add .16 (If APSR.C == 0 [Carry Clear])",
        "UqA.16cc.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UqA.16cc.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UqA.16mi": "Unsigned Saturating Add .16 (If APSR.N == 1 [Minus])",
        "UqA.16mi.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UqA.16mi.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UqA.16pl": "Unsigned Saturating Add .16 (If APSR.N == 0 [Plus])",
        "UqA.16pl.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UqA.16pl.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UqA.16vs": "Unsigned Saturating Add .16 (If APSR.V == 1 [Overflow])",
        "UqA.16vs.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UqA.16vs.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UqA.16vc": "Unsigned Saturating Add .16 (If APSR.V == 0 [No Overflow])",
        "UqA.16vc.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UqA.16vc.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UqA.16hi": "Unsigned Saturating Add .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqA.16hi.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqA.16hi.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqA.16ls": "Unsigned Saturating Add .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqA.16ls.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqA.16ls.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqA.16ge": "Unsigned Saturating Add .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqA.16ge.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqA.16ge.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqA.16lt": "Unsigned Saturating Add .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqA.16lt.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqA.16lt.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqA.16gt": "Unsigned Saturating Add .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqA.16gt.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqA.16gt.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqA.16le": "Unsigned Saturating Add .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqA.16le.n": "Unsigned Saturating Add .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqA.16le.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqA.16al": "Unsigned Saturating Add .16 (Always)",
        "UqA.16al.n": "Unsigned Saturating Add .16 (T 16bits encoding) (Always)",
        "UqA.16al.w": "Unsigned Saturating Add .16 (T/A 32bits encoding) (Always)",
        "UqS.8": "Unsigned Saturating Subtract .8",
        "UqS.8.n": "Unsigned Saturating Subtract .8 (T 16bits encoding)",
        "UqS.8.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding)",
        "UqS.8eq": "Unsigned Saturating Subtract .8 (If APSR.Z == 1 [Equal])",
        "UqS.8eq.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UqS.8eq.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UqS.8ne": "Unsigned Saturating Subtract .8 (If APSR.Z == 0 [Not Equal])",
        "UqS.8ne.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UqS.8ne.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UqS.8cs": "Unsigned Saturating Subtract .8 (If APSR.C == 1 [Carry Set])",
        "UqS.8cs.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UqS.8cs.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UqS.8cc": "Unsigned Saturating Subtract .8 (If APSR.C == 0 [Carry Clear])",
        "UqS.8cc.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UqS.8cc.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UqS.8mi": "Unsigned Saturating Subtract .8 (If APSR.N == 1 [Minus])",
        "UqS.8mi.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UqS.8mi.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UqS.8pl": "Unsigned Saturating Subtract .8 (If APSR.N == 0 [Plus])",
        "UqS.8pl.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UqS.8pl.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UqS.8vs": "Unsigned Saturating Subtract .8 (If APSR.V == 1 [Overflow])",
        "UqS.8vs.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UqS.8vs.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UqS.8vc": "Unsigned Saturating Subtract .8 (If APSR.V == 0 [No Overflow])",
        "UqS.8vc.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UqS.8vc.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UqS.8hi": "Unsigned Saturating Subtract .8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqS.8hi.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqS.8hi.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqS.8ls": "Unsigned Saturating Subtract .8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqS.8ls.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqS.8ls.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqS.8ge": "Unsigned Saturating Subtract .8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqS.8ge.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqS.8ge.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqS.8lt": "Unsigned Saturating Subtract .8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqS.8lt.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqS.8lt.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqS.8gt": "Unsigned Saturating Subtract .8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqS.8gt.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqS.8gt.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqS.8le": "Unsigned Saturating Subtract .8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqS.8le.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqS.8le.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqS.8al": "Unsigned Saturating Subtract .8 (Always)",
        "UqS.8al.n": "Unsigned Saturating Subtract .8 (T 16bits encoding) (Always)",
        "UqS.8al.w": "Unsigned Saturating Subtract .8 (T/A 32bits encoding) (Always)",
        "UqS.16": "Unsigned Saturating Subtract .16",
        "UqS.16.n": "Unsigned Saturating Subtract .16 (T 16bits encoding)",
        "UqS.16.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding)",
        "UqS.16eq": "Unsigned Saturating Subtract .16 (If APSR.Z == 1 [Equal])",
        "UqS.16eq.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UqS.16eq.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UqS.16ne": "Unsigned Saturating Subtract .16 (If APSR.Z == 0 [Not Equal])",
        "UqS.16ne.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UqS.16ne.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UqS.16cs": "Unsigned Saturating Subtract .16 (If APSR.C == 1 [Carry Set])",
        "UqS.16cs.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UqS.16cs.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UqS.16cc": "Unsigned Saturating Subtract .16 (If APSR.C == 0 [Carry Clear])",
        "UqS.16cc.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UqS.16cc.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UqS.16mi": "Unsigned Saturating Subtract .16 (If APSR.N == 1 [Minus])",
        "UqS.16mi.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UqS.16mi.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UqS.16pl": "Unsigned Saturating Subtract .16 (If APSR.N == 0 [Plus])",
        "UqS.16pl.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UqS.16pl.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UqS.16vs": "Unsigned Saturating Subtract .16 (If APSR.V == 1 [Overflow])",
        "UqS.16vs.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UqS.16vs.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UqS.16vc": "Unsigned Saturating Subtract .16 (If APSR.V == 0 [No Overflow])",
        "UqS.16vc.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UqS.16vc.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UqS.16hi": "Unsigned Saturating Subtract .16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqS.16hi.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqS.16hi.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UqS.16ls": "Unsigned Saturating Subtract .16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqS.16ls.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqS.16ls.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UqS.16ge": "Unsigned Saturating Subtract .16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqS.16ge.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqS.16ge.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UqS.16lt": "Unsigned Saturating Subtract .16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqS.16lt.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqS.16lt.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UqS.16gt": "Unsigned Saturating Subtract .16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqS.16gt.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqS.16gt.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UqS.16le": "Unsigned Saturating Subtract .16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqS.16le.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqS.16le.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UqS.16al": "Unsigned Saturating Subtract .16 (Always)",
        "UqS.16al.n": "Unsigned Saturating Subtract .16 (T 16bits encoding) (Always)",
        "UqS.16al.w": "Unsigned Saturating Subtract .16 (T/A 32bits encoding) (Always)"
      }
    },
    "UASX%{c}%{q}": {
      "description": "Unsigned Add and Subtract with Exchange %{q} %{c}",
      "variants": {
        "UASX": "Unsigned Add and Subtract with Exchange",
        "UASX.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding)",
        "UASX.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding)",
        "UASXeq": "Unsigned Add and Subtract with Exchange (If APSR.Z == 1 [Equal])",
        "UASXeq.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UASXeq.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UASXne": "Unsigned Add and Subtract with Exchange (If APSR.Z == 0 [Not Equal])",
        "UASXne.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UASXne.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UASXcs": "Unsigned Add and Subtract with Exchange (If APSR.C == 1 [Carry Set])",
        "UASXcs.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UASXcs.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UASXcc": "Unsigned Add and Subtract with Exchange (If APSR.C == 0 [Carry Clear])",
        "UASXcc.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UASXcc.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UASXmi": "Unsigned Add and Subtract with Exchange (If APSR.N == 1 [Minus])",
        "UASXmi.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UASXmi.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UASXpl": "Unsigned Add and Subtract with Exchange (If APSR.N == 0 [Plus])",
        "UASXpl.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UASXpl.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UASXvs": "Unsigned Add and Subtract with Exchange (If APSR.V == 1 [Overflow])",
        "UASXvs.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UASXvs.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UASXvc": "Unsigned Add and Subtract with Exchange (If APSR.V == 0 [No Overflow])",
        "UASXvc.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UASXvc.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UASXhi": "Unsigned Add and Subtract with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UASXhi.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UASXhi.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UASXls": "Unsigned Add and Subtract with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UASXls.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UASXls.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UASXge": "Unsigned Add and Subtract with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UASXge.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UASXge.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UASXlt": "Unsigned Add and Subtract with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "UASXlt.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UASXlt.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UASXgt": "Unsigned Add and Subtract with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UASXgt.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UASXgt.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UASXle": "Unsigned Add and Subtract with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UASXle.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UASXle.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UASXal": "Unsigned Add and Subtract with Exchange (Always)",
        "UASXal.n": "Unsigned Add and Subtract with Exchange (T 16bits encoding) (Always)",
        "UASXal.w": "Unsigned Add and Subtract with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "UBFX%{c}%{q}": {
      "description": "Unsigned Bit Field Extract %{q} %{c}",
      "variants": {
        "UBFX": "Unsigned Bit Field Extract",
        "UBFX.n": "Unsigned Bit Field Extract (T 16bits encoding)",
        "UBFX.w": "Unsigned Bit Field Extract (T/A 32bits encoding)",
        "UBFXeq": "Unsigned Bit Field Extract (If APSR.Z == 1 [Equal])",
        "UBFXeq.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UBFXeq.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UBFXne": "Unsigned Bit Field Extract (If APSR.Z == 0 [Not Equal])",
        "UBFXne.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UBFXne.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UBFXcs": "Unsigned Bit Field Extract (If APSR.C == 1 [Carry Set])",
        "UBFXcs.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UBFXcs.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UBFXcc": "Unsigned Bit Field Extract (If APSR.C == 0 [Carry Clear])",
        "UBFXcc.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UBFXcc.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UBFXmi": "Unsigned Bit Field Extract (If APSR.N == 1 [Minus])",
        "UBFXmi.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UBFXmi.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UBFXpl": "Unsigned Bit Field Extract (If APSR.N == 0 [Plus])",
        "UBFXpl.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UBFXpl.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UBFXvs": "Unsigned Bit Field Extract (If APSR.V == 1 [Overflow])",
        "UBFXvs.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UBFXvs.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UBFXvc": "Unsigned Bit Field Extract (If APSR.V == 0 [No Overflow])",
        "UBFXvc.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UBFXvc.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UBFXhi": "Unsigned Bit Field Extract (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UBFXhi.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UBFXhi.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UBFXls": "Unsigned Bit Field Extract (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UBFXls.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UBFXls.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UBFXge": "Unsigned Bit Field Extract (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UBFXge.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UBFXge.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UBFXlt": "Unsigned Bit Field Extract (If APSR.N != APSR.V [Signed Lesser Than])",
        "UBFXlt.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UBFXlt.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UBFXgt": "Unsigned Bit Field Extract (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UBFXgt.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UBFXgt.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UBFXle": "Unsigned Bit Field Extract (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UBFXle.n": "Unsigned Bit Field Extract (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UBFXle.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UBFXal": "Unsigned Bit Field Extract (Always)",
        "UBFXal.n": "Unsigned Bit Field Extract (T 16bits encoding) (Always)",
        "UBFXal.w": "Unsigned Bit Field Extract (T/A 32bits encoding) (Always)"
      }
    },
    "UDF%{c}%{q}": {
      "description": "Undefined %{q} %{c}",
      "variants": {
        "UDF": "Undefined",
        "UDF.n": "Undefined (T 16bits encoding)",
        "UDF.w": "Undefined (T/A 32bits encoding)",
        "UDFal": "Undefined (Always)",
        "UDFal.n": "Undefined (T 16bits encoding) (Always)",
        "UDFal.w": "Undefined (T/A 32bits encoding) (Always)"
      }
    },
    "UDIV%{c}%{q}": {
      "description": "Unsigned Divide %{q} %{c}",
      "variants": {
        "UDIV": "Unsigned Divide",
        "UDIV.n": "Unsigned Divide (T 16bits encoding)",
        "UDIV.w": "Unsigned Divide (T/A 32bits encoding)",
        "UDIVeq": "Unsigned Divide (If APSR.Z == 1 [Equal])",
        "UDIVeq.n": "Unsigned Divide (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UDIVeq.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UDIVne": "Unsigned Divide (If APSR.Z == 0 [Not Equal])",
        "UDIVne.n": "Unsigned Divide (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UDIVne.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UDIVcs": "Unsigned Divide (If APSR.C == 1 [Carry Set])",
        "UDIVcs.n": "Unsigned Divide (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UDIVcs.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UDIVcc": "Unsigned Divide (If APSR.C == 0 [Carry Clear])",
        "UDIVcc.n": "Unsigned Divide (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UDIVcc.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UDIVmi": "Unsigned Divide (If APSR.N == 1 [Minus])",
        "UDIVmi.n": "Unsigned Divide (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UDIVmi.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UDIVpl": "Unsigned Divide (If APSR.N == 0 [Plus])",
        "UDIVpl.n": "Unsigned Divide (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UDIVpl.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UDIVvs": "Unsigned Divide (If APSR.V == 1 [Overflow])",
        "UDIVvs.n": "Unsigned Divide (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UDIVvs.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UDIVvc": "Unsigned Divide (If APSR.V == 0 [No Overflow])",
        "UDIVvc.n": "Unsigned Divide (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UDIVvc.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UDIVhi": "Unsigned Divide (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UDIVhi.n": "Unsigned Divide (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UDIVhi.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UDIVls": "Unsigned Divide (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UDIVls.n": "Unsigned Divide (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UDIVls.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UDIVge": "Unsigned Divide (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UDIVge.n": "Unsigned Divide (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UDIVge.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UDIVlt": "Unsigned Divide (If APSR.N != APSR.V [Signed Lesser Than])",
        "UDIVlt.n": "Unsigned Divide (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UDIVlt.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UDIVgt": "Unsigned Divide (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UDIVgt.n": "Unsigned Divide (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UDIVgt.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UDIVle": "Unsigned Divide (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UDIVle.n": "Unsigned Divide (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UDIVle.w": "Unsigned Divide (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UDIVal": "Unsigned Divide (Always)",
        "UDIVal.n": "Unsigned Divide (T 16bits encoding) (Always)",
        "UDIVal.w": "Unsigned Divide (T/A 32bits encoding) (Always)"
      }
    },
    "UHASX%{c}%{q}": {
      "description": "Unsigned Halving Add and Subtract with Exchange %{q} %{c}",
      "variants": {
        "UHASX": "Unsigned Halving Add and Subtract with Exchange",
        "UHASX.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding)",
        "UHASX.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding)",
        "UHASXeq": "Unsigned Halving Add and Subtract with Exchange (If APSR.Z == 1 [Equal])",
        "UHASXeq.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UHASXeq.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UHASXne": "Unsigned Halving Add and Subtract with Exchange (If APSR.Z == 0 [Not Equal])",
        "UHASXne.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UHASXne.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UHASXcs": "Unsigned Halving Add and Subtract with Exchange (If APSR.C == 1 [Carry Set])",
        "UHASXcs.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UHASXcs.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UHASXcc": "Unsigned Halving Add and Subtract with Exchange (If APSR.C == 0 [Carry Clear])",
        "UHASXcc.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UHASXcc.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UHASXmi": "Unsigned Halving Add and Subtract with Exchange (If APSR.N == 1 [Minus])",
        "UHASXmi.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UHASXmi.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UHASXpl": "Unsigned Halving Add and Subtract with Exchange (If APSR.N == 0 [Plus])",
        "UHASXpl.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UHASXpl.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UHASXvs": "Unsigned Halving Add and Subtract with Exchange (If APSR.V == 1 [Overflow])",
        "UHASXvs.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UHASXvs.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UHASXvc": "Unsigned Halving Add and Subtract with Exchange (If APSR.V == 0 [No Overflow])",
        "UHASXvc.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UHASXvc.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UHASXhi": "Unsigned Halving Add and Subtract with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UHASXhi.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UHASXhi.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UHASXls": "Unsigned Halving Add and Subtract with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UHASXls.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UHASXls.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UHASXge": "Unsigned Halving Add and Subtract with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UHASXge.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UHASXge.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UHASXlt": "Unsigned Halving Add and Subtract with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "UHASXlt.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UHASXlt.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UHASXgt": "Unsigned Halving Add and Subtract with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UHASXgt.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UHASXgt.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UHASXle": "Unsigned Halving Add and Subtract with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UHASXle.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UHASXle.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UHASXal": "Unsigned Halving Add and Subtract with Exchange (Always)",
        "UHASXal.n": "Unsigned Halving Add and Subtract with Exchange (T 16bits encoding) (Always)",
        "UHASXal.w": "Unsigned Halving Add and Subtract with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "UHSAX%{c}%{q}": {
      "description": "Unsigned Halving Subtract and Add with Exchange %{q} %{c}",
      "variants": {
        "UHSAX": "Unsigned Halving Subtract and Add with Exchange",
        "UHSAX.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding)",
        "UHSAX.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding)",
        "UHSAXeq": "Unsigned Halving Subtract and Add with Exchange (If APSR.Z == 1 [Equal])",
        "UHSAXeq.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UHSAXeq.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UHSAXne": "Unsigned Halving Subtract and Add with Exchange (If APSR.Z == 0 [Not Equal])",
        "UHSAXne.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UHSAXne.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UHSAXcs": "Unsigned Halving Subtract and Add with Exchange (If APSR.C == 1 [Carry Set])",
        "UHSAXcs.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UHSAXcs.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UHSAXcc": "Unsigned Halving Subtract and Add with Exchange (If APSR.C == 0 [Carry Clear])",
        "UHSAXcc.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UHSAXcc.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UHSAXmi": "Unsigned Halving Subtract and Add with Exchange (If APSR.N == 1 [Minus])",
        "UHSAXmi.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UHSAXmi.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UHSAXpl": "Unsigned Halving Subtract and Add with Exchange (If APSR.N == 0 [Plus])",
        "UHSAXpl.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UHSAXpl.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UHSAXvs": "Unsigned Halving Subtract and Add with Exchange (If APSR.V == 1 [Overflow])",
        "UHSAXvs.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UHSAXvs.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UHSAXvc": "Unsigned Halving Subtract and Add with Exchange (If APSR.V == 0 [No Overflow])",
        "UHSAXvc.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UHSAXvc.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UHSAXhi": "Unsigned Halving Subtract and Add with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UHSAXhi.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UHSAXhi.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UHSAXls": "Unsigned Halving Subtract and Add with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UHSAXls.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UHSAXls.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UHSAXge": "Unsigned Halving Subtract and Add with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UHSAXge.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UHSAXge.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UHSAXlt": "Unsigned Halving Subtract and Add with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "UHSAXlt.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UHSAXlt.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UHSAXgt": "Unsigned Halving Subtract and Add with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UHSAXgt.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UHSAXgt.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UHSAXle": "Unsigned Halving Subtract and Add with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UHSAXle.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UHSAXle.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UHSAXal": "Unsigned Halving Subtract and Add with Exchange (Always)",
        "UHSAXal.n": "Unsigned Halving Subtract and Add with Exchange (T 16bits encoding) (Always)",
        "UHSAXal.w": "Unsigned Halving Subtract and Add with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "UMAAL%{c}%{q}": {
      "description": "Unsigned Multiply Accumulate Accumulate Long %{q} %{c}",
      "variants": {
        "UMAAL": "Unsigned Multiply Accumulate Accumulate Long",
        "UMAAL.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding)",
        "UMAAL.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding)",
        "UMAALeq": "Unsigned Multiply Accumulate Accumulate Long (If APSR.Z == 1 [Equal])",
        "UMAALeq.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UMAALeq.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UMAALne": "Unsigned Multiply Accumulate Accumulate Long (If APSR.Z == 0 [Not Equal])",
        "UMAALne.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UMAALne.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UMAALcs": "Unsigned Multiply Accumulate Accumulate Long (If APSR.C == 1 [Carry Set])",
        "UMAALcs.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UMAALcs.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UMAALcc": "Unsigned Multiply Accumulate Accumulate Long (If APSR.C == 0 [Carry Clear])",
        "UMAALcc.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UMAALcc.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UMAALmi": "Unsigned Multiply Accumulate Accumulate Long (If APSR.N == 1 [Minus])",
        "UMAALmi.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UMAALmi.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UMAALpl": "Unsigned Multiply Accumulate Accumulate Long (If APSR.N == 0 [Plus])",
        "UMAALpl.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UMAALpl.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UMAALvs": "Unsigned Multiply Accumulate Accumulate Long (If APSR.V == 1 [Overflow])",
        "UMAALvs.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UMAALvs.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UMAALvc": "Unsigned Multiply Accumulate Accumulate Long (If APSR.V == 0 [No Overflow])",
        "UMAALvc.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UMAALvc.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UMAALhi": "Unsigned Multiply Accumulate Accumulate Long (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UMAALhi.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UMAALhi.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UMAALls": "Unsigned Multiply Accumulate Accumulate Long (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UMAALls.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UMAALls.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UMAALge": "Unsigned Multiply Accumulate Accumulate Long (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UMAALge.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UMAALge.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UMAALlt": "Unsigned Multiply Accumulate Accumulate Long (If APSR.N != APSR.V [Signed Lesser Than])",
        "UMAALlt.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UMAALlt.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UMAALgt": "Unsigned Multiply Accumulate Accumulate Long (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UMAALgt.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UMAALgt.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UMAALle": "Unsigned Multiply Accumulate Accumulate Long (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UMAALle.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UMAALle.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UMAALal": "Unsigned Multiply Accumulate Accumulate Long (Always)",
        "UMAALal.n": "Unsigned Multiply Accumulate Accumulate Long (T 16bits encoding) (Always)",
        "UMAALal.w": "Unsigned Multiply Accumulate Accumulate Long (T/A 32bits encoding) (Always)"
      }
    },
    "UMLAL%{s}%{c}%{q}": {
      "description": "Unsigned Multiply Accumulate Long %{q} %{c} %{s}",
      "variants": {
        "UMLAL": "Unsigned Multiply Accumulate Long",
        "UMLAL.n": "Unsigned Multiply Accumulate Long (T 16bits encoding)",
        "UMLAL.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding)",
        "UMLALeq": "Unsigned Multiply Accumulate Long (If APSR.Z == 1 [Equal])",
        "UMLALeq.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UMLALeq.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UMLALne": "Unsigned Multiply Accumulate Long (If APSR.Z == 0 [Not Equal])",
        "UMLALne.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UMLALne.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UMLALcs": "Unsigned Multiply Accumulate Long (If APSR.C == 1 [Carry Set])",
        "UMLALcs.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UMLALcs.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UMLALcc": "Unsigned Multiply Accumulate Long (If APSR.C == 0 [Carry Clear])",
        "UMLALcc.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UMLALcc.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UMLALmi": "Unsigned Multiply Accumulate Long (If APSR.N == 1 [Minus])",
        "UMLALmi.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UMLALmi.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UMLALpl": "Unsigned Multiply Accumulate Long (If APSR.N == 0 [Plus])",
        "UMLALpl.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UMLALpl.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UMLALvs": "Unsigned Multiply Accumulate Long (If APSR.V == 1 [Overflow])",
        "UMLALvs.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UMLALvs.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UMLALvc": "Unsigned Multiply Accumulate Long (If APSR.V == 0 [No Overflow])",
        "UMLALvc.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UMLALvc.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UMLALhi": "Unsigned Multiply Accumulate Long (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UMLALhi.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UMLALhi.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UMLALls": "Unsigned Multiply Accumulate Long (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UMLALls.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UMLALls.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UMLALge": "Unsigned Multiply Accumulate Long (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UMLALge.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UMLALge.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UMLALlt": "Unsigned Multiply Accumulate Long (If APSR.N != APSR.V [Signed Lesser Than])",
        "UMLALlt.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UMLALlt.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UMLALgt": "Unsigned Multiply Accumulate Long (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UMLALgt.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UMLALgt.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UMLALle": "Unsigned Multiply Accumulate Long (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UMLALle.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UMLALle.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UMLALal": "Unsigned Multiply Accumulate Long (Always)",
        "UMLALal.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (Always)",
        "UMLALal.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (Always)",
        "UMLALs": "Unsigned Multiply Accumulate Long (Update APSR)",
        "UMLALs.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (Update APSR)",
        "UMLALs.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (Update APSR)",
        "UMLALseq": "Unsigned Multiply Accumulate Long (If APSR.Z == 1 [Equal]) (Update APSR)",
        "UMLALseq.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "UMLALseq.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "UMLALsne": "Unsigned Multiply Accumulate Long (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "UMLALsne.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "UMLALsne.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "UMLALscs": "Unsigned Multiply Accumulate Long (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "UMLALscs.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "UMLALscs.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "UMLALscc": "Unsigned Multiply Accumulate Long (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "UMLALscc.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "UMLALscc.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "UMLALsmi": "Unsigned Multiply Accumulate Long (If APSR.N == 1 [Minus]) (Update APSR)",
        "UMLALsmi.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "UMLALsmi.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "UMLALspl": "Unsigned Multiply Accumulate Long (If APSR.N == 0 [Plus]) (Update APSR)",
        "UMLALspl.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "UMLALspl.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "UMLALsvs": "Unsigned Multiply Accumulate Long (If APSR.V == 1 [Overflow]) (Update APSR)",
        "UMLALsvs.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "UMLALsvs.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "UMLALsvc": "Unsigned Multiply Accumulate Long (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "UMLALsvc.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "UMLALsvc.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "UMLALshi": "Unsigned Multiply Accumulate Long (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "UMLALshi.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "UMLALshi.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "UMLALsls": "Unsigned Multiply Accumulate Long (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "UMLALsls.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "UMLALsls.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "UMLALsge": "Unsigned Multiply Accumulate Long (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "UMLALsge.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "UMLALsge.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "UMLALslt": "Unsigned Multiply Accumulate Long (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "UMLALslt.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "UMLALslt.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "UMLALsgt": "Unsigned Multiply Accumulate Long (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "UMLALsgt.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "UMLALsgt.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "UMLALsle": "Unsigned Multiply Accumulate Long (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "UMLALsle.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "UMLALsle.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "UMLALsal": "Unsigned Multiply Accumulate Long (Always) (Update APSR)",
        "UMLALsal.n": "Unsigned Multiply Accumulate Long (T 16bits encoding) (Always) (Update APSR)",
        "UMLALsal.w": "Unsigned Multiply Accumulate Long (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "UMULL%{s}%{c}%{q}": {
      "description": "Unsigned Multiply Long %{q} %{c} %{s}",
      "variants": {
        "UMULL": "Unsigned Multiply Long",
        "UMULL.n": "Unsigned Multiply Long (T 16bits encoding)",
        "UMULL.w": "Unsigned Multiply Long (T/A 32bits encoding)",
        "UMULLeq": "Unsigned Multiply Long (If APSR.Z == 1 [Equal])",
        "UMULLeq.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UMULLeq.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UMULLne": "Unsigned Multiply Long (If APSR.Z == 0 [Not Equal])",
        "UMULLne.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UMULLne.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UMULLcs": "Unsigned Multiply Long (If APSR.C == 1 [Carry Set])",
        "UMULLcs.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UMULLcs.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UMULLcc": "Unsigned Multiply Long (If APSR.C == 0 [Carry Clear])",
        "UMULLcc.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UMULLcc.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UMULLmi": "Unsigned Multiply Long (If APSR.N == 1 [Minus])",
        "UMULLmi.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UMULLmi.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UMULLpl": "Unsigned Multiply Long (If APSR.N == 0 [Plus])",
        "UMULLpl.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UMULLpl.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UMULLvs": "Unsigned Multiply Long (If APSR.V == 1 [Overflow])",
        "UMULLvs.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UMULLvs.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UMULLvc": "Unsigned Multiply Long (If APSR.V == 0 [No Overflow])",
        "UMULLvc.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UMULLvc.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UMULLhi": "Unsigned Multiply Long (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UMULLhi.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UMULLhi.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UMULLls": "Unsigned Multiply Long (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UMULLls.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UMULLls.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UMULLge": "Unsigned Multiply Long (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UMULLge.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UMULLge.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UMULLlt": "Unsigned Multiply Long (If APSR.N != APSR.V [Signed Lesser Than])",
        "UMULLlt.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UMULLlt.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UMULLgt": "Unsigned Multiply Long (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UMULLgt.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UMULLgt.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UMULLle": "Unsigned Multiply Long (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UMULLle.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UMULLle.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UMULLal": "Unsigned Multiply Long (Always)",
        "UMULLal.n": "Unsigned Multiply Long (T 16bits encoding) (Always)",
        "UMULLal.w": "Unsigned Multiply Long (T/A 32bits encoding) (Always)",
        "UMULLs": "Unsigned Multiply Long (Update APSR)",
        "UMULLs.n": "Unsigned Multiply Long (T 16bits encoding) (Update APSR)",
        "UMULLs.w": "Unsigned Multiply Long (T/A 32bits encoding) (Update APSR)",
        "UMULLseq": "Unsigned Multiply Long (If APSR.Z == 1 [Equal]) (Update APSR)",
        "UMULLseq.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "UMULLseq.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.Z == 1 [Equal]) (Update APSR)",
        "UMULLsne": "Unsigned Multiply Long (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "UMULLsne.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "UMULLsne.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal]) (Update APSR)",
        "UMULLscs": "Unsigned Multiply Long (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "UMULLscs.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "UMULLscs.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.C == 1 [Carry Set]) (Update APSR)",
        "UMULLscc": "Unsigned Multiply Long (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "UMULLscc.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "UMULLscc.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear]) (Update APSR)",
        "UMULLsmi": "Unsigned Multiply Long (If APSR.N == 1 [Minus]) (Update APSR)",
        "UMULLsmi.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "UMULLsmi.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N == 1 [Minus]) (Update APSR)",
        "UMULLspl": "Unsigned Multiply Long (If APSR.N == 0 [Plus]) (Update APSR)",
        "UMULLspl.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "UMULLspl.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N == 0 [Plus]) (Update APSR)",
        "UMULLsvs": "Unsigned Multiply Long (If APSR.V == 1 [Overflow]) (Update APSR)",
        "UMULLsvs.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "UMULLsvs.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.V == 1 [Overflow]) (Update APSR)",
        "UMULLsvc": "Unsigned Multiply Long (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "UMULLsvc.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "UMULLsvc.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.V == 0 [No Overflow]) (Update APSR)",
        "UMULLshi": "Unsigned Multiply Long (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "UMULLshi.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "UMULLshi.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher]) (Update APSR)",
        "UMULLsls": "Unsigned Multiply Long (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "UMULLsls.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "UMULLsls.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower]) (Update APSR)",
        "UMULLsge": "Unsigned Multiply Long (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "UMULLsge.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "UMULLsge.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal]) (Update APSR)",
        "UMULLslt": "Unsigned Multiply Long (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "UMULLslt.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "UMULLslt.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than]) (Update APSR)",
        "UMULLsgt": "Unsigned Multiply Long (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "UMULLsgt.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "UMULLsgt.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than]) (Update APSR)",
        "UMULLsle": "Unsigned Multiply Long (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "UMULLsle.n": "Unsigned Multiply Long (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "UMULLsle.w": "Unsigned Multiply Long (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal]) (Update APSR)",
        "UMULLsal": "Unsigned Multiply Long (Always) (Update APSR)",
        "UMULLsal.n": "Unsigned Multiply Long (T 16bits encoding) (Always) (Update APSR)",
        "UMULLsal.w": "Unsigned Multiply Long (T/A 32bits encoding) (Always) (Update APSR)"
      }
    },
    "UQASX%{c}%{q}": {
      "description": "Unsigned Saturating Add and Subtract with Exchange %{q} %{c}",
      "variants": {
        "UQASX": "Unsigned Saturating Add and Subtract with Exchange",
        "UQASX.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding)",
        "UQASX.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding)",
        "UQASXeq": "Unsigned Saturating Add and Subtract with Exchange (If APSR.Z == 1 [Equal])",
        "UQASXeq.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UQASXeq.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UQASXne": "Unsigned Saturating Add and Subtract with Exchange (If APSR.Z == 0 [Not Equal])",
        "UQASXne.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UQASXne.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UQASXcs": "Unsigned Saturating Add and Subtract with Exchange (If APSR.C == 1 [Carry Set])",
        "UQASXcs.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UQASXcs.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UQASXcc": "Unsigned Saturating Add and Subtract with Exchange (If APSR.C == 0 [Carry Clear])",
        "UQASXcc.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UQASXcc.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UQASXmi": "Unsigned Saturating Add and Subtract with Exchange (If APSR.N == 1 [Minus])",
        "UQASXmi.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UQASXmi.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UQASXpl": "Unsigned Saturating Add and Subtract with Exchange (If APSR.N == 0 [Plus])",
        "UQASXpl.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UQASXpl.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UQASXvs": "Unsigned Saturating Add and Subtract with Exchange (If APSR.V == 1 [Overflow])",
        "UQASXvs.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UQASXvs.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UQASXvc": "Unsigned Saturating Add and Subtract with Exchange (If APSR.V == 0 [No Overflow])",
        "UQASXvc.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UQASXvc.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UQASXhi": "Unsigned Saturating Add and Subtract with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UQASXhi.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UQASXhi.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UQASXls": "Unsigned Saturating Add and Subtract with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UQASXls.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UQASXls.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UQASXge": "Unsigned Saturating Add and Subtract with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UQASXge.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UQASXge.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UQASXlt": "Unsigned Saturating Add and Subtract with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "UQASXlt.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UQASXlt.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UQASXgt": "Unsigned Saturating Add and Subtract with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UQASXgt.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UQASXgt.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UQASXle": "Unsigned Saturating Add and Subtract with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UQASXle.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UQASXle.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UQASXal": "Unsigned Saturating Add and Subtract with Exchange (Always)",
        "UQASXal.n": "Unsigned Saturating Add and Subtract with Exchange (T 16bits encoding) (Always)",
        "UQASXal.w": "Unsigned Saturating Add and Subtract with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "UQSAX%{c}%{q}": {
      "description": "Unsigned Saturating Subtract and Add with Exchange %{q} %{c}",
      "variants": {
        "UQSAX": "Unsigned Saturating Subtract and Add with Exchange",
        "UQSAX.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding)",
        "UQSAX.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding)",
        "UQSAXeq": "Unsigned Saturating Subtract and Add with Exchange (If APSR.Z == 1 [Equal])",
        "UQSAXeq.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UQSAXeq.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UQSAXne": "Unsigned Saturating Subtract and Add with Exchange (If APSR.Z == 0 [Not Equal])",
        "UQSAXne.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UQSAXne.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UQSAXcs": "Unsigned Saturating Subtract and Add with Exchange (If APSR.C == 1 [Carry Set])",
        "UQSAXcs.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UQSAXcs.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UQSAXcc": "Unsigned Saturating Subtract and Add with Exchange (If APSR.C == 0 [Carry Clear])",
        "UQSAXcc.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UQSAXcc.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UQSAXmi": "Unsigned Saturating Subtract and Add with Exchange (If APSR.N == 1 [Minus])",
        "UQSAXmi.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UQSAXmi.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UQSAXpl": "Unsigned Saturating Subtract and Add with Exchange (If APSR.N == 0 [Plus])",
        "UQSAXpl.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UQSAXpl.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UQSAXvs": "Unsigned Saturating Subtract and Add with Exchange (If APSR.V == 1 [Overflow])",
        "UQSAXvs.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UQSAXvs.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UQSAXvc": "Unsigned Saturating Subtract and Add with Exchange (If APSR.V == 0 [No Overflow])",
        "UQSAXvc.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UQSAXvc.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UQSAXhi": "Unsigned Saturating Subtract and Add with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UQSAXhi.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UQSAXhi.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UQSAXls": "Unsigned Saturating Subtract and Add with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UQSAXls.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UQSAXls.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UQSAXge": "Unsigned Saturating Subtract and Add with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UQSAXge.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UQSAXge.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UQSAXlt": "Unsigned Saturating Subtract and Add with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "UQSAXlt.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UQSAXlt.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UQSAXgt": "Unsigned Saturating Subtract and Add with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UQSAXgt.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UQSAXgt.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UQSAXle": "Unsigned Saturating Subtract and Add with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UQSAXle.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UQSAXle.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UQSAXal": "Unsigned Saturating Subtract and Add with Exchange (Always)",
        "UQSAXal.n": "Unsigned Saturating Subtract and Add with Exchange (T 16bits encoding) (Always)",
        "UQSAXal.w": "Unsigned Saturating Subtract and Add with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "USAD8%{c}%{q}": {
      "description": "Unsigned Sum of Absolute Differences %{q} %{c}",
      "variants": {
        "USAD8": "Unsigned Sum of Absolute Differences",
        "USAD8.n": "Unsigned Sum of Absolute Differences (T 16bits encoding)",
        "USAD8.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding)",
        "USAD8eq": "Unsigned Sum of Absolute Differences (If APSR.Z == 1 [Equal])",
        "USAD8eq.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "USAD8eq.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "USAD8ne": "Unsigned Sum of Absolute Differences (If APSR.Z == 0 [Not Equal])",
        "USAD8ne.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USAD8ne.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USAD8cs": "Unsigned Sum of Absolute Differences (If APSR.C == 1 [Carry Set])",
        "USAD8cs.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "USAD8cs.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "USAD8cc": "Unsigned Sum of Absolute Differences (If APSR.C == 0 [Carry Clear])",
        "USAD8cc.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USAD8cc.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USAD8mi": "Unsigned Sum of Absolute Differences (If APSR.N == 1 [Minus])",
        "USAD8mi.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "USAD8mi.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "USAD8pl": "Unsigned Sum of Absolute Differences (If APSR.N == 0 [Plus])",
        "USAD8pl.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "USAD8pl.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "USAD8vs": "Unsigned Sum of Absolute Differences (If APSR.V == 1 [Overflow])",
        "USAD8vs.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "USAD8vs.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "USAD8vc": "Unsigned Sum of Absolute Differences (If APSR.V == 0 [No Overflow])",
        "USAD8vc.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "USAD8vc.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "USAD8hi": "Unsigned Sum of Absolute Differences (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USAD8hi.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USAD8hi.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USAD8ls": "Unsigned Sum of Absolute Differences (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USAD8ls.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USAD8ls.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USAD8ge": "Unsigned Sum of Absolute Differences (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USAD8ge.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USAD8ge.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USAD8lt": "Unsigned Sum of Absolute Differences (If APSR.N != APSR.V [Signed Lesser Than])",
        "USAD8lt.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USAD8lt.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USAD8gt": "Unsigned Sum of Absolute Differences (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USAD8gt.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USAD8gt.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USAD8le": "Unsigned Sum of Absolute Differences (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USAD8le.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USAD8le.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USAD8al": "Unsigned Sum of Absolute Differences (Always)",
        "USAD8al.n": "Unsigned Sum of Absolute Differences (T 16bits encoding) (Always)",
        "USAD8al.w": "Unsigned Sum of Absolute Differences (T/A 32bits encoding) (Always)"
      }
    },
    "USADA8%{c}%{q}": {
      "description": "Unsigned Sum of Absolute Differences and Accumulate %{q} %{c}",
      "variants": {
        "USADA8": "Unsigned Sum of Absolute Differences and Accumulate",
        "USADA8.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding)",
        "USADA8.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding)",
        "USADA8eq": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.Z == 1 [Equal])",
        "USADA8eq.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "USADA8eq.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "USADA8ne": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.Z == 0 [Not Equal])",
        "USADA8ne.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USADA8ne.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USADA8cs": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.C == 1 [Carry Set])",
        "USADA8cs.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "USADA8cs.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "USADA8cc": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.C == 0 [Carry Clear])",
        "USADA8cc.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USADA8cc.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USADA8mi": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.N == 1 [Minus])",
        "USADA8mi.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "USADA8mi.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "USADA8pl": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.N == 0 [Plus])",
        "USADA8pl.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "USADA8pl.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "USADA8vs": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.V == 1 [Overflow])",
        "USADA8vs.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "USADA8vs.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "USADA8vc": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.V == 0 [No Overflow])",
        "USADA8vc.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "USADA8vc.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "USADA8hi": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USADA8hi.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USADA8hi.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USADA8ls": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USADA8ls.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USADA8ls.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USADA8ge": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USADA8ge.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USADA8ge.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USADA8lt": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.N != APSR.V [Signed Lesser Than])",
        "USADA8lt.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USADA8lt.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USADA8gt": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USADA8gt.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USADA8gt.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USADA8le": "Unsigned Sum of Absolute Differences and Accumulate (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USADA8le.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USADA8le.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USADA8al": "Unsigned Sum of Absolute Differences and Accumulate (Always)",
        "USADA8al.n": "Unsigned Sum of Absolute Differences and Accumulate (T 16bits encoding) (Always)",
        "USADA8al.w": "Unsigned Sum of Absolute Differences and Accumulate (T/A 32bits encoding) (Always)"
      }
    },
    "USAT%{c}%{q}": {
      "description": "Unsigned Saturate %{q} %{c}",
      "variants": {
        "USAT": "Unsigned Saturate",
        "USAT.n": "Unsigned Saturate (T 16bits encoding)",
        "USAT.w": "Unsigned Saturate (T/A 32bits encoding)",
        "USATeq": "Unsigned Saturate (If APSR.Z == 1 [Equal])",
        "USATeq.n": "Unsigned Saturate (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "USATeq.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "USATne": "Unsigned Saturate (If APSR.Z == 0 [Not Equal])",
        "USATne.n": "Unsigned Saturate (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USATne.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USATcs": "Unsigned Saturate (If APSR.C == 1 [Carry Set])",
        "USATcs.n": "Unsigned Saturate (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "USATcs.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "USATcc": "Unsigned Saturate (If APSR.C == 0 [Carry Clear])",
        "USATcc.n": "Unsigned Saturate (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USATcc.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USATmi": "Unsigned Saturate (If APSR.N == 1 [Minus])",
        "USATmi.n": "Unsigned Saturate (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "USATmi.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "USATpl": "Unsigned Saturate (If APSR.N == 0 [Plus])",
        "USATpl.n": "Unsigned Saturate (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "USATpl.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "USATvs": "Unsigned Saturate (If APSR.V == 1 [Overflow])",
        "USATvs.n": "Unsigned Saturate (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "USATvs.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "USATvc": "Unsigned Saturate (If APSR.V == 0 [No Overflow])",
        "USATvc.n": "Unsigned Saturate (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "USATvc.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "USAThi": "Unsigned Saturate (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USAThi.n": "Unsigned Saturate (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USAThi.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USATls": "Unsigned Saturate (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USATls.n": "Unsigned Saturate (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USATls.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USATge": "Unsigned Saturate (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USATge.n": "Unsigned Saturate (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USATge.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USATlt": "Unsigned Saturate (If APSR.N != APSR.V [Signed Lesser Than])",
        "USATlt.n": "Unsigned Saturate (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USATlt.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USATgt": "Unsigned Saturate (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USATgt.n": "Unsigned Saturate (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USATgt.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USATle": "Unsigned Saturate (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USATle.n": "Unsigned Saturate (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USATle.w": "Unsigned Saturate (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USATal": "Unsigned Saturate (Always)",
        "USATal.n": "Unsigned Saturate (T 16bits encoding) (Always)",
        "USATal.w": "Unsigned Saturate (T/A 32bits encoding) (Always)"
      }
    },
    "USAT16%{c}%{q}": {
      "description": "Unsigned Saturate 16 %{q} %{c}",
      "variants": {
        "USAT16": "Unsigned Saturate 16",
        "USAT16.n": "Unsigned Saturate 16 (T 16bits encoding)",
        "USAT16.w": "Unsigned Saturate 16 (T/A 32bits encoding)",
        "USAT16eq": "Unsigned Saturate 16 (If APSR.Z == 1 [Equal])",
        "USAT16eq.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "USAT16eq.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "USAT16ne": "Unsigned Saturate 16 (If APSR.Z == 0 [Not Equal])",
        "USAT16ne.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USAT16ne.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USAT16cs": "Unsigned Saturate 16 (If APSR.C == 1 [Carry Set])",
        "USAT16cs.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "USAT16cs.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "USAT16cc": "Unsigned Saturate 16 (If APSR.C == 0 [Carry Clear])",
        "USAT16cc.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USAT16cc.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USAT16mi": "Unsigned Saturate 16 (If APSR.N == 1 [Minus])",
        "USAT16mi.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "USAT16mi.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "USAT16pl": "Unsigned Saturate 16 (If APSR.N == 0 [Plus])",
        "USAT16pl.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "USAT16pl.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "USAT16vs": "Unsigned Saturate 16 (If APSR.V == 1 [Overflow])",
        "USAT16vs.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "USAT16vs.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "USAT16vc": "Unsigned Saturate 16 (If APSR.V == 0 [No Overflow])",
        "USAT16vc.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "USAT16vc.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "USAT16hi": "Unsigned Saturate 16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USAT16hi.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USAT16hi.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USAT16ls": "Unsigned Saturate 16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USAT16ls.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USAT16ls.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USAT16ge": "Unsigned Saturate 16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USAT16ge.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USAT16ge.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USAT16lt": "Unsigned Saturate 16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "USAT16lt.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USAT16lt.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USAT16gt": "Unsigned Saturate 16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USAT16gt.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USAT16gt.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USAT16le": "Unsigned Saturate 16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USAT16le.n": "Unsigned Saturate 16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USAT16le.w": "Unsigned Saturate 16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USAT16al": "Unsigned Saturate 16 (Always)",
        "USAT16al.n": "Unsigned Saturate 16 (T 16bits encoding) (Always)",
        "USAT16al.w": "Unsigned Saturate 16 (T/A 32bits encoding) (Always)"
      }
    },
    "USAX%{c}%{q}": {
      "description": "Unsigned Subtract and Add with Exchange %{q} %{c}",
      "variants": {
        "USAX": "Unsigned Subtract and Add with Exchange",
        "USAX.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding)",
        "USAX.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding)",
        "USAXeq": "Unsigned Subtract and Add with Exchange (If APSR.Z == 1 [Equal])",
        "USAXeq.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "USAXeq.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "USAXne": "Unsigned Subtract and Add with Exchange (If APSR.Z == 0 [Not Equal])",
        "USAXne.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USAXne.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USAXcs": "Unsigned Subtract and Add with Exchange (If APSR.C == 1 [Carry Set])",
        "USAXcs.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "USAXcs.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "USAXcc": "Unsigned Subtract and Add with Exchange (If APSR.C == 0 [Carry Clear])",
        "USAXcc.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USAXcc.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USAXmi": "Unsigned Subtract and Add with Exchange (If APSR.N == 1 [Minus])",
        "USAXmi.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "USAXmi.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "USAXpl": "Unsigned Subtract and Add with Exchange (If APSR.N == 0 [Plus])",
        "USAXpl.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "USAXpl.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "USAXvs": "Unsigned Subtract and Add with Exchange (If APSR.V == 1 [Overflow])",
        "USAXvs.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "USAXvs.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "USAXvc": "Unsigned Subtract and Add with Exchange (If APSR.V == 0 [No Overflow])",
        "USAXvc.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "USAXvc.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "USAXhi": "Unsigned Subtract and Add with Exchange (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USAXhi.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USAXhi.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USAXls": "Unsigned Subtract and Add with Exchange (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USAXls.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USAXls.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USAXge": "Unsigned Subtract and Add with Exchange (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USAXge.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USAXge.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USAXlt": "Unsigned Subtract and Add with Exchange (If APSR.N != APSR.V [Signed Lesser Than])",
        "USAXlt.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USAXlt.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USAXgt": "Unsigned Subtract and Add with Exchange (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USAXgt.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USAXgt.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USAXle": "Unsigned Subtract and Add with Exchange (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USAXle.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USAXle.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USAXal": "Unsigned Subtract and Add with Exchange (Always)",
        "USAXal.n": "Unsigned Subtract and Add with Exchange (T 16bits encoding) (Always)",
        "USAXal.w": "Unsigned Subtract and Add with Exchange (T/A 32bits encoding) (Always)"
      }
    },
    "USUB16%{c}%{q}": {
      "description": "Unsigned Subtract 16 %{q} %{c}",
      "variants": {
        "USUB16": "Unsigned Subtract 16",
        "USUB16.n": "Unsigned Subtract 16 (T 16bits encoding)",
        "USUB16.w": "Unsigned Subtract 16 (T/A 32bits encoding)",
        "USUB16eq": "Unsigned Subtract 16 (If APSR.Z == 1 [Equal])",
        "USUB16eq.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "USUB16eq.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "USUB16ne": "Unsigned Subtract 16 (If APSR.Z == 0 [Not Equal])",
        "USUB16ne.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USUB16ne.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USUB16cs": "Unsigned Subtract 16 (If APSR.C == 1 [Carry Set])",
        "USUB16cs.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "USUB16cs.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "USUB16cc": "Unsigned Subtract 16 (If APSR.C == 0 [Carry Clear])",
        "USUB16cc.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USUB16cc.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USUB16mi": "Unsigned Subtract 16 (If APSR.N == 1 [Minus])",
        "USUB16mi.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "USUB16mi.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "USUB16pl": "Unsigned Subtract 16 (If APSR.N == 0 [Plus])",
        "USUB16pl.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "USUB16pl.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "USUB16vs": "Unsigned Subtract 16 (If APSR.V == 1 [Overflow])",
        "USUB16vs.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "USUB16vs.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "USUB16vc": "Unsigned Subtract 16 (If APSR.V == 0 [No Overflow])",
        "USUB16vc.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "USUB16vc.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "USUB16hi": "Unsigned Subtract 16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USUB16hi.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USUB16hi.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USUB16ls": "Unsigned Subtract 16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USUB16ls.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USUB16ls.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USUB16ge": "Unsigned Subtract 16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USUB16ge.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USUB16ge.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USUB16lt": "Unsigned Subtract 16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "USUB16lt.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USUB16lt.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USUB16gt": "Unsigned Subtract 16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USUB16gt.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USUB16gt.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USUB16le": "Unsigned Subtract 16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USUB16le.n": "Unsigned Subtract 16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USUB16le.w": "Unsigned Subtract 16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USUB16al": "Unsigned Subtract 16 (Always)",
        "USUB16al.n": "Unsigned Subtract 16 (T 16bits encoding) (Always)",
        "USUB16al.w": "Unsigned Subtract 16 (T/A 32bits encoding) (Always)"
      }
    },
    "USUB8%{c}%{q}": {
      "description": "Unsigned Subtract 8 %{q} %{c}",
      "variants": {
        "USUB8": "Unsigned Subtract 8",
        "USUB8.n": "Unsigned Subtract 8 (T 16bits encoding)",
        "USUB8.w": "Unsigned Subtract 8 (T/A 32bits encoding)",
        "USUB8eq": "Unsigned Subtract 8 (If APSR.Z == 1 [Equal])",
        "USUB8eq.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "USUB8eq.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "USUB8ne": "Unsigned Subtract 8 (If APSR.Z == 0 [Not Equal])",
        "USUB8ne.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USUB8ne.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "USUB8cs": "Unsigned Subtract 8 (If APSR.C == 1 [Carry Set])",
        "USUB8cs.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "USUB8cs.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "USUB8cc": "Unsigned Subtract 8 (If APSR.C == 0 [Carry Clear])",
        "USUB8cc.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USUB8cc.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "USUB8mi": "Unsigned Subtract 8 (If APSR.N == 1 [Minus])",
        "USUB8mi.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "USUB8mi.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "USUB8pl": "Unsigned Subtract 8 (If APSR.N == 0 [Plus])",
        "USUB8pl.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "USUB8pl.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "USUB8vs": "Unsigned Subtract 8 (If APSR.V == 1 [Overflow])",
        "USUB8vs.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "USUB8vs.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "USUB8vc": "Unsigned Subtract 8 (If APSR.V == 0 [No Overflow])",
        "USUB8vc.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "USUB8vc.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "USUB8hi": "Unsigned Subtract 8 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USUB8hi.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USUB8hi.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "USUB8ls": "Unsigned Subtract 8 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USUB8ls.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USUB8ls.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "USUB8ge": "Unsigned Subtract 8 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USUB8ge.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USUB8ge.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "USUB8lt": "Unsigned Subtract 8 (If APSR.N != APSR.V [Signed Lesser Than])",
        "USUB8lt.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USUB8lt.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "USUB8gt": "Unsigned Subtract 8 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USUB8gt.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USUB8gt.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "USUB8le": "Unsigned Subtract 8 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USUB8le.n": "Unsigned Subtract 8 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USUB8le.w": "Unsigned Subtract 8 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "USUB8al": "Unsigned Subtract 8 (Always)",
        "USUB8al.n": "Unsigned Subtract 8 (T 16bits encoding) (Always)",
        "USUB8al.w": "Unsigned Subtract 8 (T/A 32bits encoding) (Always)"
      }
    },
    "UXTAB%{c}%{q}": {
      "description": "Unsigned Extend and Add Byte %{q} %{c}",
      "variants": {
        "UXTAB": "Unsigned Extend and Add Byte",
        "UXTAB.n": "Unsigned Extend and Add Byte (T 16bits encoding)",
        "UXTAB.w": "Unsigned Extend and Add Byte (T/A 32bits encoding)",
        "UXTABeq": "Unsigned Extend and Add Byte (If APSR.Z == 1 [Equal])",
        "UXTABeq.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTABeq.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTABne": "Unsigned Extend and Add Byte (If APSR.Z == 0 [Not Equal])",
        "UXTABne.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTABne.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTABcs": "Unsigned Extend and Add Byte (If APSR.C == 1 [Carry Set])",
        "UXTABcs.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTABcs.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTABcc": "Unsigned Extend and Add Byte (If APSR.C == 0 [Carry Clear])",
        "UXTABcc.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTABcc.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTABmi": "Unsigned Extend and Add Byte (If APSR.N == 1 [Minus])",
        "UXTABmi.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UXTABmi.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UXTABpl": "Unsigned Extend and Add Byte (If APSR.N == 0 [Plus])",
        "UXTABpl.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UXTABpl.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UXTABvs": "Unsigned Extend and Add Byte (If APSR.V == 1 [Overflow])",
        "UXTABvs.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTABvs.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTABvc": "Unsigned Extend and Add Byte (If APSR.V == 0 [No Overflow])",
        "UXTABvc.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTABvc.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTABhi": "Unsigned Extend and Add Byte (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTABhi.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTABhi.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTABls": "Unsigned Extend and Add Byte (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTABls.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTABls.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTABge": "Unsigned Extend and Add Byte (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTABge.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTABge.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTABlt": "Unsigned Extend and Add Byte (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTABlt.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTABlt.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTABgt": "Unsigned Extend and Add Byte (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTABgt.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTABgt.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTABle": "Unsigned Extend and Add Byte (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTABle.n": "Unsigned Extend and Add Byte (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTABle.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTABal": "Unsigned Extend and Add Byte (Always)",
        "UXTABal.n": "Unsigned Extend and Add Byte (T 16bits encoding) (Always)",
        "UXTABal.w": "Unsigned Extend and Add Byte (T/A 32bits encoding) (Always)"
      }
    },
    "UXTAB16%{c}%{q}": {
      "description": "Unsigned Extend and Add Byte 16 %{q} %{c}",
      "variants": {
        "UXTAB16": "Unsigned Extend and Add Byte 16",
        "UXTAB16.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding)",
        "UXTAB16.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding)",
        "UXTAB16eq": "Unsigned Extend and Add Byte 16 (If APSR.Z == 1 [Equal])",
        "UXTAB16eq.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTAB16eq.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTAB16ne": "Unsigned Extend and Add Byte 16 (If APSR.Z == 0 [Not Equal])",
        "UXTAB16ne.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTAB16ne.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTAB16cs": "Unsigned Extend and Add Byte 16 (If APSR.C == 1 [Carry Set])",
        "UXTAB16cs.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTAB16cs.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTAB16cc": "Unsigned Extend and Add Byte 16 (If APSR.C == 0 [Carry Clear])",
        "UXTAB16cc.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTAB16cc.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTAB16mi": "Unsigned Extend and Add Byte 16 (If APSR.N == 1 [Minus])",
        "UXTAB16mi.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UXTAB16mi.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UXTAB16pl": "Unsigned Extend and Add Byte 16 (If APSR.N == 0 [Plus])",
        "UXTAB16pl.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UXTAB16pl.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UXTAB16vs": "Unsigned Extend and Add Byte 16 (If APSR.V == 1 [Overflow])",
        "UXTAB16vs.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTAB16vs.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTAB16vc": "Unsigned Extend and Add Byte 16 (If APSR.V == 0 [No Overflow])",
        "UXTAB16vc.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTAB16vc.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTAB16hi": "Unsigned Extend and Add Byte 16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTAB16hi.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTAB16hi.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTAB16ls": "Unsigned Extend and Add Byte 16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTAB16ls.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTAB16ls.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTAB16ge": "Unsigned Extend and Add Byte 16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTAB16ge.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTAB16ge.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTAB16lt": "Unsigned Extend and Add Byte 16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTAB16lt.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTAB16lt.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTAB16gt": "Unsigned Extend and Add Byte 16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTAB16gt.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTAB16gt.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTAB16le": "Unsigned Extend and Add Byte 16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTAB16le.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTAB16le.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTAB16al": "Unsigned Extend and Add Byte 16 (Always)",
        "UXTAB16al.n": "Unsigned Extend and Add Byte 16 (T 16bits encoding) (Always)",
        "UXTAB16al.w": "Unsigned Extend and Add Byte 16 (T/A 32bits encoding) (Always)"
      }
    },
    "UXTAH%{c}%{q}": {
      "description": "Unsigned Extend and Add Halfword %{q} %{c}",
      "variants": {
        "UXTAH": "Unsigned Extend and Add Halfword",
        "UXTAH.n": "Unsigned Extend and Add Halfword (T 16bits encoding)",
        "UXTAH.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding)",
        "UXTAHeq": "Unsigned Extend and Add Halfword (If APSR.Z == 1 [Equal])",
        "UXTAHeq.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTAHeq.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTAHne": "Unsigned Extend and Add Halfword (If APSR.Z == 0 [Not Equal])",
        "UXTAHne.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTAHne.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTAHcs": "Unsigned Extend and Add Halfword (If APSR.C == 1 [Carry Set])",
        "UXTAHcs.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTAHcs.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTAHcc": "Unsigned Extend and Add Halfword (If APSR.C == 0 [Carry Clear])",
        "UXTAHcc.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTAHcc.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTAHmi": "Unsigned Extend and Add Halfword (If APSR.N == 1 [Minus])",
        "UXTAHmi.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UXTAHmi.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UXTAHpl": "Unsigned Extend and Add Halfword (If APSR.N == 0 [Plus])",
        "UXTAHpl.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UXTAHpl.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UXTAHvs": "Unsigned Extend and Add Halfword (If APSR.V == 1 [Overflow])",
        "UXTAHvs.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTAHvs.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTAHvc": "Unsigned Extend and Add Halfword (If APSR.V == 0 [No Overflow])",
        "UXTAHvc.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTAHvc.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTAHhi": "Unsigned Extend and Add Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTAHhi.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTAHhi.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTAHls": "Unsigned Extend and Add Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTAHls.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTAHls.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTAHge": "Unsigned Extend and Add Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTAHge.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTAHge.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTAHlt": "Unsigned Extend and Add Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTAHlt.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTAHlt.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTAHgt": "Unsigned Extend and Add Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTAHgt.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTAHgt.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTAHle": "Unsigned Extend and Add Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTAHle.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTAHle.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTAHal": "Unsigned Extend and Add Halfword (Always)",
        "UXTAHal.n": "Unsigned Extend and Add Halfword (T 16bits encoding) (Always)",
        "UXTAHal.w": "Unsigned Extend and Add Halfword (T/A 32bits encoding) (Always)"
      }
    },
    "UXTB%{c}%{q}": {
      "description": "Unsigned Extend Byte %{q} %{c}",
      "variants": {
        "UXTB": "Unsigned Extend Byte",
        "UXTB.n": "Unsigned Extend Byte (T 16bits encoding)",
        "UXTB.w": "Unsigned Extend Byte (T/A 32bits encoding)",
        "UXTBeq": "Unsigned Extend Byte (If APSR.Z == 1 [Equal])",
        "UXTBeq.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTBeq.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTBne": "Unsigned Extend Byte (If APSR.Z == 0 [Not Equal])",
        "UXTBne.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTBne.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTBcs": "Unsigned Extend Byte (If APSR.C == 1 [Carry Set])",
        "UXTBcs.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTBcs.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTBcc": "Unsigned Extend Byte (If APSR.C == 0 [Carry Clear])",
        "UXTBcc.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTBcc.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTBmi": "Unsigned Extend Byte (If APSR.N == 1 [Minus])",
        "UXTBmi.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UXTBmi.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UXTBpl": "Unsigned Extend Byte (If APSR.N == 0 [Plus])",
        "UXTBpl.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UXTBpl.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UXTBvs": "Unsigned Extend Byte (If APSR.V == 1 [Overflow])",
        "UXTBvs.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTBvs.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTBvc": "Unsigned Extend Byte (If APSR.V == 0 [No Overflow])",
        "UXTBvc.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTBvc.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTBhi": "Unsigned Extend Byte (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTBhi.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTBhi.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTBls": "Unsigned Extend Byte (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTBls.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTBls.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTBge": "Unsigned Extend Byte (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTBge.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTBge.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTBlt": "Unsigned Extend Byte (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTBlt.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTBlt.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTBgt": "Unsigned Extend Byte (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTBgt.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTBgt.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTBle": "Unsigned Extend Byte (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTBle.n": "Unsigned Extend Byte (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTBle.w": "Unsigned Extend Byte (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTBal": "Unsigned Extend Byte (Always)",
        "UXTBal.n": "Unsigned Extend Byte (T 16bits encoding) (Always)",
        "UXTBal.w": "Unsigned Extend Byte (T/A 32bits encoding) (Always)"
      }
    },
    "UXTB16%{c}%{q}": {
      "description": "Unsigned Extend Byte 16 %{q} %{c}",
      "variants": {
        "UXTB16": "Unsigned Extend Byte 16",
        "UXTB16.n": "Unsigned Extend Byte 16 (T 16bits encoding)",
        "UXTB16.w": "Unsigned Extend Byte 16 (T/A 32bits encoding)",
        "UXTB16eq": "Unsigned Extend Byte 16 (If APSR.Z == 1 [Equal])",
        "UXTB16eq.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTB16eq.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTB16ne": "Unsigned Extend Byte 16 (If APSR.Z == 0 [Not Equal])",
        "UXTB16ne.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTB16ne.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTB16cs": "Unsigned Extend Byte 16 (If APSR.C == 1 [Carry Set])",
        "UXTB16cs.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTB16cs.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTB16cc": "Unsigned Extend Byte 16 (If APSR.C == 0 [Carry Clear])",
        "UXTB16cc.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTB16cc.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTB16mi": "Unsigned Extend Byte 16 (If APSR.N == 1 [Minus])",
        "UXTB16mi.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UXTB16mi.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UXTB16pl": "Unsigned Extend Byte 16 (If APSR.N == 0 [Plus])",
        "UXTB16pl.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UXTB16pl.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UXTB16vs": "Unsigned Extend Byte 16 (If APSR.V == 1 [Overflow])",
        "UXTB16vs.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTB16vs.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTB16vc": "Unsigned Extend Byte 16 (If APSR.V == 0 [No Overflow])",
        "UXTB16vc.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTB16vc.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTB16hi": "Unsigned Extend Byte 16 (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTB16hi.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTB16hi.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTB16ls": "Unsigned Extend Byte 16 (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTB16ls.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTB16ls.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTB16ge": "Unsigned Extend Byte 16 (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTB16ge.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTB16ge.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTB16lt": "Unsigned Extend Byte 16 (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTB16lt.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTB16lt.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTB16gt": "Unsigned Extend Byte 16 (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTB16gt.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTB16gt.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTB16le": "Unsigned Extend Byte 16 (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTB16le.n": "Unsigned Extend Byte 16 (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTB16le.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTB16al": "Unsigned Extend Byte 16 (Always)",
        "UXTB16al.n": "Unsigned Extend Byte 16 (T 16bits encoding) (Always)",
        "UXTB16al.w": "Unsigned Extend Byte 16 (T/A 32bits encoding) (Always)"
      }
    },
    "UXTH%{c}%{q}": {
      "description": "Unsigned Extend Halfword %{q} %{c}",
      "variants": {
        "UXTH": "Unsigned Extend Halfword",
        "UXTH.n": "Unsigned Extend Halfword (T 16bits encoding)",
        "UXTH.w": "Unsigned Extend Halfword (T/A 32bits encoding)",
        "UXTHeq": "Unsigned Extend Halfword (If APSR.Z == 1 [Equal])",
        "UXTHeq.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTHeq.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "UXTHne": "Unsigned Extend Halfword (If APSR.Z == 0 [Not Equal])",
        "UXTHne.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTHne.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "UXTHcs": "Unsigned Extend Halfword (If APSR.C == 1 [Carry Set])",
        "UXTHcs.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTHcs.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "UXTHcc": "Unsigned Extend Halfword (If APSR.C == 0 [Carry Clear])",
        "UXTHcc.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTHcc.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "UXTHmi": "Unsigned Extend Halfword (If APSR.N == 1 [Minus])",
        "UXTHmi.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "UXTHmi.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "UXTHpl": "Unsigned Extend Halfword (If APSR.N == 0 [Plus])",
        "UXTHpl.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "UXTHpl.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "UXTHvs": "Unsigned Extend Halfword (If APSR.V == 1 [Overflow])",
        "UXTHvs.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTHvs.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "UXTHvc": "Unsigned Extend Halfword (If APSR.V == 0 [No Overflow])",
        "UXTHvc.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTHvc.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "UXTHhi": "Unsigned Extend Halfword (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTHhi.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTHhi.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "UXTHls": "Unsigned Extend Halfword (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTHls.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTHls.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "UXTHge": "Unsigned Extend Halfword (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTHge.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTHge.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "UXTHlt": "Unsigned Extend Halfword (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTHlt.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTHlt.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "UXTHgt": "Unsigned Extend Halfword (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTHgt.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTHgt.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "UXTHle": "Unsigned Extend Halfword (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTHle.n": "Unsigned Extend Halfword (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTHle.w": "Unsigned Extend Halfword (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "UXTHal": "Unsigned Extend Halfword (Always)",
        "UXTHal.n": "Unsigned Extend Halfword (T 16bits encoding) (Always)",
        "UXTHal.w": "Unsigned Extend Halfword (T/A 32bits encoding) (Always)"
      }
    },
    "VABA%{l}%{c}%{q}%{dt}": {
      "description": "Vector Absolute Difference and Accumulate %{dt} %{q} %{c}",
      "variants": {
        "VABA.s8": "Vector Absolute Difference and Accumulate (8 bits Signed Integer components)",
        "VABA.s16": "Vector Absolute Difference and Accumulate (16 bits Signed Integer components)",
        "VABA.s32": "Vector Absolute Difference and Accumulate (32 bits Signed Integer components)",
        "VABA.u8": "Vector Absolute Difference and Accumulate (8 bits Unsigned Integer components)",
        "VABA.u16": "Vector Absolute Difference and Accumulate (16 bits Unsigned Integer components)",
        "VABA.u32": "Vector Absolute Difference and Accumulate (32 bits Unsigned Integer components)",
        "VABA.w.s8": "Vector Absolute Difference and Accumulate (8 bits Signed Integer components)",
        "VABA.w.s16": "Vector Absolute Difference and Accumulate (16 bits Signed Integer components)",
        "VABA.w.s32": "Vector Absolute Difference and Accumulate (32 bits Signed Integer components)",
        "VABA.w.u8": "Vector Absolute Difference and Accumulate (8 bits Unsigned Integer components)",
        "VABA.w.u16": "Vector Absolute Difference and Accumulate (16 bits Unsigned Integer components)",
        "VABA.w.u32": "Vector Absolute Difference and Accumulate (32 bits Unsigned Integer components)",
        "VABAal.s8": "Vector Absolute Difference and Accumulate (8 bits Signed Integer components) (Always)",
        "VABAal.s16": "Vector Absolute Difference and Accumulate (16 bits Signed Integer components) (Always)",
        "VABAal.s32": "Vector Absolute Difference and Accumulate (32 bits Signed Integer components) (Always)",
        "VABAal.u8": "Vector Absolute Difference and Accumulate (8 bits Unsigned Integer components) (Always)",
        "VABAal.u16": "Vector Absolute Difference and Accumulate (16 bits Unsigned Integer components) (Always)",
        "VABAal.u32": "Vector Absolute Difference and Accumulate (32 bits Unsigned Integer components) (Always)",
        "VABAal.w.s8": "Vector Absolute Difference and Accumulate (8 bits Signed Integer components) (Always)",
        "VABAal.w.s16": "Vector Absolute Difference and Accumulate (16 bits Signed Integer components) (Always)",
        "VABAal.w.s32": "Vector Absolute Difference and Accumulate (32 bits Signed Integer components) (Always)",
        "VABAal.w.u8": "Vector Absolute Difference and Accumulate (8 bits Unsigned Integer components) (Always)",
        "VABAal.w.u16": "Vector Absolute Difference and Accumulate (16 bits Unsigned Integer components) (Always)",
        "VABAal.w.u32": "Vector Absolute Difference and Accumulate (32 bits Unsigned Integer components) (Always)",
        "VABAl.s8": "Vector Absolute Difference and Accumulate (8 bits Signed Integer components)",
        "VABAl.s16": "Vector Absolute Difference and Accumulate (16 bits Signed Integer components)",
        "VABAl.s32": "Vector Absolute Difference and Accumulate (32 bits Signed Integer components)",
        "VABAl.u8": "Vector Absolute Difference and Accumulate (8 bits Unsigned Integer components)",
        "VABAl.u16": "Vector Absolute Difference and Accumulate (16 bits Unsigned Integer components)",
        "VABAl.u32": "Vector Absolute Difference and Accumulate (32 bits Unsigned Integer components)",
        "VABAl.w.s8": "Vector Absolute Difference and Accumulate (8 bits Signed Integer components)",
        "VABAl.w.s16": "Vector Absolute Difference and Accumulate (16 bits Signed Integer components)",
        "VABAl.w.s32": "Vector Absolute Difference and Accumulate (32 bits Signed Integer components)",
        "VABAl.w.u8": "Vector Absolute Difference and Accumulate (8 bits Unsigned Integer components)",
        "VABAl.w.u16": "Vector Absolute Difference and Accumulate (16 bits Unsigned Integer components)",
        "VABAl.w.u32": "Vector Absolute Difference and Accumulate (32 bits Unsigned Integer components)",
        "VABAlal.s8": "Vector Absolute Difference and Accumulate (8 bits Signed Integer components) (Always)",
        "VABAlal.s16": "Vector Absolute Difference and Accumulate (16 bits Signed Integer components) (Always)",
        "VABAlal.s32": "Vector Absolute Difference and Accumulate (32 bits Signed Integer components) (Always)",
        "VABAlal.u8": "Vector Absolute Difference and Accumulate (8 bits Unsigned Integer components) (Always)",
        "VABAlal.u16": "Vector Absolute Difference and Accumulate (16 bits Unsigned Integer components) (Always)",
        "VABAlal.u32": "Vector Absolute Difference and Accumulate (32 bits Unsigned Integer components) (Always)",
        "VABAlal.w.s8": "Vector Absolute Difference and Accumulate (8 bits Signed Integer components) (Always)",
        "VABAlal.w.s16": "Vector Absolute Difference and Accumulate (16 bits Signed Integer components) (Always)",
        "VABAlal.w.s32": "Vector Absolute Difference and Accumulate (32 bits Signed Integer components) (Always)",
        "VABAlal.w.u8": "Vector Absolute Difference and Accumulate (8 bits Unsigned Integer components) (Always)",
        "VABAlal.w.u16": "Vector Absolute Difference and Accumulate (16 bits Unsigned Integer components) (Always)",
        "VABAlal.w.u32": "Vector Absolute Difference and Accumulate (32 bits Unsigned Integer components) (Always)"
      }
    },
    "VABD%{l}%{c}%{q}%{dt}": {
      "description": "Vector Absolute Difference %{dt} %{q} %{c}",
      "variants": {
        "VABD.s8": "Vector Absolute Difference (8 bits Signed Integer components)",
        "VABD.s16": "Vector Absolute Difference (16 bits Signed Integer components)",
        "VABD.s32": "Vector Absolute Difference (32 bits Signed Integer components)",
        "VABD.u8": "Vector Absolute Difference (8 bits Unsigned Integer components)",
        "VABD.u16": "Vector Absolute Difference (16 bits Unsigned Integer components)",
        "VABD.u32": "Vector Absolute Difference (32 bits Unsigned Integer components)",
        "VABD.f32": "Vector Absolute Difference (32 bits Float components)",
        "VABD.w.s8": "Vector Absolute Difference (8 bits Signed Integer components)",
        "VABD.w.s16": "Vector Absolute Difference (16 bits Signed Integer components)",
        "VABD.w.s32": "Vector Absolute Difference (32 bits Signed Integer components)",
        "VABD.w.u8": "Vector Absolute Difference (8 bits Unsigned Integer components)",
        "VABD.w.u16": "Vector Absolute Difference (16 bits Unsigned Integer components)",
        "VABD.w.u32": "Vector Absolute Difference (32 bits Unsigned Integer components)",
        "VABD.w.f32": "Vector Absolute Difference (32 bits Float components)",
        "VABDal.s8": "Vector Absolute Difference (8 bits Signed Integer components) (Always)",
        "VABDal.s16": "Vector Absolute Difference (16 bits Signed Integer components) (Always)",
        "VABDal.s32": "Vector Absolute Difference (32 bits Signed Integer components) (Always)",
        "VABDal.u8": "Vector Absolute Difference (8 bits Unsigned Integer components) (Always)",
        "VABDal.u16": "Vector Absolute Difference (16 bits Unsigned Integer components) (Always)",
        "VABDal.u32": "Vector Absolute Difference (32 bits Unsigned Integer components) (Always)",
        "VABDal.f32": "Vector Absolute Difference (32 bits Float components) (Always)",
        "VABDal.w.s8": "Vector Absolute Difference (8 bits Signed Integer components) (Always)",
        "VABDal.w.s16": "Vector Absolute Difference (16 bits Signed Integer components) (Always)",
        "VABDal.w.s32": "Vector Absolute Difference (32 bits Signed Integer components) (Always)",
        "VABDal.w.u8": "Vector Absolute Difference (8 bits Unsigned Integer components) (Always)",
        "VABDal.w.u16": "Vector Absolute Difference (16 bits Unsigned Integer components) (Always)",
        "VABDal.w.u32": "Vector Absolute Difference (32 bits Unsigned Integer components) (Always)",
        "VABDal.w.f32": "Vector Absolute Difference (32 bits Float components) (Always)",
        "VABDl.s8": "Vector Absolute Difference (8 bits Signed Integer components)",
        "VABDl.s16": "Vector Absolute Difference (16 bits Signed Integer components)",
        "VABDl.s32": "Vector Absolute Difference (32 bits Signed Integer components)",
        "VABDl.u8": "Vector Absolute Difference (8 bits Unsigned Integer components)",
        "VABDl.u16": "Vector Absolute Difference (16 bits Unsigned Integer components)",
        "VABDl.u32": "Vector Absolute Difference (32 bits Unsigned Integer components)",
        "VABDl.f32": "Vector Absolute Difference (32 bits Float components)",
        "VABDl.w.s8": "Vector Absolute Difference (8 bits Signed Integer components)",
        "VABDl.w.s16": "Vector Absolute Difference (16 bits Signed Integer components)",
        "VABDl.w.s32": "Vector Absolute Difference (32 bits Signed Integer components)",
        "VABDl.w.u8": "Vector Absolute Difference (8 bits Unsigned Integer components)",
        "VABDl.w.u16": "Vector Absolute Difference (16 bits Unsigned Integer components)",
        "VABDl.w.u32": "Vector Absolute Difference (32 bits Unsigned Integer components)",
        "VABDl.w.f32": "Vector Absolute Difference (32 bits Float components)",
        "VABDlal.s8": "Vector Absolute Difference (8 bits Signed Integer components) (Always)",
        "VABDlal.s16": "Vector Absolute Difference (16 bits Signed Integer components) (Always)",
        "VABDlal.s32": "Vector Absolute Difference (32 bits Signed Integer components) (Always)",
        "VABDlal.u8": "Vector Absolute Difference (8 bits Unsigned Integer components) (Always)",
        "VABDlal.u16": "Vector Absolute Difference (16 bits Unsigned Integer components) (Always)",
        "VABDlal.u32": "Vector Absolute Difference (32 bits Unsigned Integer components) (Always)",
        "VABDlal.f32": "Vector Absolute Difference (32 bits Float components) (Always)",
        "VABDlal.w.s8": "Vector Absolute Difference (8 bits Signed Integer components) (Always)",
        "VABDlal.w.s16": "Vector Absolute Difference (16 bits Signed Integer components) (Always)",
        "VABDlal.w.s32": "Vector Absolute Difference (32 bits Signed Integer components) (Always)",
        "VABDlal.w.u8": "Vector Absolute Difference (8 bits Unsigned Integer components) (Always)",
        "VABDlal.w.u16": "Vector Absolute Difference (16 bits Unsigned Integer components) (Always)",
        "VABDlal.w.u32": "Vector Absolute Difference (32 bits Unsigned Integer components) (Always)",
        "VABDlal.w.f32": "Vector Absolute Difference (32 bits Float components) (Always)"
      }
    },
    "VABS%{c}%{q}%{dt}": {
      "description": "Vector Absolute %{dt} %{q} %{c}",
      "variants": {
        "VABS.s8": "Vector Absolute (8 bits Signed Integer components)",
        "VABS.s16": "Vector Absolute (16 bits Signed Integer components)",
        "VABS.s32": "Vector Absolute (32 bits Signed Integer components)",
        "VABS.f32": "Vector Absolute (32 bits Float components)",
        "VABS.f64": "Vector Absolute (64 bits Float components)",
        "VABS.w.s8": "Vector Absolute (8 bits Signed Integer components)",
        "VABS.w.s16": "Vector Absolute (16 bits Signed Integer components)",
        "VABS.w.s32": "Vector Absolute (32 bits Signed Integer components)",
        "VABS.w.f32": "Vector Absolute (32 bits Float components)",
        "VABS.w.f64": "Vector Absolute (64 bits Float components)",
        "VABSal.s8": "Vector Absolute (8 bits Signed Integer components) (Always)",
        "VABSal.s16": "Vector Absolute (16 bits Signed Integer components) (Always)",
        "VABSal.s32": "Vector Absolute (32 bits Signed Integer components) (Always)",
        "VABSal.f32": "Vector Absolute (32 bits Float components) (Always)",
        "VABSal.f64": "Vector Absolute (64 bits Float components) (Always)",
        "VABSal.w.s8": "Vector Absolute (8 bits Signed Integer components) (Always)",
        "VABSal.w.s16": "Vector Absolute (16 bits Signed Integer components) (Always)",
        "VABSal.w.s32": "Vector Absolute (32 bits Signed Integer components) (Always)",
        "VABSal.w.f32": "Vector Absolute (32 bits Float components) (Always)",
        "VABSal.w.f64": "Vector Absolute (64 bits Float components) (Always)"
      }
    },
    "VAC%{comparaisons}%{c}%{q}%{dt}": {
      "description": "Vector Absolute Compare %{comparaisons} %{q} %{c}",
      "variants": {
        "VACge.f32": "Vector Absolute Compare Greater than or Equal",
        "VACge.w.f32": "Vector Absolute Compare Greater than or Equal",
        "VACgeal.f32": "Vector Absolute Compare Greater than or Equal (Always)",
        "VACgeal.w.f32": "Vector Absolute Compare Greater than or Equal (Always)",
        "VACgt.f32": "Vector Absolute Compare Greater Than",
        "VACgt.w.f32": "Vector Absolute Compare Greater Than",
        "VACgtal.f32": "Vector Absolute Compare Greater Than (Always)",
        "VACgtal.w.f32": "Vector Absolute Compare Greater Than (Always)",
        "VACle.f32": "Vector Absolute Compare Lesser than or Equal",
        "VACle.w.f32": "Vector Absolute Compare Lesser than or Equal",
        "VACleal.f32": "Vector Absolute Compare Lesser than or Equal (Always)",
        "VACleal.w.f32": "Vector Absolute Compare Lesser than or Equal (Always)",
        "VAClt.f32": "Vector Absolute Compare Lesser Than",
        "VAClt.w.f32": "Vector Absolute Compare Lesser Than",
        "VACltal.f32": "Vector Absolute Compare Lesser Than (Always)",
        "VACltal.w.f32": "Vector Absolute Compare Lesser Than (Always)"
      }
    },
    "VADD%{c}%{q}%{dt}": {
      "description": "Vector Add %{dt} %{q} %{c}",
      "variants": {
        "VADD.i8": "Vector Add (8 bits Integer components)",
        "VADD.i16": "Vector Add (16 bits Integer components)",
        "VADD.i32": "Vector Add (32 bits Integer components)",
        "VADD.i64": "Vector Add (64 bits Integer components)",
        "VADD.w.i8": "Vector Add (8 bits Integer components)",
        "VADD.w.i16": "Vector Add (16 bits Integer components)",
        "VADD.w.i32": "Vector Add (32 bits Integer components)",
        "VADD.w.i64": "Vector Add (64 bits Integer components)",
        "VADDal.i8": "Vector Add (8 bits Integer components) (Always)",
        "VADDal.i16": "Vector Add (16 bits Integer components) (Always)",
        "VADDal.i32": "Vector Add (32 bits Integer components) (Always)",
        "VADDal.i64": "Vector Add (64 bits Integer components) (Always)",
        "VADDal.w.i8": "Vector Add (8 bits Integer components) (Always)",
        "VADDal.w.i16": "Vector Add (16 bits Integer components) (Always)",
        "VADDal.w.i32": "Vector Add (32 bits Integer components) (Always)",
        "VADDal.w.i64": "Vector Add (64 bits Integer components) (Always)"
      }
    },
    "VADDHN%{c}%{q}%{dt}": {
      "description": "Vector Add and Narrow %{dt} %{q} %{c}",
      "variants": {
        "VADDHN.i16": "Vector Add and Narrow (16 bits Integer components)",
        "VADDHN.i32": "Vector Add and Narrow (32 bits Integer components)",
        "VADDHN.i64": "Vector Add and Narrow (64 bits Integer components)",
        "VADDHN.w.i16": "Vector Add and Narrow (16 bits Integer components)",
        "VADDHN.w.i32": "Vector Add and Narrow (32 bits Integer components)",
        "VADDHN.w.i64": "Vector Add and Narrow (64 bits Integer components)",
        "VADDHNal.i16": "Vector Add and Narrow (16 bits Integer components) (Always)",
        "VADDHNal.i32": "Vector Add and Narrow (32 bits Integer components) (Always)",
        "VADDHNal.i64": "Vector Add and Narrow (64 bits Integer components) (Always)",
        "VADDHNal.w.i16": "Vector Add and Narrow (16 bits Integer components) (Always)",
        "VADDHNal.w.i32": "Vector Add and Narrow (32 bits Integer components) (Always)",
        "VADDHNal.w.i64": "Vector Add and Narrow (64 bits Integer components) (Always)"
      }
    },
    "VADDL%{c}%{q}%{dt}": {
      "description": "Vector Add Long %{dt} %{q} %{c}",
      "variants": {
        "VADDL.s8": "Vector Add Long (8 bits Signed Integer components)",
        "VADDL.s16": "Vector Add Long (16 bits Signed Integer components)",
        "VADDL.s32": "Vector Add Long (32 bits Signed Integer components)",
        "VADDL.u8": "Vector Add Long (8 bits Unsigned Integer components)",
        "VADDL.u16": "Vector Add Long (16 bits Unsigned Integer components)",
        "VADDL.u32": "Vector Add Long (32 bits Unsigned Integer components)",
        "VADDL.w.s8": "Vector Add Long (8 bits Signed Integer components)",
        "VADDL.w.s16": "Vector Add Long (16 bits Signed Integer components)",
        "VADDL.w.s32": "Vector Add Long (32 bits Signed Integer components)",
        "VADDL.w.u8": "Vector Add Long (8 bits Unsigned Integer components)",
        "VADDL.w.u16": "Vector Add Long (16 bits Unsigned Integer components)",
        "VADDL.w.u32": "Vector Add Long (32 bits Unsigned Integer components)",
        "VADDLal.s8": "Vector Add Long (8 bits Signed Integer components) (Always)",
        "VADDLal.s16": "Vector Add Long (16 bits Signed Integer components) (Always)",
        "VADDLal.s32": "Vector Add Long (32 bits Signed Integer components) (Always)",
        "VADDLal.u8": "Vector Add Long (8 bits Unsigned Integer components) (Always)",
        "VADDLal.u16": "Vector Add Long (16 bits Unsigned Integer components) (Always)",
        "VADDLal.u32": "Vector Add Long (32 bits Unsigned Integer components) (Always)",
        "VADDLal.w.s8": "Vector Add Long (8 bits Signed Integer components) (Always)",
        "VADDLal.w.s16": "Vector Add Long (16 bits Signed Integer components) (Always)",
        "VADDLal.w.s32": "Vector Add Long (32 bits Signed Integer components) (Always)",
        "VADDLal.w.u8": "Vector Add Long (8 bits Unsigned Integer components) (Always)",
        "VADDLal.w.u16": "Vector Add Long (16 bits Unsigned Integer components) (Always)",
        "VADDLal.w.u32": "Vector Add Long (32 bits Unsigned Integer components) (Always)"
      }
    },
    "VADDW%{c}%{q}%{dt}": {
      "description": "Vector Add Wide %{dt} %{q} %{c}",
      "variants": {
        "VADDW.s8": "Vector Add Wide (8 bits Signed Integer components)",
        "VADDW.s16": "Vector Add Wide (16 bits Signed Integer components)",
        "VADDW.s32": "Vector Add Wide (32 bits Signed Integer components)",
        "VADDW.u8": "Vector Add Wide (8 bits Unsigned Integer components)",
        "VADDW.u16": "Vector Add Wide (16 bits Unsigned Integer components)",
        "VADDW.u32": "Vector Add Wide (32 bits Unsigned Integer components)",
        "VADDW.w.s8": "Vector Add Wide (8 bits Signed Integer components)",
        "VADDW.w.s16": "Vector Add Wide (16 bits Signed Integer components)",
        "VADDW.w.s32": "Vector Add Wide (32 bits Signed Integer components)",
        "VADDW.w.u8": "Vector Add Wide (8 bits Unsigned Integer components)",
        "VADDW.w.u16": "Vector Add Wide (16 bits Unsigned Integer components)",
        "VADDW.w.u32": "Vector Add Wide (32 bits Unsigned Integer components)",
        "VADDWal.s8": "Vector Add Wide (8 bits Signed Integer components) (Always)",
        "VADDWal.s16": "Vector Add Wide (16 bits Signed Integer components) (Always)",
        "VADDWal.s32": "Vector Add Wide (32 bits Signed Integer components) (Always)",
        "VADDWal.u8": "Vector Add Wide (8 bits Unsigned Integer components) (Always)",
        "VADDWal.u16": "Vector Add Wide (16 bits Unsigned Integer components) (Always)",
        "VADDWal.u32": "Vector Add Wide (32 bits Unsigned Integer components) (Always)",
        "VADDWal.w.s8": "Vector Add Wide (8 bits Signed Integer components) (Always)",
        "VADDWal.w.s16": "Vector Add Wide (16 bits Signed Integer components) (Always)",
        "VADDWal.w.s32": "Vector Add Wide (32 bits Signed Integer components) (Always)",
        "VADDWal.w.u8": "Vector Add Wide (8 bits Unsigned Integer components) (Always)",
        "VADDWal.w.u16": "Vector Add Wide (16 bits Unsigned Integer components) (Always)",
        "VADDWal.w.u32": "Vector Add Wide (32 bits Unsigned Integer components) (Always)"
      }
    },
    "VAND%{c}%{q}%{dt}": {
      "description": "Vector Bitwise AND %{dt} %{q} %{c}",
      "variants": {
        "VANDignored": "Vector Bitwise AND",
        "VAND.wignored": "Vector Bitwise AND",
        "VANDalignored": "Vector Bitwise AND (Always)",
        "VANDal.wignored": "Vector Bitwise AND (Always)"
      }
    },
    "VBIC%{c}%{q}%{dt}": {
      "description": "Vector Bitwise Bit Clear %{dt} %{q} %{c}",
      "variants": {
        "VBIC.i16": "Vector Bitwise Bit Clear (16 bits Integer components)",
        "VBIC.i32": "Vector Bitwise Bit Clear (32 bits Integer components)",
        "VBIC.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding)",
        "VBIC.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding)",
        "VBIC.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding)",
        "VBIC.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding)",
        "VBICeq.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.Z == 1 [Equal])",
        "VBICeq.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.Z == 1 [Equal])",
        "VBICeq.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VBICeq.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VBICeq.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VBICeq.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VBICne.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.Z == 0 [Not Equal])",
        "VBICne.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.Z == 0 [Not Equal])",
        "VBICne.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VBICne.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VBICne.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VBICne.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VBICcs.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.C == 1 [Carry Set])",
        "VBICcs.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.C == 1 [Carry Set])",
        "VBICcs.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VBICcs.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VBICcs.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VBICcs.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VBICcc.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.C == 0 [Carry Clear])",
        "VBICcc.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.C == 0 [Carry Clear])",
        "VBICcc.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VBICcc.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VBICcc.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VBICcc.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VBICmi.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.N == 1 [Minus])",
        "VBICmi.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.N == 1 [Minus])",
        "VBICmi.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VBICmi.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VBICmi.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VBICmi.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VBICpl.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.N == 0 [Plus])",
        "VBICpl.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.N == 0 [Plus])",
        "VBICpl.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VBICpl.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VBICpl.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VBICpl.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VBICvs.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.V == 1 [Overflow])",
        "VBICvs.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.V == 1 [Overflow])",
        "VBICvs.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VBICvs.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VBICvs.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VBICvs.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VBICvc.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.V == 0 [No Overflow])",
        "VBICvc.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.V == 0 [No Overflow])",
        "VBICvc.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VBICvc.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VBICvc.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VBICvc.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VBIChi.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VBIChi.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VBIChi.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VBIChi.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VBIChi.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VBIChi.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VBICls.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VBICls.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VBICls.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VBICls.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VBICls.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VBICls.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VBICge.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VBICge.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VBICge.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VBICge.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VBICge.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VBICge.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VBIClt.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VBIClt.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VBIClt.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VBIClt.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VBIClt.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VBIClt.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VBICgt.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VBICgt.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VBICgt.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VBICgt.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VBICgt.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VBICgt.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VBICle.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VBICle.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VBICle.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VBICle.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VBICle.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VBICle.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VBICal.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (Always)",
        "VBICal.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (Always)",
        "VBICal.n.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T 16bits encoding) (Always)",
        "VBICal.n.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T 16bits encoding) (Always)",
        "VBICal.w.i16": "Vector Bitwise Bit Clear (16 bits Integer components) (T/A 32bits encoding) (Always)",
        "VBICal.w.i32": "Vector Bitwise Bit Clear (32 bits Integer components) (T/A 32bits encoding) (Always)"
      }
    },
    "VBIF%{c}%{q}%{dt}": {
      "description": "Vector Bitwise Insert if False %{dt} %{q} %{c}",
      "variants": {
        "VBIFignored": "Vector Bitwise Insert if False",
        "VBIF.wignored": "Vector Bitwise Insert if False",
        "VBIFalignored": "Vector Bitwise Insert if False (Always)",
        "VBIFal.wignored": "Vector Bitwise Insert if False (Always)"
      }
    },
    "VBIT%{c}%{q}%{dt}": {
      "description": "Vector Bitwise Insert if True %{dt} %{q} %{c}",
      "variants": {
        "VBITignored": "Vector Bitwise Insert if True",
        "VBIT.wignored": "Vector Bitwise Insert if True",
        "VBITalignored": "Vector Bitwise Insert if True (Always)",
        "VBITal.wignored": "Vector Bitwise Insert if True (Always)"
      }
    },
    "VBSL%{c}%{q}%{dt}": {
      "description": "Vector Bitwise Select %{dt} %{q} %{c}",
      "variants": {
        "VBSLignored": "Vector Bitwise Select",
        "VBSL.wignored": "Vector Bitwise Select",
        "VBSLalignored": "Vector Bitwise Select (Always)",
        "VBSLal.wignored": "Vector Bitwise Select (Always)"
      }
    },
    "VC%{comparaisons}%{c}%{q}%{dt}": {
      "description": "Vector Compare %{comparaisons} %{dt} %{q} %{c}",
      "variants": {
        "VCeq.i8": "Vector Compare Equal (8 bits Integer components)",
        "VCeq.i16": "Vector Compare Equal (16 bits Integer components)",
        "VCeq.i32": "Vector Compare Equal (32 bits Integer components)",
        "VCeq.f32": "Vector Compare Equal (32 bits Float components)",
        "VCeq.w.i8": "Vector Compare Equal (8 bits Integer components)",
        "VCeq.w.i16": "Vector Compare Equal (16 bits Integer components)",
        "VCeq.w.i32": "Vector Compare Equal (32 bits Integer components)",
        "VCeq.w.f32": "Vector Compare Equal (32 bits Float components)",
        "VCeqal.i8": "Vector Compare Equal (8 bits Integer components) (Always)",
        "VCeqal.i16": "Vector Compare Equal (16 bits Integer components) (Always)",
        "VCeqal.i32": "Vector Compare Equal (32 bits Integer components) (Always)",
        "VCeqal.f32": "Vector Compare Equal (32 bits Float components) (Always)",
        "VCeqal.w.i8": "Vector Compare Equal (8 bits Integer components) (Always)",
        "VCeqal.w.i16": "Vector Compare Equal (16 bits Integer components) (Always)",
        "VCeqal.w.i32": "Vector Compare Equal (32 bits Integer components) (Always)",
        "VCeqal.w.f32": "Vector Compare Equal (32 bits Float components) (Always)",
        "VCge.i8": "Vector Compare Greater than or Equal (8 bits Integer components)",
        "VCge.i16": "Vector Compare Greater than or Equal (16 bits Integer components)",
        "VCge.i32": "Vector Compare Greater than or Equal (32 bits Integer components)",
        "VCge.f32": "Vector Compare Greater than or Equal (32 bits Float components)",
        "VCge.w.i8": "Vector Compare Greater than or Equal (8 bits Integer components)",
        "VCge.w.i16": "Vector Compare Greater than or Equal (16 bits Integer components)",
        "VCge.w.i32": "Vector Compare Greater than or Equal (32 bits Integer components)",
        "VCge.w.f32": "Vector Compare Greater than or Equal (32 bits Float components)",
        "VCgeal.i8": "Vector Compare Greater than or Equal (8 bits Integer components) (Always)",
        "VCgeal.i16": "Vector Compare Greater than or Equal (16 bits Integer components) (Always)",
        "VCgeal.i32": "Vector Compare Greater than or Equal (32 bits Integer components) (Always)",
        "VCgeal.f32": "Vector Compare Greater than or Equal (32 bits Float components) (Always)",
        "VCgeal.w.i8": "Vector Compare Greater than or Equal (8 bits Integer components) (Always)",
        "VCgeal.w.i16": "Vector Compare Greater than or Equal (16 bits Integer components) (Always)",
        "VCgeal.w.i32": "Vector Compare Greater than or Equal (32 bits Integer components) (Always)",
        "VCgeal.w.f32": "Vector Compare Greater than or Equal (32 bits Float components) (Always)",
        "VCgt.i8": "Vector Compare Greater Than (8 bits Integer components)",
        "VCgt.i16": "Vector Compare Greater Than (16 bits Integer components)",
        "VCgt.i32": "Vector Compare Greater Than (32 bits Integer components)",
        "VCgt.f32": "Vector Compare Greater Than (32 bits Float components)",
        "VCgt.w.i8": "Vector Compare Greater Than (8 bits Integer components)",
        "VCgt.w.i16": "Vector Compare Greater Than (16 bits Integer components)",
        "VCgt.w.i32": "Vector Compare Greater Than (32 bits Integer components)",
        "VCgt.w.f32": "Vector Compare Greater Than (32 bits Float components)",
        "VCgtal.i8": "Vector Compare Greater Than (8 bits Integer components) (Always)",
        "VCgtal.i16": "Vector Compare Greater Than (16 bits Integer components) (Always)",
        "VCgtal.i32": "Vector Compare Greater Than (32 bits Integer components) (Always)",
        "VCgtal.f32": "Vector Compare Greater Than (32 bits Float components) (Always)",
        "VCgtal.w.i8": "Vector Compare Greater Than (8 bits Integer components) (Always)",
        "VCgtal.w.i16": "Vector Compare Greater Than (16 bits Integer components) (Always)",
        "VCgtal.w.i32": "Vector Compare Greater Than (32 bits Integer components) (Always)",
        "VCgtal.w.f32": "Vector Compare Greater Than (32 bits Float components) (Always)",
        "VCle.i8": "Vector Compare Lesser than or Equal (8 bits Integer components)",
        "VCle.i16": "Vector Compare Lesser than or Equal (16 bits Integer components)",
        "VCle.i32": "Vector Compare Lesser than or Equal (32 bits Integer components)",
        "VCle.f32": "Vector Compare Lesser than or Equal (32 bits Float components)",
        "VCle.w.i8": "Vector Compare Lesser than or Equal (8 bits Integer components)",
        "VCle.w.i16": "Vector Compare Lesser than or Equal (16 bits Integer components)",
        "VCle.w.i32": "Vector Compare Lesser than or Equal (32 bits Integer components)",
        "VCle.w.f32": "Vector Compare Lesser than or Equal (32 bits Float components)",
        "VCleal.i8": "Vector Compare Lesser than or Equal (8 bits Integer components) (Always)",
        "VCleal.i16": "Vector Compare Lesser than or Equal (16 bits Integer components) (Always)",
        "VCleal.i32": "Vector Compare Lesser than or Equal (32 bits Integer components) (Always)",
        "VCleal.f32": "Vector Compare Lesser than or Equal (32 bits Float components) (Always)",
        "VCleal.w.i8": "Vector Compare Lesser than or Equal (8 bits Integer components) (Always)",
        "VCleal.w.i16": "Vector Compare Lesser than or Equal (16 bits Integer components) (Always)",
        "VCleal.w.i32": "Vector Compare Lesser than or Equal (32 bits Integer components) (Always)",
        "VCleal.w.f32": "Vector Compare Lesser than or Equal (32 bits Float components) (Always)",
        "VClt.i8": "Vector Compare Lesser Than (8 bits Integer components)",
        "VClt.i16": "Vector Compare Lesser Than (16 bits Integer components)",
        "VClt.i32": "Vector Compare Lesser Than (32 bits Integer components)",
        "VClt.f32": "Vector Compare Lesser Than (32 bits Float components)",
        "VClt.w.i8": "Vector Compare Lesser Than (8 bits Integer components)",
        "VClt.w.i16": "Vector Compare Lesser Than (16 bits Integer components)",
        "VClt.w.i32": "Vector Compare Lesser Than (32 bits Integer components)",
        "VClt.w.f32": "Vector Compare Lesser Than (32 bits Float components)",
        "VCltal.i8": "Vector Compare Lesser Than (8 bits Integer components) (Always)",
        "VCltal.i16": "Vector Compare Lesser Than (16 bits Integer components) (Always)",
        "VCltal.i32": "Vector Compare Lesser Than (32 bits Integer components) (Always)",
        "VCltal.f32": "Vector Compare Lesser Than (32 bits Float components) (Always)",
        "VCltal.w.i8": "Vector Compare Lesser Than (8 bits Integer components) (Always)",
        "VCltal.w.i16": "Vector Compare Lesser Than (16 bits Integer components) (Always)",
        "VCltal.w.i32": "Vector Compare Lesser Than (32 bits Integer components) (Always)",
        "VCltal.w.f32": "Vector Compare Lesser Than (32 bits Float components) (Always)"
      }
    },
    "VCLS%{c}%{q}%{dt}": {
      "description": "Vector Count Leading Sign Bits %{dt} %{q} %{c}",
      "variants": {
        "VCLS.s8": "Vector Count Leading Sign Bits (8 bits Signed Integer components)",
        "VCLS.s16": "Vector Count Leading Sign Bits (16 bits Signed Integer components)",
        "VCLS.s32": "Vector Count Leading Sign Bits (32 bits Signed Integer components)",
        "VCLS.w.s8": "Vector Count Leading Sign Bits (8 bits Signed Integer components)",
        "VCLS.w.s16": "Vector Count Leading Sign Bits (16 bits Signed Integer components)",
        "VCLS.w.s32": "Vector Count Leading Sign Bits (32 bits Signed Integer components)",
        "VCLSal.s8": "Vector Count Leading Sign Bits (8 bits Signed Integer components) (Always)",
        "VCLSal.s16": "Vector Count Leading Sign Bits (16 bits Signed Integer components) (Always)",
        "VCLSal.s32": "Vector Count Leading Sign Bits (32 bits Signed Integer components) (Always)",
        "VCLSal.w.s8": "Vector Count Leading Sign Bits (8 bits Signed Integer components) (Always)",
        "VCLSal.w.s16": "Vector Count Leading Sign Bits (16 bits Signed Integer components) (Always)",
        "VCLSal.w.s32": "Vector Count Leading Sign Bits (32 bits Signed Integer components) (Always)"
      }
    },
    "VCLT%{c}%{q}%{dt}": {
      "description": "Vector Compare Less Than Zero %{dt} %{q} %{c}",
      "variants": {
        "VCLT.s8": "Vector Compare Less Than Zero (8 bits Signed Integer components)",
        "VCLT.s16": "Vector Compare Less Than Zero (16 bits Signed Integer components)",
        "VCLT.s32": "Vector Compare Less Than Zero (32 bits Signed Integer components)",
        "VCLT.w.s8": "Vector Compare Less Than Zero (8 bits Signed Integer components)",
        "VCLT.w.s16": "Vector Compare Less Than Zero (16 bits Signed Integer components)",
        "VCLT.w.s32": "Vector Compare Less Than Zero (32 bits Signed Integer components)",
        "VCLTal.s8": "Vector Compare Less Than Zero (8 bits Signed Integer components) (Always)",
        "VCLTal.s16": "Vector Compare Less Than Zero (16 bits Signed Integer components) (Always)",
        "VCLTal.s32": "Vector Compare Less Than Zero (32 bits Signed Integer components) (Always)",
        "VCLTal.w.s8": "Vector Compare Less Than Zero (8 bits Signed Integer components) (Always)",
        "VCLTal.w.s16": "Vector Compare Less Than Zero (16 bits Signed Integer components) (Always)",
        "VCLTal.w.s32": "Vector Compare Less Than Zero (32 bits Signed Integer components) (Always)"
      }
    },
    "VCLZ%{c}%{q}%{dt}": {
      "description": "Vector Count Leading Zeros %{dt} %{q} %{c}",
      "variants": {
        "VCLZ.i8": "Vector Count Leading Zeros (8 bits Integer components)",
        "VCLZ.i16": "Vector Count Leading Zeros (16 bits Integer components)",
        "VCLZ.i32": "Vector Count Leading Zeros (32 bits Integer components)",
        "VCLZ.w.i8": "Vector Count Leading Zeros (8 bits Integer components)",
        "VCLZ.w.i16": "Vector Count Leading Zeros (16 bits Integer components)",
        "VCLZ.w.i32": "Vector Count Leading Zeros (32 bits Integer components)",
        "VCLZal.i8": "Vector Count Leading Zeros (8 bits Integer components) (Always)",
        "VCLZal.i16": "Vector Count Leading Zeros (16 bits Integer components) (Always)",
        "VCLZal.i32": "Vector Count Leading Zeros (32 bits Integer components) (Always)",
        "VCLZal.w.i8": "Vector Count Leading Zeros (8 bits Integer components) (Always)",
        "VCLZal.w.i16": "Vector Count Leading Zeros (16 bits Integer components) (Always)",
        "VCLZal.w.i32": "Vector Count Leading Zeros (32 bits Integer components) (Always)"
      }
    },
    "VCMP%{exception}%{c}%{q}%{dt}": {
      "description": "Vector Compare %{exception} %{dt} %{q} %{c}",
      "variants": {
        "VCMP.f32": "Vector Compare (32 bits Float components)",
        "VCMP.f64": "Vector Compare (64 bits Float components)",
        "VCMP.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding)",
        "VCMP.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding)",
        "VCMP.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding)",
        "VCMP.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding)",
        "VCMPeq.f32": "Vector Compare (32 bits Float components) (If APSR.Z == 1 [Equal])",
        "VCMPeq.f64": "Vector Compare (64 bits Float components) (If APSR.Z == 1 [Equal])",
        "VCMPeq.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCMPeq.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCMPeq.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCMPeq.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCMPne.f32": "Vector Compare (32 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VCMPne.f64": "Vector Compare (64 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VCMPne.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCMPne.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCMPne.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCMPne.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCMPcs.f32": "Vector Compare (32 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VCMPcs.f64": "Vector Compare (64 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VCMPcs.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCMPcs.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCMPcs.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCMPcs.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCMPcc.f32": "Vector Compare (32 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VCMPcc.f64": "Vector Compare (64 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VCMPcc.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCMPcc.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCMPcc.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCMPcc.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCMPmi.f32": "Vector Compare (32 bits Float components) (If APSR.N == 1 [Minus])",
        "VCMPmi.f64": "Vector Compare (64 bits Float components) (If APSR.N == 1 [Minus])",
        "VCMPmi.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCMPmi.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCMPmi.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCMPmi.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCMPpl.f32": "Vector Compare (32 bits Float components) (If APSR.N == 0 [Plus])",
        "VCMPpl.f64": "Vector Compare (64 bits Float components) (If APSR.N == 0 [Plus])",
        "VCMPpl.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCMPpl.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCMPpl.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCMPpl.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCMPvs.f32": "Vector Compare (32 bits Float components) (If APSR.V == 1 [Overflow])",
        "VCMPvs.f64": "Vector Compare (64 bits Float components) (If APSR.V == 1 [Overflow])",
        "VCMPvs.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCMPvs.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCMPvs.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCMPvs.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCMPvc.f32": "Vector Compare (32 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VCMPvc.f64": "Vector Compare (64 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VCMPvc.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCMPvc.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCMPvc.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCMPvc.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCMPhi.f32": "Vector Compare (32 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPhi.f64": "Vector Compare (64 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPhi.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPhi.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPhi.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPhi.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPls.f32": "Vector Compare (32 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPls.f64": "Vector Compare (64 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPls.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPls.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPls.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPls.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPge.f32": "Vector Compare (32 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPge.f64": "Vector Compare (64 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPge.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPge.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPge.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPge.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPlt.f32": "Vector Compare (32 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPlt.f64": "Vector Compare (64 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPlt.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPlt.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPlt.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPlt.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPgt.f32": "Vector Compare (32 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPgt.f64": "Vector Compare (64 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPgt.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPgt.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPgt.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPgt.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPle.f32": "Vector Compare (32 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPle.f64": "Vector Compare (64 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPle.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPle.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPle.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPle.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPal.f32": "Vector Compare (32 bits Float components) (Always)",
        "VCMPal.f64": "Vector Compare (64 bits Float components) (Always)",
        "VCMPal.n.f32": "Vector Compare (32 bits Float components) (T 16bits encoding) (Always)",
        "VCMPal.n.f64": "Vector Compare (64 bits Float components) (T 16bits encoding) (Always)",
        "VCMPal.w.f32": "Vector Compare (32 bits Float components) (T/A 32bits encoding) (Always)",
        "VCMPal.w.f64": "Vector Compare (64 bits Float components) (T/A 32bits encoding) (Always)",
        "VCMPe.f32": "Vector Compare (trigger Exceptions) (32 bits Float components)",
        "VCMPe.f64": "Vector Compare (trigger Exceptions) (64 bits Float components)",
        "VCMPe.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding)",
        "VCMPe.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding)",
        "VCMPe.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding)",
        "VCMPe.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding)",
        "VCMPeeq.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.Z == 1 [Equal])",
        "VCMPeeq.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.Z == 1 [Equal])",
        "VCMPeeq.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCMPeeq.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCMPeeq.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCMPeeq.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCMPene.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VCMPene.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VCMPene.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCMPene.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCMPene.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCMPene.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCMPecs.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VCMPecs.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VCMPecs.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCMPecs.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCMPecs.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCMPecs.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCMPecc.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VCMPecc.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VCMPecc.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCMPecc.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCMPecc.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCMPecc.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCMPemi.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.N == 1 [Minus])",
        "VCMPemi.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.N == 1 [Minus])",
        "VCMPemi.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCMPemi.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCMPemi.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCMPemi.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCMPepl.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.N == 0 [Plus])",
        "VCMPepl.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.N == 0 [Plus])",
        "VCMPepl.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCMPepl.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCMPepl.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCMPepl.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCMPevs.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.V == 1 [Overflow])",
        "VCMPevs.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.V == 1 [Overflow])",
        "VCMPevs.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCMPevs.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCMPevs.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCMPevs.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCMPevc.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VCMPevc.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VCMPevc.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCMPevc.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCMPevc.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCMPevc.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCMPehi.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPehi.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPehi.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPehi.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPehi.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPehi.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCMPels.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPels.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPels.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPels.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPels.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPels.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCMPege.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPege.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPege.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPege.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPege.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPege.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCMPelt.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPelt.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPelt.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPelt.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPelt.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPelt.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCMPegt.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPegt.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPegt.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPegt.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPegt.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPegt.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCMPele.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPele.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPele.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPele.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPele.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPele.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCMPeal.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (Always)",
        "VCMPeal.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (Always)",
        "VCMPeal.n.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T 16bits encoding) (Always)",
        "VCMPeal.n.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T 16bits encoding) (Always)",
        "VCMPeal.w.f32": "Vector Compare (trigger Exceptions) (32 bits Float components) (T/A 32bits encoding) (Always)",
        "VCMPeal.w.f64": "Vector Compare (trigger Exceptions) (64 bits Float components) (T/A 32bits encoding) (Always)"
      }
    },
    "VCNT%{c}%{q}.8": {
      "description": "Vector Count 1 bits %{q} %{c}",
      "variants": {
        "VCNT.8": "Vector Count 1 bits",
        "VCNT.w.8": "Vector Count 1 bits",
        "VCNTal.8": "Vector Count 1 bits (Always)",
        "VCNTal.w.8": "Vector Count 1 bits (Always)"
      }
    },
    "VCVT%{c}%{q}%{vector_conversions}": {
      "description": "Vector Convert between integer and floating-point %{vector_conversions} %{q} %{c}",
      "variants": {
        "VCVT.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components))",
        "VCVT.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components))",
        "VCVT.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components))",
        "VCVT.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components))",
        "VCVT.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components))",
        "VCVT.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components))",
        "VCVT.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components))",
        "VCVT.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components))",
        "VCVT.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components))",
        "VCVT.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components))",
        "VCVT.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components))",
        "VCVT.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components))",
        "VCVT.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components))",
        "VCVT.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components))",
        "VCVT.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components))",
        "VCVT.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components))",
        "VCVT.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components))",
        "VCVT.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components))",
        "VCVT.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding)",
        "VCVT.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding)",
        "VCVT.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding)",
        "VCVT.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding)",
        "VCVT.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding)",
        "VCVT.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding)",
        "VCVT.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding)",
        "VCVT.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding)",
        "VCVT.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding)",
        "VCVT.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding)",
        "VCVT.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding)",
        "VCVT.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding)",
        "VCVT.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding)",
        "VCVT.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding)",
        "VCVT.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding)",
        "VCVT.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding)",
        "VCVT.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding)",
        "VCVT.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding)",
        "VCVT.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding)",
        "VCVT.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding)",
        "VCVT.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding)",
        "VCVT.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding)",
        "VCVT.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding)",
        "VCVT.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding)",
        "VCVT.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding)",
        "VCVT.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding)",
        "VCVT.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding)",
        "VCVT.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding)",
        "VCVT.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding)",
        "VCVT.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding)",
        "VCVT.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding)",
        "VCVT.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding)",
        "VCVT.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding)",
        "VCVT.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding)",
        "VCVT.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding)",
        "VCVT.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding)",
        "VCVTeq.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTeq.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTne.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTne.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTcs.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcs.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTcc.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTcc.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTmi.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTmi.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTpl.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTpl.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTvs.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvs.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTvc.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTvc.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVThi.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVThi.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTls.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTls.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTge.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTge.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTlt.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTlt.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTgt.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTgt.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTle.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTle.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTal.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (Always)",
        "VCVTal.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (Always)",
        "VCVTal.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (Always)",
        "VCVTal.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (Always)",
        "VCVTal.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (Always)",
        "VCVTal.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (Always)",
        "VCVTal.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (Always)",
        "VCVTal.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (Always)",
        "VCVTal.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (Always)",
        "VCVTal.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (Always)",
        "VCVTal.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (Always)",
        "VCVTal.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (Always)",
        "VCVTal.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (Always)",
        "VCVTal.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (Always)",
        "VCVTal.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (Always)",
        "VCVTal.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (Always)",
        "VCVTal.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (Always)",
        "VCVTal.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (Always)",
        "VCVTal.n.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTal.n.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (Always)",
        "VCVTal.n.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTal.n.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (Always)",
        "VCVTal.n.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTal.n.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (Always)",
        "VCVTal.n.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTal.n.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (Always)",
        "VCVTal.n.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTal.n.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTal.n.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTal.n.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (Always)",
        "VCVTal.n.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTal.n.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T 16bits encoding) (Always)",
        "VCVTal.n.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTal.n.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (Always)",
        "VCVTal.n.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTal.n.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T 16bits encoding) (Always)",
        "VCVTal.w.s32.f32": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.f32.s32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.u32.f32": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.f32.u32": "Vector Convert between integer and floating-point (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.s32.f64": "Vector Convert between integer and floating-point (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.f64.s32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.u32.f64": "Vector Convert between integer and floating-point (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.f64.u32": "Vector Convert between integer and floating-point (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.f16.f32": "Vector Convert between integer and floating-point (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.f32.f16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.s16.f32": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.f32.s16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.s16.f64": "Vector Convert between integer and floating-point (from (16 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.f64.s16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Signed Integer components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.u16.f32": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.f32.u16": "Vector Convert between integer and floating-point (from (32 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.u16.f64": "Vector Convert between integer and floating-point (from (16 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTal.w.f64.u16": "Vector Convert between integer and floating-point (from (64 bits Float components) to (16 bits Unsigned Integer components)) (T/A 32bits encoding) (Always)"
      }
    },
    "VCVTB%{c}%{q}%{vector_conversions}": {
      "description": "Vector Convert Bottom %{vector_conversions} %{q} %{c}",
      "variants": {
        "VCVTB.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components))",
        "VCVTB.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components))",
        "VCVTB.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding)",
        "VCVTB.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding)",
        "VCVTB.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding)",
        "VCVTB.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding)",
        "VCVTBeq.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTBeq.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTBeq.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTBeq.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTBeq.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTBeq.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTBne.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTBne.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTBne.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTBne.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTBne.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTBne.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTBcs.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTBcs.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTBcs.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTBcs.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTBcs.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTBcs.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTBcc.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTBcc.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTBcc.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTBcc.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTBcc.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTBcc.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTBmi.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTBmi.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTBmi.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTBmi.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTBmi.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTBmi.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTBpl.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTBpl.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTBpl.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTBpl.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTBpl.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTBpl.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTBvs.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTBvs.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTBvs.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTBvs.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTBvs.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTBvs.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTBvc.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTBvc.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTBvc.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTBvc.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTBvc.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTBvc.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTBhi.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTBhi.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTBhi.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTBhi.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTBhi.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTBhi.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTBls.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTBls.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTBls.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTBls.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTBls.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTBls.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTBge.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTBge.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTBge.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTBge.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTBge.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTBge.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTBlt.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTBlt.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTBlt.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTBlt.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTBlt.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTBlt.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTBgt.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTBgt.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTBgt.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTBgt.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTBgt.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTBgt.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTBle.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTBle.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTBle.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTBle.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTBle.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTBle.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTBal.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (Always)",
        "VCVTBal.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (Always)",
        "VCVTBal.n.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTBal.n.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTBal.w.f16.f32": "Vector Convert Bottom (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTBal.w.f32.f16": "Vector Convert Bottom (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (Always)"
      }
    },
    "VCVTR%{c}%{q}%{vector_conversions}": {
      "description": "Vector Convert Rounding %{vector_conversions} %{q} %{c}",
      "variants": {
        "VCVTR.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components))",
        "VCVTR.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components))",
        "VCVTR.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components))",
        "VCVTR.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components))",
        "VCVTR.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components))",
        "VCVTR.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components))",
        "VCVTR.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components))",
        "VCVTR.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components))",
        "VCVTR.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding)",
        "VCVTR.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding)",
        "VCVTR.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding)",
        "VCVTR.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding)",
        "VCVTR.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding)",
        "VCVTR.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding)",
        "VCVTR.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding)",
        "VCVTR.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding)",
        "VCVTR.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding)",
        "VCVTR.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding)",
        "VCVTR.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding)",
        "VCVTR.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding)",
        "VCVTR.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding)",
        "VCVTR.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding)",
        "VCVTR.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding)",
        "VCVTR.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding)",
        "VCVTReq.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTReq.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTReq.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTReq.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTReq.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTReq.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTReq.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTReq.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.Z == 1 [Equal])",
        "VCVTReq.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTReq.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTRne.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRne.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTRcs.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcs.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTRcc.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRcc.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTRmi.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTRmi.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTRmi.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTRmi.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTRmi.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTRmi.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTRmi.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTRmi.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == 1 [Minus])",
        "VCVTRmi.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRmi.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTRpl.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTRpl.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTRpl.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTRpl.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTRpl.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTRpl.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTRpl.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTRpl.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == 0 [Plus])",
        "VCVTRpl.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRpl.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTRvs.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvs.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTRvc.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRvc.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTRhi.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRhi.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTRls.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRls.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTRge.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRge.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTRlt.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRlt.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTRgt.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRgt.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTRle.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRle.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTRal.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (Always)",
        "VCVTRal.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (Always)",
        "VCVTRal.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (Always)",
        "VCVTRal.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (Always)",
        "VCVTRal.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (Always)",
        "VCVTRal.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (Always)",
        "VCVTRal.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (Always)",
        "VCVTRal.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (Always)",
        "VCVTRal.n.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTRal.n.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (Always)",
        "VCVTRal.n.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTRal.n.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (Always)",
        "VCVTRal.n.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTRal.n.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T 16bits encoding) (Always)",
        "VCVTRal.n.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTRal.n.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T 16bits encoding) (Always)",
        "VCVTRal.w.s32.f32": "Vector Convert Rounding (from (32 bits Signed Integer components) to (32 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTRal.w.f32.s32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (Always)",
        "VCVTRal.w.u32.f32": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (32 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTRal.w.f32.u32": "Vector Convert Rounding (from (32 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (Always)",
        "VCVTRal.w.s32.f64": "Vector Convert Rounding (from (32 bits Signed Integer components) to (64 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTRal.w.f64.s32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Signed Integer components)) (T/A 32bits encoding) (Always)",
        "VCVTRal.w.u32.f64": "Vector Convert Rounding (from (32 bits Unsigned Integer components) to (64 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTRal.w.f64.u32": "Vector Convert Rounding (from (64 bits Float components) to (32 bits Unsigned Integer components)) (T/A 32bits encoding) (Always)"
      }
    },
    "VCVTT%{c}%{q}%{vector_conversions}": {
      "description": "Vector Convert Top %{vector_conversions} %{q} %{c}",
      "variants": {
        "VCVTT.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components))",
        "VCVTT.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components))",
        "VCVTT.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding)",
        "VCVTT.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding)",
        "VCVTT.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding)",
        "VCVTT.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding)",
        "VCVTTeq.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTTeq.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.Z == 1 [Equal])",
        "VCVTTeq.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTTeq.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTTeq.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTTeq.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VCVTTne.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTTne.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.Z == 0 [Not Equal])",
        "VCVTTne.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTTne.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTTne.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTTne.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VCVTTcs.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTTcs.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 1 [Carry Set])",
        "VCVTTcs.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTTcs.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTTcs.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTTcs.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VCVTTcc.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTTcc.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 0 [Carry Clear])",
        "VCVTTcc.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTTcc.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTTcc.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTTcc.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VCVTTmi.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTTmi.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == 1 [Minus])",
        "VCVTTmi.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTTmi.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTTmi.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTTmi.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VCVTTpl.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTTpl.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == 0 [Plus])",
        "VCVTTpl.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTTpl.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTTpl.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTTpl.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VCVTTvs.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTTvs.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.V == 1 [Overflow])",
        "VCVTTvs.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTTvs.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTTvs.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTTvs.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VCVTTvc.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTTvc.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.V == 0 [No Overflow])",
        "VCVTTvc.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTTvc.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTTvc.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTTvc.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VCVTThi.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTThi.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTThi.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTThi.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTThi.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTThi.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VCVTTls.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTTls.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTTls.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTTls.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTTls.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTTls.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VCVTTge.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTTge.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTTge.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTTge.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTTge.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTTge.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VCVTTlt.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTTlt.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTTlt.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTTlt.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTTlt.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTTlt.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VCVTTgt.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTTgt.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTTgt.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTTgt.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTTgt.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTTgt.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VCVTTle.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTTle.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTTle.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTTle.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTTle.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTTle.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VCVTTal.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (Always)",
        "VCVTTal.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (Always)",
        "VCVTTal.n.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTTal.n.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T 16bits encoding) (Always)",
        "VCVTTal.w.f16.f32": "Vector Convert Top (from (16 bits Float components) to (32 bits Float components)) (T/A 32bits encoding) (Always)",
        "VCVTTal.w.f32.f16": "Vector Convert Top (from (32 bits Float components) to (16 bits Float components)) (T/A 32bits encoding) (Always)"
      }
    },
    "VDIV%{c}%{q}%{dt}": {
      "description": "Vector Divide %{dt} %{q} %{c}",
      "variants": {
        "VDIV.f32": "Vector Divide (32 bits Float components)",
        "VDIV.f64": "Vector Divide (64 bits Float components)",
        "VDIV.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding)",
        "VDIV.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding)",
        "VDIV.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding)",
        "VDIV.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding)",
        "VDIVeq.f32": "Vector Divide (32 bits Float components) (If APSR.Z == 1 [Equal])",
        "VDIVeq.f64": "Vector Divide (64 bits Float components) (If APSR.Z == 1 [Equal])",
        "VDIVeq.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VDIVeq.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VDIVeq.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VDIVeq.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VDIVne.f32": "Vector Divide (32 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VDIVne.f64": "Vector Divide (64 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VDIVne.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VDIVne.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VDIVne.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VDIVne.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VDIVcs.f32": "Vector Divide (32 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VDIVcs.f64": "Vector Divide (64 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VDIVcs.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VDIVcs.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VDIVcs.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VDIVcs.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VDIVcc.f32": "Vector Divide (32 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VDIVcc.f64": "Vector Divide (64 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VDIVcc.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VDIVcc.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VDIVcc.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VDIVcc.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VDIVmi.f32": "Vector Divide (32 bits Float components) (If APSR.N == 1 [Minus])",
        "VDIVmi.f64": "Vector Divide (64 bits Float components) (If APSR.N == 1 [Minus])",
        "VDIVmi.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VDIVmi.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VDIVmi.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VDIVmi.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VDIVpl.f32": "Vector Divide (32 bits Float components) (If APSR.N == 0 [Plus])",
        "VDIVpl.f64": "Vector Divide (64 bits Float components) (If APSR.N == 0 [Plus])",
        "VDIVpl.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VDIVpl.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VDIVpl.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VDIVpl.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VDIVvs.f32": "Vector Divide (32 bits Float components) (If APSR.V == 1 [Overflow])",
        "VDIVvs.f64": "Vector Divide (64 bits Float components) (If APSR.V == 1 [Overflow])",
        "VDIVvs.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VDIVvs.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VDIVvs.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VDIVvs.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VDIVvc.f32": "Vector Divide (32 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VDIVvc.f64": "Vector Divide (64 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VDIVvc.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VDIVvc.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VDIVvc.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VDIVvc.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VDIVhi.f32": "Vector Divide (32 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VDIVhi.f64": "Vector Divide (64 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VDIVhi.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VDIVhi.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VDIVhi.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VDIVhi.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VDIVls.f32": "Vector Divide (32 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VDIVls.f64": "Vector Divide (64 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VDIVls.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VDIVls.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VDIVls.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VDIVls.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VDIVge.f32": "Vector Divide (32 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VDIVge.f64": "Vector Divide (64 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VDIVge.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VDIVge.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VDIVge.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VDIVge.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VDIVlt.f32": "Vector Divide (32 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VDIVlt.f64": "Vector Divide (64 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VDIVlt.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VDIVlt.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VDIVlt.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VDIVlt.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VDIVgt.f32": "Vector Divide (32 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VDIVgt.f64": "Vector Divide (64 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VDIVgt.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VDIVgt.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VDIVgt.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VDIVgt.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VDIVle.f32": "Vector Divide (32 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VDIVle.f64": "Vector Divide (64 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VDIVle.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VDIVle.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VDIVle.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VDIVle.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VDIVal.f32": "Vector Divide (32 bits Float components) (Always)",
        "VDIVal.f64": "Vector Divide (64 bits Float components) (Always)",
        "VDIVal.n.f32": "Vector Divide (32 bits Float components) (T 16bits encoding) (Always)",
        "VDIVal.n.f64": "Vector Divide (64 bits Float components) (T 16bits encoding) (Always)",
        "VDIVal.w.f32": "Vector Divide (32 bits Float components) (T/A 32bits encoding) (Always)",
        "VDIVal.w.f64": "Vector Divide (64 bits Float components) (T/A 32bits encoding) (Always)"
      }
    },
    "VDUP%{c}%{q}%{vsize}": {
      "description": "Vector Duplicate %{vsize} %{q} %{c}",
      "variants": {
        "VDUP.8": "Vector Duplicate (8 bits components)",
        "VDUP.16": "Vector Duplicate (16 bits components)",
        "VDUP.32": "Vector Duplicate (32 bits components)",
        "VDUP.w.8": "Vector Duplicate (8 bits components)",
        "VDUP.w.16": "Vector Duplicate (16 bits components)",
        "VDUP.w.32": "Vector Duplicate (32 bits components)",
        "VDUPal.8": "Vector Duplicate (8 bits components) (Always)",
        "VDUPal.16": "Vector Duplicate (16 bits components) (Always)",
        "VDUPal.32": "Vector Duplicate (32 bits components) (Always)",
        "VDUPal.w.8": "Vector Duplicate (8 bits components) (Always)",
        "VDUPal.w.16": "Vector Duplicate (16 bits components) (Always)",
        "VDUPal.w.32": "Vector Duplicate (32 bits components) (Always)"
      }
    },
    "VEOR%{c}%{q}%{dt}": {
      "description": "Vector Bitwise Exclusive OR %{dt} %{q} %{c}",
      "variants": {
        "VEORignored": "Vector Bitwise Exclusive OR",
        "VEOR.wignored": "Vector Bitwise Exclusive OR",
        "VEORalignored": "Vector Bitwise Exclusive OR (Always)",
        "VEORal.wignored": "Vector Bitwise Exclusive OR (Always)"
      }
    },
    "VEXT%{c}%{q}%{vsize}": {
      "description": "Vector Extract %{vsize} %{q} %{c}",
      "variants": {
        "VEXT.8": "Vector Extract (8 bits components)",
        "VEXT.16": "Vector Extract (16 bits components)",
        "VEXT.32": "Vector Extract (32 bits components)",
        "VEXT.64": "Vector Extract (64 bits components)",
        "VEXT.w.8": "Vector Extract (8 bits components)",
        "VEXT.w.16": "Vector Extract (16 bits components)",
        "VEXT.w.32": "Vector Extract (32 bits components)",
        "VEXT.w.64": "Vector Extract (64 bits components)",
        "VEXTal.8": "Vector Extract (8 bits components) (Always)",
        "VEXTal.16": "Vector Extract (16 bits components) (Always)",
        "VEXTal.32": "Vector Extract (32 bits components) (Always)",
        "VEXTal.64": "Vector Extract (64 bits components) (Always)",
        "VEXTal.w.8": "Vector Extract (8 bits components) (Always)",
        "VEXTal.w.16": "Vector Extract (16 bits components) (Always)",
        "VEXTal.w.32": "Vector Extract (32 bits components) (Always)",
        "VEXTal.w.64": "Vector Extract (64 bits components) (Always)"
      }
    },
    "VF%{negate}M%{operations}%{c}%{q}%{dt}": {
      "description": "Vector Fused %{negate} Multiply %{dt} %{q} %{c}",
      "variants": {
        "VFMA.f32": "Vector Fused Multiply (32 bits Float components)",
        "VFMA.f64": "Vector Fused Multiply (64 bits Float components)",
        "VFMA.w.f32": "Vector Fused Multiply (32 bits Float components)",
        "VFMA.w.f64": "Vector Fused Multiply (64 bits Float components)",
        "VFMAal.f32": "Vector Fused Multiply (32 bits Float components) (Always)",
        "VFMAal.f64": "Vector Fused Multiply (64 bits Float components) (Always)",
        "VFMAal.w.f32": "Vector Fused Multiply (32 bits Float components) (Always)",
        "VFMAal.w.f64": "Vector Fused Multiply (64 bits Float components) (Always)",
        "VFMS.f32": "Vector Fused Multiply (32 bits Float components)",
        "VFMS.f64": "Vector Fused Multiply (64 bits Float components)",
        "VFMS.w.f32": "Vector Fused Multiply (32 bits Float components)",
        "VFMS.w.f64": "Vector Fused Multiply (64 bits Float components)",
        "VFMSal.f32": "Vector Fused Multiply (32 bits Float components) (Always)",
        "VFMSal.f64": "Vector Fused Multiply (64 bits Float components) (Always)",
        "VFMSal.w.f32": "Vector Fused Multiply (32 bits Float components) (Always)",
        "VFMSal.w.f64": "Vector Fused Multiply (64 bits Float components) (Always)",
        "VFnMA.f32": "Vector Fused Negate Multiply (32 bits Float components)",
        "VFnMA.f64": "Vector Fused Negate Multiply (64 bits Float components)",
        "VFnMA.w.f32": "Vector Fused Negate Multiply (32 bits Float components)",
        "VFnMA.w.f64": "Vector Fused Negate Multiply (64 bits Float components)",
        "VFnMAal.f32": "Vector Fused Negate Multiply (32 bits Float components) (Always)",
        "VFnMAal.f64": "Vector Fused Negate Multiply (64 bits Float components) (Always)",
        "VFnMAal.w.f32": "Vector Fused Negate Multiply (32 bits Float components) (Always)",
        "VFnMAal.w.f64": "Vector Fused Negate Multiply (64 bits Float components) (Always)",
        "VFnMS.f32": "Vector Fused Negate Multiply (32 bits Float components)",
        "VFnMS.f64": "Vector Fused Negate Multiply (64 bits Float components)",
        "VFnMS.w.f32": "Vector Fused Negate Multiply (32 bits Float components)",
        "VFnMS.w.f64": "Vector Fused Negate Multiply (64 bits Float components)",
        "VFnMSal.f32": "Vector Fused Negate Multiply (32 bits Float components) (Always)",
        "VFnMSal.f64": "Vector Fused Negate Multiply (64 bits Float components) (Always)",
        "VFnMSal.w.f32": "Vector Fused Negate Multiply (32 bits Float components) (Always)",
        "VFnMSal.w.f64": "Vector Fused Negate Multiply (64 bits Float components) (Always)"
      }
    },
    "VH%{operations}%{c}%{q}%{dt}": {
      "description": "Vector Halving %{operations} %{dt} %{q} %{c}",
      "variants": {
        "VHA.s8": "Vector Halving Add (8 bits Signed Integer components)",
        "VHA.s16": "Vector Halving Add (16 bits Signed Integer components)",
        "VHA.s32": "Vector Halving Add (32 bits Signed Integer components)",
        "VHA.u8": "Vector Halving Add (8 bits Unsigned Integer components)",
        "VHA.u16": "Vector Halving Add (16 bits Unsigned Integer components)",
        "VHA.u32": "Vector Halving Add (32 bits Unsigned Integer components)",
        "VHA.w.s8": "Vector Halving Add (8 bits Signed Integer components)",
        "VHA.w.s16": "Vector Halving Add (16 bits Signed Integer components)",
        "VHA.w.s32": "Vector Halving Add (32 bits Signed Integer components)",
        "VHA.w.u8": "Vector Halving Add (8 bits Unsigned Integer components)",
        "VHA.w.u16": "Vector Halving Add (16 bits Unsigned Integer components)",
        "VHA.w.u32": "Vector Halving Add (32 bits Unsigned Integer components)",
        "VHAal.s8": "Vector Halving Add (8 bits Signed Integer components) (Always)",
        "VHAal.s16": "Vector Halving Add (16 bits Signed Integer components) (Always)",
        "VHAal.s32": "Vector Halving Add (32 bits Signed Integer components) (Always)",
        "VHAal.u8": "Vector Halving Add (8 bits Unsigned Integer components) (Always)",
        "VHAal.u16": "Vector Halving Add (16 bits Unsigned Integer components) (Always)",
        "VHAal.u32": "Vector Halving Add (32 bits Unsigned Integer components) (Always)",
        "VHAal.w.s8": "Vector Halving Add (8 bits Signed Integer components) (Always)",
        "VHAal.w.s16": "Vector Halving Add (16 bits Signed Integer components) (Always)",
        "VHAal.w.s32": "Vector Halving Add (32 bits Signed Integer components) (Always)",
        "VHAal.w.u8": "Vector Halving Add (8 bits Unsigned Integer components) (Always)",
        "VHAal.w.u16": "Vector Halving Add (16 bits Unsigned Integer components) (Always)",
        "VHAal.w.u32": "Vector Halving Add (32 bits Unsigned Integer components) (Always)",
        "VHS.s8": "Vector Halving Subtract (8 bits Signed Integer components)",
        "VHS.s16": "Vector Halving Subtract (16 bits Signed Integer components)",
        "VHS.s32": "Vector Halving Subtract (32 bits Signed Integer components)",
        "VHS.u8": "Vector Halving Subtract (8 bits Unsigned Integer components)",
        "VHS.u16": "Vector Halving Subtract (16 bits Unsigned Integer components)",
        "VHS.u32": "Vector Halving Subtract (32 bits Unsigned Integer components)",
        "VHS.w.s8": "Vector Halving Subtract (8 bits Signed Integer components)",
        "VHS.w.s16": "Vector Halving Subtract (16 bits Signed Integer components)",
        "VHS.w.s32": "Vector Halving Subtract (32 bits Signed Integer components)",
        "VHS.w.u8": "Vector Halving Subtract (8 bits Unsigned Integer components)",
        "VHS.w.u16": "Vector Halving Subtract (16 bits Unsigned Integer components)",
        "VHS.w.u32": "Vector Halving Subtract (32 bits Unsigned Integer components)",
        "VHSal.s8": "Vector Halving Subtract (8 bits Signed Integer components) (Always)",
        "VHSal.s16": "Vector Halving Subtract (16 bits Signed Integer components) (Always)",
        "VHSal.s32": "Vector Halving Subtract (32 bits Signed Integer components) (Always)",
        "VHSal.u8": "Vector Halving Subtract (8 bits Unsigned Integer components) (Always)",
        "VHSal.u16": "Vector Halving Subtract (16 bits Unsigned Integer components) (Always)",
        "VHSal.u32": "Vector Halving Subtract (32 bits Unsigned Integer components) (Always)",
        "VHSal.w.s8": "Vector Halving Subtract (8 bits Signed Integer components) (Always)",
        "VHSal.w.s16": "Vector Halving Subtract (16 bits Signed Integer components) (Always)",
        "VHSal.w.s32": "Vector Halving Subtract (32 bits Signed Integer components) (Always)",
        "VHSal.w.u8": "Vector Halving Subtract (8 bits Unsigned Integer components) (Always)",
        "VHSal.w.u16": "Vector Halving Subtract (16 bits Unsigned Integer components) (Always)",
        "VHSal.w.u32": "Vector Halving Subtract (32 bits Unsigned Integer components) (Always)"
      }
    },
    "VLD1%{c}%{q}.%{vsize}": {
      "description": "Vector Load (multiple single elements) %{vsize} %{q} %{c}",
      "variants": {
        "VLD1..8": "Vector Load (multiple single elements) (8 bits components)",
        "VLD1..16": "Vector Load (multiple single elements) (16 bits components)",
        "VLD1..32": "Vector Load (multiple single elements) (32 bits components)",
        "VLD1..64": "Vector Load (multiple single elements) (64 bits components)",
        "VLD1.w..8": "Vector Load (multiple single elements) (8 bits components)",
        "VLD1.w..16": "Vector Load (multiple single elements) (16 bits components)",
        "VLD1.w..32": "Vector Load (multiple single elements) (32 bits components)",
        "VLD1.w..64": "Vector Load (multiple single elements) (64 bits components)",
        "VLD1al..8": "Vector Load (multiple single elements) (8 bits components) (Always)",
        "VLD1al..16": "Vector Load (multiple single elements) (16 bits components) (Always)",
        "VLD1al..32": "Vector Load (multiple single elements) (32 bits components) (Always)",
        "VLD1al..64": "Vector Load (multiple single elements) (64 bits components) (Always)",
        "VLD1al.w..8": "Vector Load (multiple single elements) (8 bits components) (Always)",
        "VLD1al.w..16": "Vector Load (multiple single elements) (16 bits components) (Always)",
        "VLD1al.w..32": "Vector Load (multiple single elements) (32 bits components) (Always)",
        "VLD1al.w..64": "Vector Load (multiple single elements) (64 bits components) (Always)"
      }
    },
    "VLD2%{c}%{q}.%{vsize}": {
      "description": "Vector Load (multiple 2-elements structures) %{vsize} %{q} %{c}",
      "variants": {
        "VLD2..8": "Vector Load (multiple 2-elements structures) (8 bits components)",
        "VLD2..16": "Vector Load (multiple 2-elements structures) (16 bits components)",
        "VLD2..32": "Vector Load (multiple 2-elements structures) (32 bits components)",
        "VLD2.w..8": "Vector Load (multiple 2-elements structures) (8 bits components)",
        "VLD2.w..16": "Vector Load (multiple 2-elements structures) (16 bits components)",
        "VLD2.w..32": "Vector Load (multiple 2-elements structures) (32 bits components)",
        "VLD2al..8": "Vector Load (multiple 2-elements structures) (8 bits components) (Always)",
        "VLD2al..16": "Vector Load (multiple 2-elements structures) (16 bits components) (Always)",
        "VLD2al..32": "Vector Load (multiple 2-elements structures) (32 bits components) (Always)",
        "VLD2al.w..8": "Vector Load (multiple 2-elements structures) (8 bits components) (Always)",
        "VLD2al.w..16": "Vector Load (multiple 2-elements structures) (16 bits components) (Always)",
        "VLD2al.w..32": "Vector Load (multiple 2-elements structures) (32 bits components) (Always)"
      }
    },
    "VLD3%{c}%{q}.%{vsize}": {
      "description": "Vector Load (multiple 3-elements structures) %{vsize} %{q} %{c}",
      "variants": {
        "VLD3..8": "Vector Load (multiple 3-elements structures) (8 bits components)",
        "VLD3..16": "Vector Load (multiple 3-elements structures) (16 bits components)",
        "VLD3..32": "Vector Load (multiple 3-elements structures) (32 bits components)",
        "VLD3..64": "Vector Load (multiple 3-elements structures) (64 bits components)",
        "VLD3.w..8": "Vector Load (multiple 3-elements structures) (8 bits components)",
        "VLD3.w..16": "Vector Load (multiple 3-elements structures) (16 bits components)",
        "VLD3.w..32": "Vector Load (multiple 3-elements structures) (32 bits components)",
        "VLD3.w..64": "Vector Load (multiple 3-elements structures) (64 bits components)",
        "VLD3al..8": "Vector Load (multiple 3-elements structures) (8 bits components) (Always)",
        "VLD3al..16": "Vector Load (multiple 3-elements structures) (16 bits components) (Always)",
        "VLD3al..32": "Vector Load (multiple 3-elements structures) (32 bits components) (Always)",
        "VLD3al..64": "Vector Load (multiple 3-elements structures) (64 bits components) (Always)",
        "VLD3al.w..8": "Vector Load (multiple 3-elements structures) (8 bits components) (Always)",
        "VLD3al.w..16": "Vector Load (multiple 3-elements structures) (16 bits components) (Always)",
        "VLD3al.w..32": "Vector Load (multiple 3-elements structures) (32 bits components) (Always)",
        "VLD3al.w..64": "Vector Load (multiple 3-elements structures) (64 bits components) (Always)"
      }
    },
    "VLD4%{c}%{q}.%{vsize}": {
      "description": "Vector Load (multiple 4-elements structures) %{vsize} %{q} %{c}",
      "variants": {
        "VLD4..8": "Vector Load (multiple 4-elements structures) (8 bits components)",
        "VLD4..16": "Vector Load (multiple 4-elements structures) (16 bits components)",
        "VLD4..32": "Vector Load (multiple 4-elements structures) (32 bits components)",
        "VLD4..64": "Vector Load (multiple 4-elements structures) (64 bits components)",
        "VLD4.w..8": "Vector Load (multiple 4-elements structures) (8 bits components)",
        "VLD4.w..16": "Vector Load (multiple 4-elements structures) (16 bits components)",
        "VLD4.w..32": "Vector Load (multiple 4-elements structures) (32 bits components)",
        "VLD4.w..64": "Vector Load (multiple 4-elements structures) (64 bits components)",
        "VLD4al..8": "Vector Load (multiple 4-elements structures) (8 bits components) (Always)",
        "VLD4al..16": "Vector Load (multiple 4-elements structures) (16 bits components) (Always)",
        "VLD4al..32": "Vector Load (multiple 4-elements structures) (32 bits components) (Always)",
        "VLD4al..64": "Vector Load (multiple 4-elements structures) (64 bits components) (Always)",
        "VLD4al.w..8": "Vector Load (multiple 4-elements structures) (8 bits components) (Always)",
        "VLD4al.w..16": "Vector Load (multiple 4-elements structures) (16 bits components) (Always)",
        "VLD4al.w..32": "Vector Load (multiple 4-elements structures) (32 bits components) (Always)",
        "VLD4al.w..64": "Vector Load (multiple 4-elements structures) (64 bits components) (Always)"
      }
    },
    "VLDM%{c}%{q}.%{vsize}": {
      "description": "Vector Load Multiple %{vsize} %{q} %{c}",
      "variants": {
        "VLDM..32": "Vector Load Multiple (32 bits components)",
        "VLDM..64": "Vector Load Multiple (64 bits components)",
        "VLDM.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding)",
        "VLDM.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding)",
        "VLDM.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding)",
        "VLDM.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding)",
        "VLDMeq..32": "Vector Load Multiple (32 bits components) (If APSR.Z == 1 [Equal])",
        "VLDMeq..64": "Vector Load Multiple (64 bits components) (If APSR.Z == 1 [Equal])",
        "VLDMeq.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VLDMeq.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VLDMeq.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VLDMeq.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VLDMne..32": "Vector Load Multiple (32 bits components) (If APSR.Z == 0 [Not Equal])",
        "VLDMne..64": "Vector Load Multiple (64 bits components) (If APSR.Z == 0 [Not Equal])",
        "VLDMne.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VLDMne.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VLDMne.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VLDMne.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VLDMcs..32": "Vector Load Multiple (32 bits components) (If APSR.C == 1 [Carry Set])",
        "VLDMcs..64": "Vector Load Multiple (64 bits components) (If APSR.C == 1 [Carry Set])",
        "VLDMcs.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VLDMcs.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VLDMcs.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VLDMcs.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VLDMcc..32": "Vector Load Multiple (32 bits components) (If APSR.C == 0 [Carry Clear])",
        "VLDMcc..64": "Vector Load Multiple (64 bits components) (If APSR.C == 0 [Carry Clear])",
        "VLDMcc.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VLDMcc.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VLDMcc.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VLDMcc.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VLDMmi..32": "Vector Load Multiple (32 bits components) (If APSR.N == 1 [Minus])",
        "VLDMmi..64": "Vector Load Multiple (64 bits components) (If APSR.N == 1 [Minus])",
        "VLDMmi.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VLDMmi.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VLDMmi.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VLDMmi.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VLDMpl..32": "Vector Load Multiple (32 bits components) (If APSR.N == 0 [Plus])",
        "VLDMpl..64": "Vector Load Multiple (64 bits components) (If APSR.N == 0 [Plus])",
        "VLDMpl.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VLDMpl.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VLDMpl.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VLDMpl.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VLDMvs..32": "Vector Load Multiple (32 bits components) (If APSR.V == 1 [Overflow])",
        "VLDMvs..64": "Vector Load Multiple (64 bits components) (If APSR.V == 1 [Overflow])",
        "VLDMvs.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VLDMvs.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VLDMvs.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VLDMvs.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VLDMvc..32": "Vector Load Multiple (32 bits components) (If APSR.V == 0 [No Overflow])",
        "VLDMvc..64": "Vector Load Multiple (64 bits components) (If APSR.V == 0 [No Overflow])",
        "VLDMvc.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VLDMvc.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VLDMvc.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VLDMvc.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VLDMhi..32": "Vector Load Multiple (32 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDMhi..64": "Vector Load Multiple (64 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDMhi.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDMhi.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDMhi.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDMhi.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDMls..32": "Vector Load Multiple (32 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDMls..64": "Vector Load Multiple (64 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDMls.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDMls.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDMls.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDMls.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDMge..32": "Vector Load Multiple (32 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDMge..64": "Vector Load Multiple (64 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDMge.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDMge.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDMge.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDMge.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDMlt..32": "Vector Load Multiple (32 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDMlt..64": "Vector Load Multiple (64 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDMlt.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDMlt.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDMlt.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDMlt.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDMgt..32": "Vector Load Multiple (32 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDMgt..64": "Vector Load Multiple (64 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDMgt.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDMgt.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDMgt.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDMgt.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDMle..32": "Vector Load Multiple (32 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDMle..64": "Vector Load Multiple (64 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDMle.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDMle.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDMle.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDMle.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDMal..32": "Vector Load Multiple (32 bits components) (Always)",
        "VLDMal..64": "Vector Load Multiple (64 bits components) (Always)",
        "VLDMal.n..32": "Vector Load Multiple (32 bits components) (T 16bits encoding) (Always)",
        "VLDMal.n..64": "Vector Load Multiple (64 bits components) (T 16bits encoding) (Always)",
        "VLDMal.w..32": "Vector Load Multiple (32 bits components) (T/A 32bits encoding) (Always)",
        "VLDMal.w..64": "Vector Load Multiple (64 bits components) (T/A 32bits encoding) (Always)"
      }
    },
    "VLDR%{c}%{q}.%{vsize}": {
      "description": "Vector Load Register %{vsize} %{q} %{c}",
      "variants": {
        "VLDR..32": "Vector Load Register (32 bits components)",
        "VLDR..64": "Vector Load Register (64 bits components)",
        "VLDR.n..32": "Vector Load Register (32 bits components) (T 16bits encoding)",
        "VLDR.n..64": "Vector Load Register (64 bits components) (T 16bits encoding)",
        "VLDR.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding)",
        "VLDR.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding)",
        "VLDReq..32": "Vector Load Register (32 bits components) (If APSR.Z == 1 [Equal])",
        "VLDReq..64": "Vector Load Register (64 bits components) (If APSR.Z == 1 [Equal])",
        "VLDReq.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VLDReq.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VLDReq.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VLDReq.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VLDRne..32": "Vector Load Register (32 bits components) (If APSR.Z == 0 [Not Equal])",
        "VLDRne..64": "Vector Load Register (64 bits components) (If APSR.Z == 0 [Not Equal])",
        "VLDRne.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VLDRne.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VLDRne.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VLDRne.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VLDRcs..32": "Vector Load Register (32 bits components) (If APSR.C == 1 [Carry Set])",
        "VLDRcs..64": "Vector Load Register (64 bits components) (If APSR.C == 1 [Carry Set])",
        "VLDRcs.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VLDRcs.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VLDRcs.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VLDRcs.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VLDRcc..32": "Vector Load Register (32 bits components) (If APSR.C == 0 [Carry Clear])",
        "VLDRcc..64": "Vector Load Register (64 bits components) (If APSR.C == 0 [Carry Clear])",
        "VLDRcc.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VLDRcc.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VLDRcc.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VLDRcc.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VLDRmi..32": "Vector Load Register (32 bits components) (If APSR.N == 1 [Minus])",
        "VLDRmi..64": "Vector Load Register (64 bits components) (If APSR.N == 1 [Minus])",
        "VLDRmi.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VLDRmi.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VLDRmi.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VLDRmi.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VLDRpl..32": "Vector Load Register (32 bits components) (If APSR.N == 0 [Plus])",
        "VLDRpl..64": "Vector Load Register (64 bits components) (If APSR.N == 0 [Plus])",
        "VLDRpl.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VLDRpl.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VLDRpl.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VLDRpl.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VLDRvs..32": "Vector Load Register (32 bits components) (If APSR.V == 1 [Overflow])",
        "VLDRvs..64": "Vector Load Register (64 bits components) (If APSR.V == 1 [Overflow])",
        "VLDRvs.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VLDRvs.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VLDRvs.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VLDRvs.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VLDRvc..32": "Vector Load Register (32 bits components) (If APSR.V == 0 [No Overflow])",
        "VLDRvc..64": "Vector Load Register (64 bits components) (If APSR.V == 0 [No Overflow])",
        "VLDRvc.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VLDRvc.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VLDRvc.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VLDRvc.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VLDRhi..32": "Vector Load Register (32 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDRhi..64": "Vector Load Register (64 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDRhi.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDRhi.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDRhi.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDRhi.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VLDRls..32": "Vector Load Register (32 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDRls..64": "Vector Load Register (64 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDRls.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDRls.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDRls.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDRls.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VLDRge..32": "Vector Load Register (32 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDRge..64": "Vector Load Register (64 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDRge.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDRge.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDRge.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDRge.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VLDRlt..32": "Vector Load Register (32 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDRlt..64": "Vector Load Register (64 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDRlt.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDRlt.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDRlt.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDRlt.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VLDRgt..32": "Vector Load Register (32 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDRgt..64": "Vector Load Register (64 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDRgt.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDRgt.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDRgt.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDRgt.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VLDRle..32": "Vector Load Register (32 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDRle..64": "Vector Load Register (64 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDRle.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDRle.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDRle.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDRle.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VLDRal..32": "Vector Load Register (32 bits components) (Always)",
        "VLDRal..64": "Vector Load Register (64 bits components) (Always)",
        "VLDRal.n..32": "Vector Load Register (32 bits components) (T 16bits encoding) (Always)",
        "VLDRal.n..64": "Vector Load Register (64 bits components) (T 16bits encoding) (Always)",
        "VLDRal.w..32": "Vector Load Register (32 bits components) (T/A 32bits encoding) (Always)",
        "VLDRal.w..64": "Vector Load Register (64 bits components) (T/A 32bits encoding) (Always)"
      }
    },
    "VMAX%{c}%{q}%{dt}": {
      "description": "Vector Maximum %{dt} %{q} %{c}",
      "variants": {
        "VMAX.s8": "Vector Maximum (8 bits Signed Integer components)",
        "VMAX.s16": "Vector Maximum (16 bits Signed Integer components)",
        "VMAX.s32": "Vector Maximum (32 bits Signed Integer components)",
        "VMAX.u8": "Vector Maximum (8 bits Unsigned Integer components)",
        "VMAX.u16": "Vector Maximum (16 bits Unsigned Integer components)",
        "VMAX.u32": "Vector Maximum (32 bits Unsigned Integer components)",
        "VMAX.f32": "Vector Maximum (32 bits Float components)",
        "VMAX.w.s8": "Vector Maximum (8 bits Signed Integer components)",
        "VMAX.w.s16": "Vector Maximum (16 bits Signed Integer components)",
        "VMAX.w.s32": "Vector Maximum (32 bits Signed Integer components)",
        "VMAX.w.u8": "Vector Maximum (8 bits Unsigned Integer components)",
        "VMAX.w.u16": "Vector Maximum (16 bits Unsigned Integer components)",
        "VMAX.w.u32": "Vector Maximum (32 bits Unsigned Integer components)",
        "VMAX.w.f32": "Vector Maximum (32 bits Float components)",
        "VMAXal.s8": "Vector Maximum (8 bits Signed Integer components) (Always)",
        "VMAXal.s16": "Vector Maximum (16 bits Signed Integer components) (Always)",
        "VMAXal.s32": "Vector Maximum (32 bits Signed Integer components) (Always)",
        "VMAXal.u8": "Vector Maximum (8 bits Unsigned Integer components) (Always)",
        "VMAXal.u16": "Vector Maximum (16 bits Unsigned Integer components) (Always)",
        "VMAXal.u32": "Vector Maximum (32 bits Unsigned Integer components) (Always)",
        "VMAXal.f32": "Vector Maximum (32 bits Float components) (Always)",
        "VMAXal.w.s8": "Vector Maximum (8 bits Signed Integer components) (Always)",
        "VMAXal.w.s16": "Vector Maximum (16 bits Signed Integer components) (Always)",
        "VMAXal.w.s32": "Vector Maximum (32 bits Signed Integer components) (Always)",
        "VMAXal.w.u8": "Vector Maximum (8 bits Unsigned Integer components) (Always)",
        "VMAXal.w.u16": "Vector Maximum (16 bits Unsigned Integer components) (Always)",
        "VMAXal.w.u32": "Vector Maximum (32 bits Unsigned Integer components) (Always)",
        "VMAXal.w.f32": "Vector Maximum (32 bits Float components) (Always)"
      }
    },
    "VMIN%{c}%{q}%{dt}": {
      "description": "Vector Minimum %{dt} %{q} %{c}",
      "variants": {
        "VMIN.s8": "Vector Minimum (8 bits Signed Integer components)",
        "VMIN.s16": "Vector Minimum (16 bits Signed Integer components)",
        "VMIN.s32": "Vector Minimum (32 bits Signed Integer components)",
        "VMIN.u8": "Vector Minimum (8 bits Unsigned Integer components)",
        "VMIN.u16": "Vector Minimum (16 bits Unsigned Integer components)",
        "VMIN.u32": "Vector Minimum (32 bits Unsigned Integer components)",
        "VMIN.f32": "Vector Minimum (32 bits Float components)",
        "VMIN.w.s8": "Vector Minimum (8 bits Signed Integer components)",
        "VMIN.w.s16": "Vector Minimum (16 bits Signed Integer components)",
        "VMIN.w.s32": "Vector Minimum (32 bits Signed Integer components)",
        "VMIN.w.u8": "Vector Minimum (8 bits Unsigned Integer components)",
        "VMIN.w.u16": "Vector Minimum (16 bits Unsigned Integer components)",
        "VMIN.w.u32": "Vector Minimum (32 bits Unsigned Integer components)",
        "VMIN.w.f32": "Vector Minimum (32 bits Float components)",
        "VMINal.s8": "Vector Minimum (8 bits Signed Integer components) (Always)",
        "VMINal.s16": "Vector Minimum (16 bits Signed Integer components) (Always)",
        "VMINal.s32": "Vector Minimum (32 bits Signed Integer components) (Always)",
        "VMINal.u8": "Vector Minimum (8 bits Unsigned Integer components) (Always)",
        "VMINal.u16": "Vector Minimum (16 bits Unsigned Integer components) (Always)",
        "VMINal.u32": "Vector Minimum (32 bits Unsigned Integer components) (Always)",
        "VMINal.f32": "Vector Minimum (32 bits Float components) (Always)",
        "VMINal.w.s8": "Vector Minimum (8 bits Signed Integer components) (Always)",
        "VMINal.w.s16": "Vector Minimum (16 bits Signed Integer components) (Always)",
        "VMINal.w.s32": "Vector Minimum (32 bits Signed Integer components) (Always)",
        "VMINal.w.u8": "Vector Minimum (8 bits Unsigned Integer components) (Always)",
        "VMINal.w.u16": "Vector Minimum (16 bits Unsigned Integer components) (Always)",
        "VMINal.w.u32": "Vector Minimum (32 bits Unsigned Integer components) (Always)",
        "VMINal.w.f32": "Vector Minimum (32 bits Float components) (Always)"
      }
    },
    "VML%{operations}%{l}%{c}%{q}%{dt}": {
      "description": "Vector Multiply and %{operations} %{l} %{dt} %{q} %{c}",
      "variants": {
        "VMLA.s8": "Vector Multiply and Accumulate (8 bits Signed Integer components)",
        "VMLA.s16": "Vector Multiply and Accumulate (16 bits Signed Integer components)",
        "VMLA.s32": "Vector Multiply and Accumulate (32 bits Signed Integer components)",
        "VMLA.u8": "Vector Multiply and Accumulate (8 bits Unsigned Integer components)",
        "VMLA.u16": "Vector Multiply and Accumulate (16 bits Unsigned Integer components)",
        "VMLA.u32": "Vector Multiply and Accumulate (32 bits Unsigned Integer components)",
        "VMLA.i8": "Vector Multiply and Accumulate (8 bits Integer components)",
        "VMLA.i16": "Vector Multiply and Accumulate (16 bits Integer components)",
        "VMLA.i32": "Vector Multiply and Accumulate (32 bits Integer components)",
        "VMLA.f32": "Vector Multiply and Accumulate (32 bits Float components)",
        "VMLA.f64": "Vector Multiply and Accumulate (64 bits Float components)",
        "VMLA.w.s8": "Vector Multiply and Accumulate (8 bits Signed Integer components)",
        "VMLA.w.s16": "Vector Multiply and Accumulate (16 bits Signed Integer components)",
        "VMLA.w.s32": "Vector Multiply and Accumulate (32 bits Signed Integer components)",
        "VMLA.w.u8": "Vector Multiply and Accumulate (8 bits Unsigned Integer components)",
        "VMLA.w.u16": "Vector Multiply and Accumulate (16 bits Unsigned Integer components)",
        "VMLA.w.u32": "Vector Multiply and Accumulate (32 bits Unsigned Integer components)",
        "VMLA.w.i8": "Vector Multiply and Accumulate (8 bits Integer components)",
        "VMLA.w.i16": "Vector Multiply and Accumulate (16 bits Integer components)",
        "VMLA.w.i32": "Vector Multiply and Accumulate (32 bits Integer components)",
        "VMLA.w.f32": "Vector Multiply and Accumulate (32 bits Float components)",
        "VMLA.w.f64": "Vector Multiply and Accumulate (64 bits Float components)",
        "VMLAal.s8": "Vector Multiply and Accumulate (8 bits Signed Integer components) (Always)",
        "VMLAal.s16": "Vector Multiply and Accumulate (16 bits Signed Integer components) (Always)",
        "VMLAal.s32": "Vector Multiply and Accumulate (32 bits Signed Integer components) (Always)",
        "VMLAal.u8": "Vector Multiply and Accumulate (8 bits Unsigned Integer components) (Always)",
        "VMLAal.u16": "Vector Multiply and Accumulate (16 bits Unsigned Integer components) (Always)",
        "VMLAal.u32": "Vector Multiply and Accumulate (32 bits Unsigned Integer components) (Always)",
        "VMLAal.i8": "Vector Multiply and Accumulate (8 bits Integer components) (Always)",
        "VMLAal.i16": "Vector Multiply and Accumulate (16 bits Integer components) (Always)",
        "VMLAal.i32": "Vector Multiply and Accumulate (32 bits Integer components) (Always)",
        "VMLAal.f32": "Vector Multiply and Accumulate (32 bits Float components) (Always)",
        "VMLAal.f64": "Vector Multiply and Accumulate (64 bits Float components) (Always)",
        "VMLAal.w.s8": "Vector Multiply and Accumulate (8 bits Signed Integer components) (Always)",
        "VMLAal.w.s16": "Vector Multiply and Accumulate (16 bits Signed Integer components) (Always)",
        "VMLAal.w.s32": "Vector Multiply and Accumulate (32 bits Signed Integer components) (Always)",
        "VMLAal.w.u8": "Vector Multiply and Accumulate (8 bits Unsigned Integer components) (Always)",
        "VMLAal.w.u16": "Vector Multiply and Accumulate (16 bits Unsigned Integer components) (Always)",
        "VMLAal.w.u32": "Vector Multiply and Accumulate (32 bits Unsigned Integer components) (Always)",
        "VMLAal.w.i8": "Vector Multiply and Accumulate (8 bits Integer components) (Always)",
        "VMLAal.w.i16": "Vector Multiply and Accumulate (16 bits Integer components) (Always)",
        "VMLAal.w.i32": "Vector Multiply and Accumulate (32 bits Integer components) (Always)",
        "VMLAal.w.f32": "Vector Multiply and Accumulate (32 bits Float components) (Always)",
        "VMLAal.w.f64": "Vector Multiply and Accumulate (64 bits Float components) (Always)",
        "VMLAl.s8": "Vector Multiply and Accumulate Long (8 bits Signed Integer components)",
        "VMLAl.s16": "Vector Multiply and Accumulate Long (16 bits Signed Integer components)",
        "VMLAl.s32": "Vector Multiply and Accumulate Long (32 bits Signed Integer components)",
        "VMLAl.u8": "Vector Multiply and Accumulate Long (8 bits Unsigned Integer components)",
        "VMLAl.u16": "Vector Multiply and Accumulate Long (16 bits Unsigned Integer components)",
        "VMLAl.u32": "Vector Multiply and Accumulate Long (32 bits Unsigned Integer components)",
        "VMLAl.i8": "Vector Multiply and Accumulate Long (8 bits Integer components)",
        "VMLAl.i16": "Vector Multiply and Accumulate Long (16 bits Integer components)",
        "VMLAl.i32": "Vector Multiply and Accumulate Long (32 bits Integer components)",
        "VMLAl.f32": "Vector Multiply and Accumulate Long (32 bits Float components)",
        "VMLAl.f64": "Vector Multiply and Accumulate Long (64 bits Float components)",
        "VMLAl.w.s8": "Vector Multiply and Accumulate Long (8 bits Signed Integer components)",
        "VMLAl.w.s16": "Vector Multiply and Accumulate Long (16 bits Signed Integer components)",
        "VMLAl.w.s32": "Vector Multiply and Accumulate Long (32 bits Signed Integer components)",
        "VMLAl.w.u8": "Vector Multiply and Accumulate Long (8 bits Unsigned Integer components)",
        "VMLAl.w.u16": "Vector Multiply and Accumulate Long (16 bits Unsigned Integer components)",
        "VMLAl.w.u32": "Vector Multiply and Accumulate Long (32 bits Unsigned Integer components)",
        "VMLAl.w.i8": "Vector Multiply and Accumulate Long (8 bits Integer components)",
        "VMLAl.w.i16": "Vector Multiply and Accumulate Long (16 bits Integer components)",
        "VMLAl.w.i32": "Vector Multiply and Accumulate Long (32 bits Integer components)",
        "VMLAl.w.f32": "Vector Multiply and Accumulate Long (32 bits Float components)",
        "VMLAl.w.f64": "Vector Multiply and Accumulate Long (64 bits Float components)",
        "VMLAlal.s8": "Vector Multiply and Accumulate Long (8 bits Signed Integer components) (Always)",
        "VMLAlal.s16": "Vector Multiply and Accumulate Long (16 bits Signed Integer components) (Always)",
        "VMLAlal.s32": "Vector Multiply and Accumulate Long (32 bits Signed Integer components) (Always)",
        "VMLAlal.u8": "Vector Multiply and Accumulate Long (8 bits Unsigned Integer components) (Always)",
        "VMLAlal.u16": "Vector Multiply and Accumulate Long (16 bits Unsigned Integer components) (Always)",
        "VMLAlal.u32": "Vector Multiply and Accumulate Long (32 bits Unsigned Integer components) (Always)",
        "VMLAlal.i8": "Vector Multiply and Accumulate Long (8 bits Integer components) (Always)",
        "VMLAlal.i16": "Vector Multiply and Accumulate Long (16 bits Integer components) (Always)",
        "VMLAlal.i32": "Vector Multiply and Accumulate Long (32 bits Integer components) (Always)",
        "VMLAlal.f32": "Vector Multiply and Accumulate Long (32 bits Float components) (Always)",
        "VMLAlal.f64": "Vector Multiply and Accumulate Long (64 bits Float components) (Always)",
        "VMLAlal.w.s8": "Vector Multiply and Accumulate Long (8 bits Signed Integer components) (Always)",
        "VMLAlal.w.s16": "Vector Multiply and Accumulate Long (16 bits Signed Integer components) (Always)",
        "VMLAlal.w.s32": "Vector Multiply and Accumulate Long (32 bits Signed Integer components) (Always)",
        "VMLAlal.w.u8": "Vector Multiply and Accumulate Long (8 bits Unsigned Integer components) (Always)",
        "VMLAlal.w.u16": "Vector Multiply and Accumulate Long (16 bits Unsigned Integer components) (Always)",
        "VMLAlal.w.u32": "Vector Multiply and Accumulate Long (32 bits Unsigned Integer components) (Always)",
        "VMLAlal.w.i8": "Vector Multiply and Accumulate Long (8 bits Integer components) (Always)",
        "VMLAlal.w.i16": "Vector Multiply and Accumulate Long (16 bits Integer components) (Always)",
        "VMLAlal.w.i32": "Vector Multiply and Accumulate Long (32 bits Integer components) (Always)",
        "VMLAlal.w.f32": "Vector Multiply and Accumulate Long (32 bits Float components) (Always)",
        "VMLAlal.w.f64": "Vector Multiply and Accumulate Long (64 bits Float components) (Always)",
        "VMLS.s8": "Vector Multiply and Subtract (8 bits Signed Integer components)",
        "VMLS.s16": "Vector Multiply and Subtract (16 bits Signed Integer components)",
        "VMLS.s32": "Vector Multiply and Subtract (32 bits Signed Integer components)",
        "VMLS.u8": "Vector Multiply and Subtract (8 bits Unsigned Integer components)",
        "VMLS.u16": "Vector Multiply and Subtract (16 bits Unsigned Integer components)",
        "VMLS.u32": "Vector Multiply and Subtract (32 bits Unsigned Integer components)",
        "VMLS.i8": "Vector Multiply and Subtract (8 bits Integer components)",
        "VMLS.i16": "Vector Multiply and Subtract (16 bits Integer components)",
        "VMLS.i32": "Vector Multiply and Subtract (32 bits Integer components)",
        "VMLS.f32": "Vector Multiply and Subtract (32 bits Float components)",
        "VMLS.f64": "Vector Multiply and Subtract (64 bits Float components)",
        "VMLS.w.s8": "Vector Multiply and Subtract (8 bits Signed Integer components)",
        "VMLS.w.s16": "Vector Multiply and Subtract (16 bits Signed Integer components)",
        "VMLS.w.s32": "Vector Multiply and Subtract (32 bits Signed Integer components)",
        "VMLS.w.u8": "Vector Multiply and Subtract (8 bits Unsigned Integer components)",
        "VMLS.w.u16": "Vector Multiply and Subtract (16 bits Unsigned Integer components)",
        "VMLS.w.u32": "Vector Multiply and Subtract (32 bits Unsigned Integer components)",
        "VMLS.w.i8": "Vector Multiply and Subtract (8 bits Integer components)",
        "VMLS.w.i16": "Vector Multiply and Subtract (16 bits Integer components)",
        "VMLS.w.i32": "Vector Multiply and Subtract (32 bits Integer components)",
        "VMLS.w.f32": "Vector Multiply and Subtract (32 bits Float components)",
        "VMLS.w.f64": "Vector Multiply and Subtract (64 bits Float components)",
        "VMLSal.s8": "Vector Multiply and Subtract (8 bits Signed Integer components) (Always)",
        "VMLSal.s16": "Vector Multiply and Subtract (16 bits Signed Integer components) (Always)",
        "VMLSal.s32": "Vector Multiply and Subtract (32 bits Signed Integer components) (Always)",
        "VMLSal.u8": "Vector Multiply and Subtract (8 bits Unsigned Integer components) (Always)",
        "VMLSal.u16": "Vector Multiply and Subtract (16 bits Unsigned Integer components) (Always)",
        "VMLSal.u32": "Vector Multiply and Subtract (32 bits Unsigned Integer components) (Always)",
        "VMLSal.i8": "Vector Multiply and Subtract (8 bits Integer components) (Always)",
        "VMLSal.i16": "Vector Multiply and Subtract (16 bits Integer components) (Always)",
        "VMLSal.i32": "Vector Multiply and Subtract (32 bits Integer components) (Always)",
        "VMLSal.f32": "Vector Multiply and Subtract (32 bits Float components) (Always)",
        "VMLSal.f64": "Vector Multiply and Subtract (64 bits Float components) (Always)",
        "VMLSal.w.s8": "Vector Multiply and Subtract (8 bits Signed Integer components) (Always)",
        "VMLSal.w.s16": "Vector Multiply and Subtract (16 bits Signed Integer components) (Always)",
        "VMLSal.w.s32": "Vector Multiply and Subtract (32 bits Signed Integer components) (Always)",
        "VMLSal.w.u8": "Vector Multiply and Subtract (8 bits Unsigned Integer components) (Always)",
        "VMLSal.w.u16": "Vector Multiply and Subtract (16 bits Unsigned Integer components) (Always)",
        "VMLSal.w.u32": "Vector Multiply and Subtract (32 bits Unsigned Integer components) (Always)",
        "VMLSal.w.i8": "Vector Multiply and Subtract (8 bits Integer components) (Always)",
        "VMLSal.w.i16": "Vector Multiply and Subtract (16 bits Integer components) (Always)",
        "VMLSal.w.i32": "Vector Multiply and Subtract (32 bits Integer components) (Always)",
        "VMLSal.w.f32": "Vector Multiply and Subtract (32 bits Float components) (Always)",
        "VMLSal.w.f64": "Vector Multiply and Subtract (64 bits Float components) (Always)",
        "VMLSl.s8": "Vector Multiply and Subtract Long (8 bits Signed Integer components)",
        "VMLSl.s16": "Vector Multiply and Subtract Long (16 bits Signed Integer components)",
        "VMLSl.s32": "Vector Multiply and Subtract Long (32 bits Signed Integer components)",
        "VMLSl.u8": "Vector Multiply and Subtract Long (8 bits Unsigned Integer components)",
        "VMLSl.u16": "Vector Multiply and Subtract Long (16 bits Unsigned Integer components)",
        "VMLSl.u32": "Vector Multiply and Subtract Long (32 bits Unsigned Integer components)",
        "VMLSl.i8": "Vector Multiply and Subtract Long (8 bits Integer components)",
        "VMLSl.i16": "Vector Multiply and Subtract Long (16 bits Integer components)",
        "VMLSl.i32": "Vector Multiply and Subtract Long (32 bits Integer components)",
        "VMLSl.f32": "Vector Multiply and Subtract Long (32 bits Float components)",
        "VMLSl.f64": "Vector Multiply and Subtract Long (64 bits Float components)",
        "VMLSl.w.s8": "Vector Multiply and Subtract Long (8 bits Signed Integer components)",
        "VMLSl.w.s16": "Vector Multiply and Subtract Long (16 bits Signed Integer components)",
        "VMLSl.w.s32": "Vector Multiply and Subtract Long (32 bits Signed Integer components)",
        "VMLSl.w.u8": "Vector Multiply and Subtract Long (8 bits Unsigned Integer components)",
        "VMLSl.w.u16": "Vector Multiply and Subtract Long (16 bits Unsigned Integer components)",
        "VMLSl.w.u32": "Vector Multiply and Subtract Long (32 bits Unsigned Integer components)",
        "VMLSl.w.i8": "Vector Multiply and Subtract Long (8 bits Integer components)",
        "VMLSl.w.i16": "Vector Multiply and Subtract Long (16 bits Integer components)",
        "VMLSl.w.i32": "Vector Multiply and Subtract Long (32 bits Integer components)",
        "VMLSl.w.f32": "Vector Multiply and Subtract Long (32 bits Float components)",
        "VMLSl.w.f64": "Vector Multiply and Subtract Long (64 bits Float components)",
        "VMLSlal.s8": "Vector Multiply and Subtract Long (8 bits Signed Integer components) (Always)",
        "VMLSlal.s16": "Vector Multiply and Subtract Long (16 bits Signed Integer components) (Always)",
        "VMLSlal.s32": "Vector Multiply and Subtract Long (32 bits Signed Integer components) (Always)",
        "VMLSlal.u8": "Vector Multiply and Subtract Long (8 bits Unsigned Integer components) (Always)",
        "VMLSlal.u16": "Vector Multiply and Subtract Long (16 bits Unsigned Integer components) (Always)",
        "VMLSlal.u32": "Vector Multiply and Subtract Long (32 bits Unsigned Integer components) (Always)",
        "VMLSlal.i8": "Vector Multiply and Subtract Long (8 bits Integer components) (Always)",
        "VMLSlal.i16": "Vector Multiply and Subtract Long (16 bits Integer components) (Always)",
        "VMLSlal.i32": "Vector Multiply and Subtract Long (32 bits Integer components) (Always)",
        "VMLSlal.f32": "Vector Multiply and Subtract Long (32 bits Float components) (Always)",
        "VMLSlal.f64": "Vector Multiply and Subtract Long (64 bits Float components) (Always)",
        "VMLSlal.w.s8": "Vector Multiply and Subtract Long (8 bits Signed Integer components) (Always)",
        "VMLSlal.w.s16": "Vector Multiply and Subtract Long (16 bits Signed Integer components) (Always)",
        "VMLSlal.w.s32": "Vector Multiply and Subtract Long (32 bits Signed Integer components) (Always)",
        "VMLSlal.w.u8": "Vector Multiply and Subtract Long (8 bits Unsigned Integer components) (Always)",
        "VMLSlal.w.u16": "Vector Multiply and Subtract Long (16 bits Unsigned Integer components) (Always)",
        "VMLSlal.w.u32": "Vector Multiply and Subtract Long (32 bits Unsigned Integer components) (Always)",
        "VMLSlal.w.i8": "Vector Multiply and Subtract Long (8 bits Integer components) (Always)",
        "VMLSlal.w.i16": "Vector Multiply and Subtract Long (16 bits Integer components) (Always)",
        "VMLSlal.w.i32": "Vector Multiply and Subtract Long (32 bits Integer components) (Always)",
        "VMLSlal.w.f32": "Vector Multiply and Subtract Long (32 bits Float components) (Always)",
        "VMLSlal.w.f64": "Vector Multiply and Subtract Long (64 bits Float components) (Always)"
      }
    },
    "VMOV%{c}%{q}%{dt}": {
      "description": "Vector Move %{dt} %{q} %{c}",
      "variants": {
        "VMOV.i8": "Vector Move (8 bits Integer components)",
        "VMOV.i16": "Vector Move (16 bits Integer components)",
        "VMOV.i32": "Vector Move (32 bits Integer components)",
        "VMOV.i64": "Vector Move (64 bits Integer components)",
        "VMOV.f32": "Vector Move (32 bits Float components)",
        "VMOV.f64": "Vector Move (64 bits Float components)",
        "VMOV.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding)",
        "VMOV.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding)",
        "VMOV.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding)",
        "VMOV.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding)",
        "VMOV.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding)",
        "VMOV.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding)",
        "VMOV.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding)",
        "VMOV.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding)",
        "VMOV.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding)",
        "VMOV.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding)",
        "VMOV.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding)",
        "VMOV.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding)",
        "VMOVeq.i8": "Vector Move (8 bits Integer components) (If APSR.Z == 1 [Equal])",
        "VMOVeq.i16": "Vector Move (16 bits Integer components) (If APSR.Z == 1 [Equal])",
        "VMOVeq.i32": "Vector Move (32 bits Integer components) (If APSR.Z == 1 [Equal])",
        "VMOVeq.i64": "Vector Move (64 bits Integer components) (If APSR.Z == 1 [Equal])",
        "VMOVeq.f32": "Vector Move (32 bits Float components) (If APSR.Z == 1 [Equal])",
        "VMOVeq.f64": "Vector Move (64 bits Float components) (If APSR.Z == 1 [Equal])",
        "VMOVeq.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVeq.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVeq.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVeq.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVeq.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVeq.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVeq.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVeq.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVeq.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVeq.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVeq.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVeq.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VMOVne.i8": "Vector Move (8 bits Integer components) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.i16": "Vector Move (16 bits Integer components) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.i32": "Vector Move (32 bits Integer components) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.i64": "Vector Move (64 bits Integer components) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.f32": "Vector Move (32 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.f64": "Vector Move (64 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVne.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMOVcs.i8": "Vector Move (8 bits Integer components) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.i16": "Vector Move (16 bits Integer components) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.i32": "Vector Move (32 bits Integer components) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.i64": "Vector Move (64 bits Integer components) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.f32": "Vector Move (32 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.f64": "Vector Move (64 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcs.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMOVcc.i8": "Vector Move (8 bits Integer components) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.i16": "Vector Move (16 bits Integer components) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.i32": "Vector Move (32 bits Integer components) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.i64": "Vector Move (64 bits Integer components) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.f32": "Vector Move (32 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.f64": "Vector Move (64 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVcc.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMOVmi.i8": "Vector Move (8 bits Integer components) (If APSR.N == 1 [Minus])",
        "VMOVmi.i16": "Vector Move (16 bits Integer components) (If APSR.N == 1 [Minus])",
        "VMOVmi.i32": "Vector Move (32 bits Integer components) (If APSR.N == 1 [Minus])",
        "VMOVmi.i64": "Vector Move (64 bits Integer components) (If APSR.N == 1 [Minus])",
        "VMOVmi.f32": "Vector Move (32 bits Float components) (If APSR.N == 1 [Minus])",
        "VMOVmi.f64": "Vector Move (64 bits Float components) (If APSR.N == 1 [Minus])",
        "VMOVmi.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVmi.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVmi.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVmi.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVmi.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVmi.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVmi.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVmi.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVmi.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVmi.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVmi.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVmi.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VMOVpl.i8": "Vector Move (8 bits Integer components) (If APSR.N == 0 [Plus])",
        "VMOVpl.i16": "Vector Move (16 bits Integer components) (If APSR.N == 0 [Plus])",
        "VMOVpl.i32": "Vector Move (32 bits Integer components) (If APSR.N == 0 [Plus])",
        "VMOVpl.i64": "Vector Move (64 bits Integer components) (If APSR.N == 0 [Plus])",
        "VMOVpl.f32": "Vector Move (32 bits Float components) (If APSR.N == 0 [Plus])",
        "VMOVpl.f64": "Vector Move (64 bits Float components) (If APSR.N == 0 [Plus])",
        "VMOVpl.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVpl.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVpl.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVpl.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVpl.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVpl.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVpl.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVpl.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVpl.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVpl.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVpl.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVpl.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VMOVvs.i8": "Vector Move (8 bits Integer components) (If APSR.V == 1 [Overflow])",
        "VMOVvs.i16": "Vector Move (16 bits Integer components) (If APSR.V == 1 [Overflow])",
        "VMOVvs.i32": "Vector Move (32 bits Integer components) (If APSR.V == 1 [Overflow])",
        "VMOVvs.i64": "Vector Move (64 bits Integer components) (If APSR.V == 1 [Overflow])",
        "VMOVvs.f32": "Vector Move (32 bits Float components) (If APSR.V == 1 [Overflow])",
        "VMOVvs.f64": "Vector Move (64 bits Float components) (If APSR.V == 1 [Overflow])",
        "VMOVvs.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvs.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvs.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvs.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvs.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvs.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvs.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvs.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvs.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvs.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvs.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvs.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VMOVvc.i8": "Vector Move (8 bits Integer components) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.i16": "Vector Move (16 bits Integer components) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.i32": "Vector Move (32 bits Integer components) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.i64": "Vector Move (64 bits Integer components) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.f32": "Vector Move (32 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.f64": "Vector Move (64 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVvc.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMOVhi.i8": "Vector Move (8 bits Integer components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.i16": "Vector Move (16 bits Integer components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.i32": "Vector Move (32 bits Integer components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.i64": "Vector Move (64 bits Integer components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.f32": "Vector Move (32 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.f64": "Vector Move (64 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVhi.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMOVls.i8": "Vector Move (8 bits Integer components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.i16": "Vector Move (16 bits Integer components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.i32": "Vector Move (32 bits Integer components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.i64": "Vector Move (64 bits Integer components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.f32": "Vector Move (32 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.f64": "Vector Move (64 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVls.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMOVge.i8": "Vector Move (8 bits Integer components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.i16": "Vector Move (16 bits Integer components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.i32": "Vector Move (32 bits Integer components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.i64": "Vector Move (64 bits Integer components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.f32": "Vector Move (32 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.f64": "Vector Move (64 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVge.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMOVlt.i8": "Vector Move (8 bits Integer components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.i16": "Vector Move (16 bits Integer components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.i32": "Vector Move (32 bits Integer components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.i64": "Vector Move (64 bits Integer components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.f32": "Vector Move (32 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.f64": "Vector Move (64 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVlt.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMOVgt.i8": "Vector Move (8 bits Integer components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.i16": "Vector Move (16 bits Integer components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.i32": "Vector Move (32 bits Integer components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.i64": "Vector Move (64 bits Integer components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.f32": "Vector Move (32 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.f64": "Vector Move (64 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVgt.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMOVle.i8": "Vector Move (8 bits Integer components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.i16": "Vector Move (16 bits Integer components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.i32": "Vector Move (32 bits Integer components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.i64": "Vector Move (64 bits Integer components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.f32": "Vector Move (32 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.f64": "Vector Move (64 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVle.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMOVal.i8": "Vector Move (8 bits Integer components) (Always)",
        "VMOVal.i16": "Vector Move (16 bits Integer components) (Always)",
        "VMOVal.i32": "Vector Move (32 bits Integer components) (Always)",
        "VMOVal.i64": "Vector Move (64 bits Integer components) (Always)",
        "VMOVal.f32": "Vector Move (32 bits Float components) (Always)",
        "VMOVal.f64": "Vector Move (64 bits Float components) (Always)",
        "VMOVal.n.i8": "Vector Move (8 bits Integer components) (T 16bits encoding) (Always)",
        "VMOVal.n.i16": "Vector Move (16 bits Integer components) (T 16bits encoding) (Always)",
        "VMOVal.n.i32": "Vector Move (32 bits Integer components) (T 16bits encoding) (Always)",
        "VMOVal.n.i64": "Vector Move (64 bits Integer components) (T 16bits encoding) (Always)",
        "VMOVal.n.f32": "Vector Move (32 bits Float components) (T 16bits encoding) (Always)",
        "VMOVal.n.f64": "Vector Move (64 bits Float components) (T 16bits encoding) (Always)",
        "VMOVal.w.i8": "Vector Move (8 bits Integer components) (T/A 32bits encoding) (Always)",
        "VMOVal.w.i16": "Vector Move (16 bits Integer components) (T/A 32bits encoding) (Always)",
        "VMOVal.w.i32": "Vector Move (32 bits Integer components) (T/A 32bits encoding) (Always)",
        "VMOVal.w.i64": "Vector Move (64 bits Integer components) (T/A 32bits encoding) (Always)",
        "VMOVal.w.f32": "Vector Move (32 bits Float components) (T/A 32bits encoding) (Always)",
        "VMOVal.w.f64": "Vector Move (64 bits Float components) (T/A 32bits encoding) (Always)"
      }
    },
    "VMOVL%{c}%{q}%{dt}": {
      "description": "Vector Move Long %{dt} %{q} %{c}",
      "variants": {
        "VMOVL.s8": "Vector Move Long (8 bits Signed Integer components)",
        "VMOVL.s16": "Vector Move Long (16 bits Signed Integer components)",
        "VMOVL.s32": "Vector Move Long (32 bits Signed Integer components)",
        "VMOVL.u8": "Vector Move Long (8 bits Unsigned Integer components)",
        "VMOVL.u16": "Vector Move Long (16 bits Unsigned Integer components)",
        "VMOVL.u32": "Vector Move Long (32 bits Unsigned Integer components)",
        "VMOVL.w.s8": "Vector Move Long (8 bits Signed Integer components)",
        "VMOVL.w.s16": "Vector Move Long (16 bits Signed Integer components)",
        "VMOVL.w.s32": "Vector Move Long (32 bits Signed Integer components)",
        "VMOVL.w.u8": "Vector Move Long (8 bits Unsigned Integer components)",
        "VMOVL.w.u16": "Vector Move Long (16 bits Unsigned Integer components)",
        "VMOVL.w.u32": "Vector Move Long (32 bits Unsigned Integer components)",
        "VMOVLal.s8": "Vector Move Long (8 bits Signed Integer components) (Always)",
        "VMOVLal.s16": "Vector Move Long (16 bits Signed Integer components) (Always)",
        "VMOVLal.s32": "Vector Move Long (32 bits Signed Integer components) (Always)",
        "VMOVLal.u8": "Vector Move Long (8 bits Unsigned Integer components) (Always)",
        "VMOVLal.u16": "Vector Move Long (16 bits Unsigned Integer components) (Always)",
        "VMOVLal.u32": "Vector Move Long (32 bits Unsigned Integer components) (Always)",
        "VMOVLal.w.s8": "Vector Move Long (8 bits Signed Integer components) (Always)",
        "VMOVLal.w.s16": "Vector Move Long (16 bits Signed Integer components) (Always)",
        "VMOVLal.w.s32": "Vector Move Long (32 bits Signed Integer components) (Always)",
        "VMOVLal.w.u8": "Vector Move Long (8 bits Unsigned Integer components) (Always)",
        "VMOVLal.w.u16": "Vector Move Long (16 bits Unsigned Integer components) (Always)",
        "VMOVLal.w.u32": "Vector Move Long (32 bits Unsigned Integer components) (Always)"
      }
    },
    "VMOVN%{c}%{q}%{dt}": {
      "description": "Vector Move and Narrow %{dt} %{q} %{c}",
      "variants": {
        "VMOVN.i16": "Vector Move and Narrow (16 bits Integer components)",
        "VMOVN.i32": "Vector Move and Narrow (32 bits Integer components)",
        "VMOVN.i64": "Vector Move and Narrow (64 bits Integer components)",
        "VMOVN.w.i16": "Vector Move and Narrow (16 bits Integer components)",
        "VMOVN.w.i32": "Vector Move and Narrow (32 bits Integer components)",
        "VMOVN.w.i64": "Vector Move and Narrow (64 bits Integer components)",
        "VMOVNal.i16": "Vector Move and Narrow (16 bits Integer components) (Always)",
        "VMOVNal.i32": "Vector Move and Narrow (32 bits Integer components) (Always)",
        "VMOVNal.i64": "Vector Move and Narrow (64 bits Integer components) (Always)",
        "VMOVNal.w.i16": "Vector Move and Narrow (16 bits Integer components) (Always)",
        "VMOVNal.w.i32": "Vector Move and Narrow (32 bits Integer components) (Always)",
        "VMOVNal.w.i64": "Vector Move and Narrow (64 bits Integer components) (Always)"
      }
    },
    "VMRS%{c}%{q}": {
      "description": "Vector Move to ARM core register %{q} %{c}",
      "variants": {
        "VMRS": "Vector Move to ARM core register",
        "VMRS.n": "Vector Move to ARM core register (T 16bits encoding)",
        "VMRS.w": "Vector Move to ARM core register (T/A 32bits encoding)",
        "VMRSeq": "Vector Move to ARM core register (If APSR.Z == 1 [Equal])",
        "VMRSeq.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VMRSeq.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VMRSne": "Vector Move to ARM core register (If APSR.Z == 0 [Not Equal])",
        "VMRSne.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMRSne.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMRScs": "Vector Move to ARM core register (If APSR.C == 1 [Carry Set])",
        "VMRScs.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMRScs.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMRScc": "Vector Move to ARM core register (If APSR.C == 0 [Carry Clear])",
        "VMRScc.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMRScc.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMRSmi": "Vector Move to ARM core register (If APSR.N == 1 [Minus])",
        "VMRSmi.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VMRSmi.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VMRSpl": "Vector Move to ARM core register (If APSR.N == 0 [Plus])",
        "VMRSpl.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VMRSpl.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VMRSvs": "Vector Move to ARM core register (If APSR.V == 1 [Overflow])",
        "VMRSvs.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VMRSvs.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VMRSvc": "Vector Move to ARM core register (If APSR.V == 0 [No Overflow])",
        "VMRSvc.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMRSvc.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMRShi": "Vector Move to ARM core register (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMRShi.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMRShi.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMRSls": "Vector Move to ARM core register (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMRSls.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMRSls.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMRSge": "Vector Move to ARM core register (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMRSge.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMRSge.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMRSlt": "Vector Move to ARM core register (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMRSlt.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMRSlt.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMRSgt": "Vector Move to ARM core register (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMRSgt.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMRSgt.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMRSle": "Vector Move to ARM core register (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMRSle.n": "Vector Move to ARM core register (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMRSle.w": "Vector Move to ARM core register (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMRSal": "Vector Move to ARM core register (Always)",
        "VMRSal.n": "Vector Move to ARM core register (T 16bits encoding) (Always)",
        "VMRSal.w": "Vector Move to ARM core register (T/A 32bits encoding) (Always)"
      }
    },
    "VMSR%{c}%{q}": {
      "description": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register %{q} %{c}",
      "variants": {
        "VMSR": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register",
        "VMSR.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding)",
        "VMSR.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding)",
        "VMSReq": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.Z == 1 [Equal])",
        "VMSReq.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VMSReq.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VMSRne": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.Z == 0 [Not Equal])",
        "VMSRne.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMSRne.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VMSRcs": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.C == 1 [Carry Set])",
        "VMSRcs.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMSRcs.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VMSRcc": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.C == 0 [Carry Clear])",
        "VMSRcc.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMSRcc.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VMSRmi": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.N == 1 [Minus])",
        "VMSRmi.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VMSRmi.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VMSRpl": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.N == 0 [Plus])",
        "VMSRpl.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VMSRpl.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VMSRvs": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.V == 1 [Overflow])",
        "VMSRvs.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VMSRvs.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VMSRvc": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.V == 0 [No Overflow])",
        "VMSRvc.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMSRvc.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VMSRhi": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMSRhi.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMSRhi.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VMSRls": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMSRls.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMSRls.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VMSRge": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMSRge.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMSRge.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VMSRlt": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMSRlt.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMSRlt.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VMSRgt": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMSRgt.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMSRgt.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VMSRle": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMSRle.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMSRle.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VMSRal": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (Always)",
        "VMSRal.n": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T 16bits encoding) (Always)",
        "VMSRal.w": "Vector Move to Advanced SIMD and Floating-Point Extension System Register from ARM core register (T/A 32bits encoding) (Always)"
      }
    },
    "VMUL%{c}%{q}%{dt}": {
      "description": "Vector Multiply %{dt} %{q} %{c}",
      "variants": {
        "VMUL.s8": "Vector Multiply (8 bits Signed Integer components)",
        "VMUL.s16": "Vector Multiply (16 bits Signed Integer components)",
        "VMUL.s32": "Vector Multiply (32 bits Signed Integer components)",
        "VMUL.u8": "Vector Multiply (8 bits Unsigned Integer components)",
        "VMUL.u16": "Vector Multiply (16 bits Unsigned Integer components)",
        "VMUL.u32": "Vector Multiply (32 bits Unsigned Integer components)",
        "VMUL.i8": "Vector Multiply (8 bits Integer components)",
        "VMUL.i16": "Vector Multiply (16 bits Integer components)",
        "VMUL.i32": "Vector Multiply (32 bits Integer components)",
        "VMUL.p8": "Vector Multiply",
        "VMUL.f32": "Vector Multiply (32 bits Float components)",
        "VMUL.f64": "Vector Multiply (64 bits Float components)",
        "VMUL.w.s8": "Vector Multiply (8 bits Signed Integer components)",
        "VMUL.w.s16": "Vector Multiply (16 bits Signed Integer components)",
        "VMUL.w.s32": "Vector Multiply (32 bits Signed Integer components)",
        "VMUL.w.u8": "Vector Multiply (8 bits Unsigned Integer components)",
        "VMUL.w.u16": "Vector Multiply (16 bits Unsigned Integer components)",
        "VMUL.w.u32": "Vector Multiply (32 bits Unsigned Integer components)",
        "VMUL.w.i8": "Vector Multiply (8 bits Integer components)",
        "VMUL.w.i16": "Vector Multiply (16 bits Integer components)",
        "VMUL.w.i32": "Vector Multiply (32 bits Integer components)",
        "VMUL.w.p8": "Vector Multiply",
        "VMUL.w.f32": "Vector Multiply (32 bits Float components)",
        "VMUL.w.f64": "Vector Multiply (64 bits Float components)",
        "VMULal.s8": "Vector Multiply (8 bits Signed Integer components) (Always)",
        "VMULal.s16": "Vector Multiply (16 bits Signed Integer components) (Always)",
        "VMULal.s32": "Vector Multiply (32 bits Signed Integer components) (Always)",
        "VMULal.u8": "Vector Multiply (8 bits Unsigned Integer components) (Always)",
        "VMULal.u16": "Vector Multiply (16 bits Unsigned Integer components) (Always)",
        "VMULal.u32": "Vector Multiply (32 bits Unsigned Integer components) (Always)",
        "VMULal.i8": "Vector Multiply (8 bits Integer components) (Always)",
        "VMULal.i16": "Vector Multiply (16 bits Integer components) (Always)",
        "VMULal.i32": "Vector Multiply (32 bits Integer components) (Always)",
        "VMULal.p8": "Vector Multiply (Always)",
        "VMULal.f32": "Vector Multiply (32 bits Float components) (Always)",
        "VMULal.f64": "Vector Multiply (64 bits Float components) (Always)",
        "VMULal.w.s8": "Vector Multiply (8 bits Signed Integer components) (Always)",
        "VMULal.w.s16": "Vector Multiply (16 bits Signed Integer components) (Always)",
        "VMULal.w.s32": "Vector Multiply (32 bits Signed Integer components) (Always)",
        "VMULal.w.u8": "Vector Multiply (8 bits Unsigned Integer components) (Always)",
        "VMULal.w.u16": "Vector Multiply (16 bits Unsigned Integer components) (Always)",
        "VMULal.w.u32": "Vector Multiply (32 bits Unsigned Integer components) (Always)",
        "VMULal.w.i8": "Vector Multiply (8 bits Integer components) (Always)",
        "VMULal.w.i16": "Vector Multiply (16 bits Integer components) (Always)",
        "VMULal.w.i32": "Vector Multiply (32 bits Integer components) (Always)",
        "VMULal.w.p8": "Vector Multiply (Always)",
        "VMULal.w.f32": "Vector Multiply (32 bits Float components) (Always)",
        "VMULal.w.f64": "Vector Multiply (64 bits Float components) (Always)"
      }
    },
    "VMULL%{c}%{q}%{dt}": {
      "description": "Vector Multiply Long %{dt} %{q} %{c}",
      "variants": {
        "VMULL.s8": "Vector Multiply Long (8 bits Signed Integer components)",
        "VMULL.s16": "Vector Multiply Long (16 bits Signed Integer components)",
        "VMULL.s32": "Vector Multiply Long (32 bits Signed Integer components)",
        "VMULL.u8": "Vector Multiply Long (8 bits Unsigned Integer components)",
        "VMULL.u16": "Vector Multiply Long (16 bits Unsigned Integer components)",
        "VMULL.u32": "Vector Multiply Long (32 bits Unsigned Integer components)",
        "VMULL.i8": "Vector Multiply Long (8 bits Integer components)",
        "VMULL.i16": "Vector Multiply Long (16 bits Integer components)",
        "VMULL.i32": "Vector Multiply Long (32 bits Integer components)",
        "VMULL.p8": "Vector Multiply Long",
        "VMULL.f32": "Vector Multiply Long (32 bits Float components)",
        "VMULL.w.s8": "Vector Multiply Long (8 bits Signed Integer components)",
        "VMULL.w.s16": "Vector Multiply Long (16 bits Signed Integer components)",
        "VMULL.w.s32": "Vector Multiply Long (32 bits Signed Integer components)",
        "VMULL.w.u8": "Vector Multiply Long (8 bits Unsigned Integer components)",
        "VMULL.w.u16": "Vector Multiply Long (16 bits Unsigned Integer components)",
        "VMULL.w.u32": "Vector Multiply Long (32 bits Unsigned Integer components)",
        "VMULL.w.i8": "Vector Multiply Long (8 bits Integer components)",
        "VMULL.w.i16": "Vector Multiply Long (16 bits Integer components)",
        "VMULL.w.i32": "Vector Multiply Long (32 bits Integer components)",
        "VMULL.w.p8": "Vector Multiply Long",
        "VMULL.w.f32": "Vector Multiply Long (32 bits Float components)",
        "VMULLal.s8": "Vector Multiply Long (8 bits Signed Integer components) (Always)",
        "VMULLal.s16": "Vector Multiply Long (16 bits Signed Integer components) (Always)",
        "VMULLal.s32": "Vector Multiply Long (32 bits Signed Integer components) (Always)",
        "VMULLal.u8": "Vector Multiply Long (8 bits Unsigned Integer components) (Always)",
        "VMULLal.u16": "Vector Multiply Long (16 bits Unsigned Integer components) (Always)",
        "VMULLal.u32": "Vector Multiply Long (32 bits Unsigned Integer components) (Always)",
        "VMULLal.i8": "Vector Multiply Long (8 bits Integer components) (Always)",
        "VMULLal.i16": "Vector Multiply Long (16 bits Integer components) (Always)",
        "VMULLal.i32": "Vector Multiply Long (32 bits Integer components) (Always)",
        "VMULLal.p8": "Vector Multiply Long (Always)",
        "VMULLal.f32": "Vector Multiply Long (32 bits Float components) (Always)",
        "VMULLal.w.s8": "Vector Multiply Long (8 bits Signed Integer components) (Always)",
        "VMULLal.w.s16": "Vector Multiply Long (16 bits Signed Integer components) (Always)",
        "VMULLal.w.s32": "Vector Multiply Long (32 bits Signed Integer components) (Always)",
        "VMULLal.w.u8": "Vector Multiply Long (8 bits Unsigned Integer components) (Always)",
        "VMULLal.w.u16": "Vector Multiply Long (16 bits Unsigned Integer components) (Always)",
        "VMULLal.w.u32": "Vector Multiply Long (32 bits Unsigned Integer components) (Always)",
        "VMULLal.w.i8": "Vector Multiply Long (8 bits Integer components) (Always)",
        "VMULLal.w.i16": "Vector Multiply Long (16 bits Integer components) (Always)",
        "VMULLal.w.i32": "Vector Multiply Long (32 bits Integer components) (Always)",
        "VMULLal.w.p8": "Vector Multiply Long (Always)",
        "VMULLal.w.f32": "Vector Multiply Long (32 bits Float components) (Always)"
      }
    },
    "VMVN%{c}%{q}%{dt}": {
      "description": "Vector Bitwise NOT %{dt} %{q} %{c}",
      "variants": {
        "VMVNall": "Vector Bitwise NOT",
        "VMVN.wall": "Vector Bitwise NOT",
        "VMVNalall": "Vector Bitwise NOT (Always)",
        "VMVNal.wall": "Vector Bitwise NOT (Always)"
      }
    },
    "VNEG%{c}%{q}%{dt}": {
      "description": "Vector Negate %{dt} %{q} %{c}",
      "variants": {
        "VNEG.s8": "Vector Negate (8 bits Signed Integer components)",
        "VNEG.s16": "Vector Negate (16 bits Signed Integer components)",
        "VNEG.s32": "Vector Negate (32 bits Signed Integer components)",
        "VNEG.f32": "Vector Negate (32 bits Float components)",
        "VNEG.f64": "Vector Negate (64 bits Float components)",
        "VNEG.w.s8": "Vector Negate (8 bits Signed Integer components)",
        "VNEG.w.s16": "Vector Negate (16 bits Signed Integer components)",
        "VNEG.w.s32": "Vector Negate (32 bits Signed Integer components)",
        "VNEG.w.f32": "Vector Negate (32 bits Float components)",
        "VNEG.w.f64": "Vector Negate (64 bits Float components)",
        "VNEGal.s8": "Vector Negate (8 bits Signed Integer components) (Always)",
        "VNEGal.s16": "Vector Negate (16 bits Signed Integer components) (Always)",
        "VNEGal.s32": "Vector Negate (32 bits Signed Integer components) (Always)",
        "VNEGal.f32": "Vector Negate (32 bits Float components) (Always)",
        "VNEGal.f64": "Vector Negate (64 bits Float components) (Always)",
        "VNEGal.w.s8": "Vector Negate (8 bits Signed Integer components) (Always)",
        "VNEGal.w.s16": "Vector Negate (16 bits Signed Integer components) (Always)",
        "VNEGal.w.s32": "Vector Negate (32 bits Signed Integer components) (Always)",
        "VNEGal.w.f32": "Vector Negate (32 bits Float components) (Always)",
        "VNEGal.w.f64": "Vector Negate (64 bits Float components) (Always)"
      }
    },
    "VNML%{operations}%{c}%{q}%{dt}": {
      "description": "Vector Negate Multiply and %{operations} %{dt} %{q} %{c}",
      "variants": {
        "VNMLA.f32": "Vector Negate Multiply and Accumulate (32 bits Float components)",
        "VNMLA.f64": "Vector Negate Multiply and Accumulate (64 bits Float components)",
        "VNMLA.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding)",
        "VNMLA.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding)",
        "VNMLA.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding)",
        "VNMLA.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding)",
        "VNMLAeq.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.Z == 1 [Equal])",
        "VNMLAeq.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.Z == 1 [Equal])",
        "VNMLAeq.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMLAeq.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMLAeq.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMLAeq.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMLAne.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VNMLAne.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VNMLAne.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMLAne.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMLAne.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMLAne.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMLAcs.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VNMLAcs.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VNMLAcs.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMLAcs.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMLAcs.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMLAcs.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMLAcc.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VNMLAcc.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VNMLAcc.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMLAcc.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMLAcc.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMLAcc.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMLAmi.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.N == 1 [Minus])",
        "VNMLAmi.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.N == 1 [Minus])",
        "VNMLAmi.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VNMLAmi.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VNMLAmi.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VNMLAmi.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VNMLApl.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.N == 0 [Plus])",
        "VNMLApl.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.N == 0 [Plus])",
        "VNMLApl.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VNMLApl.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VNMLApl.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VNMLApl.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VNMLAvs.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.V == 1 [Overflow])",
        "VNMLAvs.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.V == 1 [Overflow])",
        "VNMLAvs.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMLAvs.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMLAvs.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMLAvs.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMLAvc.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VNMLAvc.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VNMLAvc.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMLAvc.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMLAvc.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMLAvc.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMLAhi.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLAhi.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLAhi.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLAhi.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLAhi.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLAhi.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLAls.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLAls.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLAls.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLAls.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLAls.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLAls.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLAge.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLAge.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLAge.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLAge.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLAge.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLAge.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLAlt.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLAlt.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLAlt.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLAlt.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLAlt.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLAlt.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLAgt.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLAgt.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLAgt.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLAgt.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLAgt.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLAgt.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLAle.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLAle.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLAle.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLAle.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLAle.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLAle.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLAal.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (Always)",
        "VNMLAal.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (Always)",
        "VNMLAal.n.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T 16bits encoding) (Always)",
        "VNMLAal.n.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T 16bits encoding) (Always)",
        "VNMLAal.w.f32": "Vector Negate Multiply and Accumulate (32 bits Float components) (T/A 32bits encoding) (Always)",
        "VNMLAal.w.f64": "Vector Negate Multiply and Accumulate (64 bits Float components) (T/A 32bits encoding) (Always)",
        "VNMLS.f32": "Vector Negate Multiply and Subtract (32 bits Float components)",
        "VNMLS.f64": "Vector Negate Multiply and Subtract (64 bits Float components)",
        "VNMLS.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding)",
        "VNMLS.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding)",
        "VNMLS.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding)",
        "VNMLS.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding)",
        "VNMLSeq.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.Z == 1 [Equal])",
        "VNMLSeq.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.Z == 1 [Equal])",
        "VNMLSeq.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMLSeq.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMLSeq.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMLSeq.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMLSne.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VNMLSne.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VNMLSne.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMLSne.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMLSne.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMLSne.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMLScs.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VNMLScs.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VNMLScs.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMLScs.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMLScs.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMLScs.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMLScc.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VNMLScc.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VNMLScc.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMLScc.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMLScc.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMLScc.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMLSmi.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.N == 1 [Minus])",
        "VNMLSmi.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.N == 1 [Minus])",
        "VNMLSmi.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VNMLSmi.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VNMLSmi.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VNMLSmi.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VNMLSpl.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.N == 0 [Plus])",
        "VNMLSpl.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.N == 0 [Plus])",
        "VNMLSpl.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VNMLSpl.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VNMLSpl.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VNMLSpl.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VNMLSvs.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.V == 1 [Overflow])",
        "VNMLSvs.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.V == 1 [Overflow])",
        "VNMLSvs.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMLSvs.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMLSvs.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMLSvs.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMLSvc.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VNMLSvc.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VNMLSvc.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMLSvc.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMLSvc.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMLSvc.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMLShi.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLShi.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLShi.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLShi.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLShi.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLShi.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMLSls.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLSls.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLSls.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLSls.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLSls.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLSls.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMLSge.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLSge.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLSge.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLSge.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLSge.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLSge.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMLSlt.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLSlt.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLSlt.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLSlt.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLSlt.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLSlt.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMLSgt.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLSgt.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLSgt.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLSgt.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLSgt.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLSgt.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMLSle.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLSle.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLSle.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLSle.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLSle.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLSle.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMLSal.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (Always)",
        "VNMLSal.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (Always)",
        "VNMLSal.n.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T 16bits encoding) (Always)",
        "VNMLSal.n.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T 16bits encoding) (Always)",
        "VNMLSal.w.f32": "Vector Negate Multiply and Subtract (32 bits Float components) (T/A 32bits encoding) (Always)",
        "VNMLSal.w.f64": "Vector Negate Multiply and Subtract (64 bits Float components) (T/A 32bits encoding) (Always)"
      }
    },
    "VNMUL%{c}%{q}%{dt}": {
      "description": "Vector Negate Multiply %{dt} %{q} %{c}",
      "variants": {
        "VNMUL.f32": "Vector Negate Multiply (32 bits Float components)",
        "VNMUL.f64": "Vector Negate Multiply (64 bits Float components)",
        "VNMUL.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding)",
        "VNMUL.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding)",
        "VNMUL.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding)",
        "VNMUL.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding)",
        "VNMULeq.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.Z == 1 [Equal])",
        "VNMULeq.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.Z == 1 [Equal])",
        "VNMULeq.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMULeq.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMULeq.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMULeq.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VNMULne.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VNMULne.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VNMULne.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMULne.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMULne.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMULne.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VNMULcs.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VNMULcs.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VNMULcs.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMULcs.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMULcs.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMULcs.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VNMULcc.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VNMULcc.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VNMULcc.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMULcc.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMULcc.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMULcc.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VNMULmi.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.N == 1 [Minus])",
        "VNMULmi.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.N == 1 [Minus])",
        "VNMULmi.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VNMULmi.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VNMULmi.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VNMULmi.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VNMULpl.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.N == 0 [Plus])",
        "VNMULpl.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.N == 0 [Plus])",
        "VNMULpl.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VNMULpl.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VNMULpl.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VNMULpl.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VNMULvs.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.V == 1 [Overflow])",
        "VNMULvs.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.V == 1 [Overflow])",
        "VNMULvs.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMULvs.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMULvs.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMULvs.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VNMULvc.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VNMULvc.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VNMULvc.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMULvc.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMULvc.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMULvc.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VNMULhi.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMULhi.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMULhi.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMULhi.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMULhi.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMULhi.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VNMULls.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMULls.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMULls.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMULls.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMULls.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMULls.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VNMULge.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMULge.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMULge.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMULge.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMULge.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMULge.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VNMULlt.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMULlt.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMULlt.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMULlt.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMULlt.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMULlt.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VNMULgt.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMULgt.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMULgt.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMULgt.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMULgt.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMULgt.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VNMULle.f32": "Vector Negate Multiply (32 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMULle.f64": "Vector Negate Multiply (64 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMULle.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMULle.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMULle.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMULle.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VNMULal.f32": "Vector Negate Multiply (32 bits Float components) (Always)",
        "VNMULal.f64": "Vector Negate Multiply (64 bits Float components) (Always)",
        "VNMULal.n.f32": "Vector Negate Multiply (32 bits Float components) (T 16bits encoding) (Always)",
        "VNMULal.n.f64": "Vector Negate Multiply (64 bits Float components) (T 16bits encoding) (Always)",
        "VNMULal.w.f32": "Vector Negate Multiply (32 bits Float components) (T/A 32bits encoding) (Always)",
        "VNMULal.w.f64": "Vector Negate Multiply (64 bits Float components) (T/A 32bits encoding) (Always)"
      }
    },
    "VORN%{c}%{q}%{dt}": {
      "description": "Vector Bitwise OR NOT %{dt} %{q} %{c}",
      "variants": {
        "VORNignored": "Vector Bitwise OR NOT",
        "VORN.wignored": "Vector Bitwise OR NOT",
        "VORNalignored": "Vector Bitwise OR NOT (Always)",
        "VORNal.wignored": "Vector Bitwise OR NOT (Always)"
      }
    },
    "VORR%{c}%{q}%{dt}": {
      "description": "Vector Bitwise OR %{dt} %{q} %{c}",
      "variants": {
        "VORRignored": "Vector Bitwise OR",
        "VORR.wignored": "Vector Bitwise OR",
        "VORRalignored": "Vector Bitwise OR (Always)",
        "VORRal.wignored": "Vector Bitwise OR (Always)"
      }
    },
    "VPADAL%{c}%{q}%{dt}": {
      "description": "Vector Pairwise Add and Accumulate Long %{dt} %{q} %{c}",
      "variants": {
        "VPADAL.s8": "Vector Pairwise Add and Accumulate Long (8 bits Signed Integer components)",
        "VPADAL.s16": "Vector Pairwise Add and Accumulate Long (16 bits Signed Integer components)",
        "VPADAL.s32": "Vector Pairwise Add and Accumulate Long (32 bits Signed Integer components)",
        "VPADAL.u8": "Vector Pairwise Add and Accumulate Long (8 bits Unsigned Integer components)",
        "VPADAL.u16": "Vector Pairwise Add and Accumulate Long (16 bits Unsigned Integer components)",
        "VPADAL.u32": "Vector Pairwise Add and Accumulate Long (32 bits Unsigned Integer components)",
        "VPADAL.w.s8": "Vector Pairwise Add and Accumulate Long (8 bits Signed Integer components)",
        "VPADAL.w.s16": "Vector Pairwise Add and Accumulate Long (16 bits Signed Integer components)",
        "VPADAL.w.s32": "Vector Pairwise Add and Accumulate Long (32 bits Signed Integer components)",
        "VPADAL.w.u8": "Vector Pairwise Add and Accumulate Long (8 bits Unsigned Integer components)",
        "VPADAL.w.u16": "Vector Pairwise Add and Accumulate Long (16 bits Unsigned Integer components)",
        "VPADAL.w.u32": "Vector Pairwise Add and Accumulate Long (32 bits Unsigned Integer components)",
        "VPADALal.s8": "Vector Pairwise Add and Accumulate Long (8 bits Signed Integer components) (Always)",
        "VPADALal.s16": "Vector Pairwise Add and Accumulate Long (16 bits Signed Integer components) (Always)",
        "VPADALal.s32": "Vector Pairwise Add and Accumulate Long (32 bits Signed Integer components) (Always)",
        "VPADALal.u8": "Vector Pairwise Add and Accumulate Long (8 bits Unsigned Integer components) (Always)",
        "VPADALal.u16": "Vector Pairwise Add and Accumulate Long (16 bits Unsigned Integer components) (Always)",
        "VPADALal.u32": "Vector Pairwise Add and Accumulate Long (32 bits Unsigned Integer components) (Always)",
        "VPADALal.w.s8": "Vector Pairwise Add and Accumulate Long (8 bits Signed Integer components) (Always)",
        "VPADALal.w.s16": "Vector Pairwise Add and Accumulate Long (16 bits Signed Integer components) (Always)",
        "VPADALal.w.s32": "Vector Pairwise Add and Accumulate Long (32 bits Signed Integer components) (Always)",
        "VPADALal.w.u8": "Vector Pairwise Add and Accumulate Long (8 bits Unsigned Integer components) (Always)",
        "VPADALal.w.u16": "Vector Pairwise Add and Accumulate Long (16 bits Unsigned Integer components) (Always)",
        "VPADALal.w.u32": "Vector Pairwise Add and Accumulate Long (32 bits Unsigned Integer components) (Always)"
      }
    },
    "VPADD%{c}%{q}%{dt}": {
      "description": "Vector Pairwise Add %{dt} %{q} %{c}",
      "variants": {
        "VPADD.i8": "Vector Pairwise Add (8 bits Integer components)",
        "VPADD.i16": "Vector Pairwise Add (16 bits Integer components)",
        "VPADD.i32": "Vector Pairwise Add (32 bits Integer components)",
        "VPADD.f32": "Vector Pairwise Add (32 bits Float components)",
        "VPADD.w.i8": "Vector Pairwise Add (8 bits Integer components)",
        "VPADD.w.i16": "Vector Pairwise Add (16 bits Integer components)",
        "VPADD.w.i32": "Vector Pairwise Add (32 bits Integer components)",
        "VPADD.w.f32": "Vector Pairwise Add (32 bits Float components)",
        "VPADDal.i8": "Vector Pairwise Add (8 bits Integer components) (Always)",
        "VPADDal.i16": "Vector Pairwise Add (16 bits Integer components) (Always)",
        "VPADDal.i32": "Vector Pairwise Add (32 bits Integer components) (Always)",
        "VPADDal.f32": "Vector Pairwise Add (32 bits Float components) (Always)",
        "VPADDal.w.i8": "Vector Pairwise Add (8 bits Integer components) (Always)",
        "VPADDal.w.i16": "Vector Pairwise Add (16 bits Integer components) (Always)",
        "VPADDal.w.i32": "Vector Pairwise Add (32 bits Integer components) (Always)",
        "VPADDal.w.f32": "Vector Pairwise Add (32 bits Float components) (Always)"
      }
    },
    "VPADDL%{c}%{q}%{dt}": {
      "description": "Vector Pairwise Add Long %{dt} %{q} %{c}",
      "variants": {
        "VPADDL.s8": "Vector Pairwise Add Long (8 bits Signed Integer components)",
        "VPADDL.s16": "Vector Pairwise Add Long (16 bits Signed Integer components)",
        "VPADDL.s32": "Vector Pairwise Add Long (32 bits Signed Integer components)",
        "VPADDL.u8": "Vector Pairwise Add Long (8 bits Unsigned Integer components)",
        "VPADDL.u16": "Vector Pairwise Add Long (16 bits Unsigned Integer components)",
        "VPADDL.u32": "Vector Pairwise Add Long (32 bits Unsigned Integer components)",
        "VPADDL.w.s8": "Vector Pairwise Add Long (8 bits Signed Integer components)",
        "VPADDL.w.s16": "Vector Pairwise Add Long (16 bits Signed Integer components)",
        "VPADDL.w.s32": "Vector Pairwise Add Long (32 bits Signed Integer components)",
        "VPADDL.w.u8": "Vector Pairwise Add Long (8 bits Unsigned Integer components)",
        "VPADDL.w.u16": "Vector Pairwise Add Long (16 bits Unsigned Integer components)",
        "VPADDL.w.u32": "Vector Pairwise Add Long (32 bits Unsigned Integer components)",
        "VPADDLal.s8": "Vector Pairwise Add Long (8 bits Signed Integer components) (Always)",
        "VPADDLal.s16": "Vector Pairwise Add Long (16 bits Signed Integer components) (Always)",
        "VPADDLal.s32": "Vector Pairwise Add Long (32 bits Signed Integer components) (Always)",
        "VPADDLal.u8": "Vector Pairwise Add Long (8 bits Unsigned Integer components) (Always)",
        "VPADDLal.u16": "Vector Pairwise Add Long (16 bits Unsigned Integer components) (Always)",
        "VPADDLal.u32": "Vector Pairwise Add Long (32 bits Unsigned Integer components) (Always)",
        "VPADDLal.w.s8": "Vector Pairwise Add Long (8 bits Signed Integer components) (Always)",
        "VPADDLal.w.s16": "Vector Pairwise Add Long (16 bits Signed Integer components) (Always)",
        "VPADDLal.w.s32": "Vector Pairwise Add Long (32 bits Signed Integer components) (Always)",
        "VPADDLal.w.u8": "Vector Pairwise Add Long (8 bits Unsigned Integer components) (Always)",
        "VPADDLal.w.u16": "Vector Pairwise Add Long (16 bits Unsigned Integer components) (Always)",
        "VPADDLal.w.u32": "Vector Pairwise Add Long (32 bits Unsigned Integer components) (Always)"
      }
    },
    "VP%{operations}%{c}%{q}%{dt}": {
      "description": "Vector Pairwise %{operations} %{dt} %{q} %{c}",
      "variants": {
        "VPMIN.s8": "Vector Pairwise Minimum (8 bits Signed Integer components)",
        "VPMIN.s16": "Vector Pairwise Minimum (16 bits Signed Integer components)",
        "VPMIN.s32": "Vector Pairwise Minimum (32 bits Signed Integer components)",
        "VPMIN.u8": "Vector Pairwise Minimum (8 bits Unsigned Integer components)",
        "VPMIN.u16": "Vector Pairwise Minimum (16 bits Unsigned Integer components)",
        "VPMIN.u32": "Vector Pairwise Minimum (32 bits Unsigned Integer components)",
        "VPMIN.f32": "Vector Pairwise Minimum (32 bits Float components)",
        "VPMIN.w.s8": "Vector Pairwise Minimum (8 bits Signed Integer components)",
        "VPMIN.w.s16": "Vector Pairwise Minimum (16 bits Signed Integer components)",
        "VPMIN.w.s32": "Vector Pairwise Minimum (32 bits Signed Integer components)",
        "VPMIN.w.u8": "Vector Pairwise Minimum (8 bits Unsigned Integer components)",
        "VPMIN.w.u16": "Vector Pairwise Minimum (16 bits Unsigned Integer components)",
        "VPMIN.w.u32": "Vector Pairwise Minimum (32 bits Unsigned Integer components)",
        "VPMIN.w.f32": "Vector Pairwise Minimum (32 bits Float components)",
        "VPMINal.s8": "Vector Pairwise Minimum (8 bits Signed Integer components) (Always)",
        "VPMINal.s16": "Vector Pairwise Minimum (16 bits Signed Integer components) (Always)",
        "VPMINal.s32": "Vector Pairwise Minimum (32 bits Signed Integer components) (Always)",
        "VPMINal.u8": "Vector Pairwise Minimum (8 bits Unsigned Integer components) (Always)",
        "VPMINal.u16": "Vector Pairwise Minimum (16 bits Unsigned Integer components) (Always)",
        "VPMINal.u32": "Vector Pairwise Minimum (32 bits Unsigned Integer components) (Always)",
        "VPMINal.f32": "Vector Pairwise Minimum (32 bits Float components) (Always)",
        "VPMINal.w.s8": "Vector Pairwise Minimum (8 bits Signed Integer components) (Always)",
        "VPMINal.w.s16": "Vector Pairwise Minimum (16 bits Signed Integer components) (Always)",
        "VPMINal.w.s32": "Vector Pairwise Minimum (32 bits Signed Integer components) (Always)",
        "VPMINal.w.u8": "Vector Pairwise Minimum (8 bits Unsigned Integer components) (Always)",
        "VPMINal.w.u16": "Vector Pairwise Minimum (16 bits Unsigned Integer components) (Always)",
        "VPMINal.w.u32": "Vector Pairwise Minimum (32 bits Unsigned Integer components) (Always)",
        "VPMINal.w.f32": "Vector Pairwise Minimum (32 bits Float components) (Always)",
        "VPMAX.s8": "Vector Pairwise Maximum (8 bits Signed Integer components)",
        "VPMAX.s16": "Vector Pairwise Maximum (16 bits Signed Integer components)",
        "VPMAX.s32": "Vector Pairwise Maximum (32 bits Signed Integer components)",
        "VPMAX.u8": "Vector Pairwise Maximum (8 bits Unsigned Integer components)",
        "VPMAX.u16": "Vector Pairwise Maximum (16 bits Unsigned Integer components)",
        "VPMAX.u32": "Vector Pairwise Maximum (32 bits Unsigned Integer components)",
        "VPMAX.f32": "Vector Pairwise Maximum (32 bits Float components)",
        "VPMAX.w.s8": "Vector Pairwise Maximum (8 bits Signed Integer components)",
        "VPMAX.w.s16": "Vector Pairwise Maximum (16 bits Signed Integer components)",
        "VPMAX.w.s32": "Vector Pairwise Maximum (32 bits Signed Integer components)",
        "VPMAX.w.u8": "Vector Pairwise Maximum (8 bits Unsigned Integer components)",
        "VPMAX.w.u16": "Vector Pairwise Maximum (16 bits Unsigned Integer components)",
        "VPMAX.w.u32": "Vector Pairwise Maximum (32 bits Unsigned Integer components)",
        "VPMAX.w.f32": "Vector Pairwise Maximum (32 bits Float components)",
        "VPMAXal.s8": "Vector Pairwise Maximum (8 bits Signed Integer components) (Always)",
        "VPMAXal.s16": "Vector Pairwise Maximum (16 bits Signed Integer components) (Always)",
        "VPMAXal.s32": "Vector Pairwise Maximum (32 bits Signed Integer components) (Always)",
        "VPMAXal.u8": "Vector Pairwise Maximum (8 bits Unsigned Integer components) (Always)",
        "VPMAXal.u16": "Vector Pairwise Maximum (16 bits Unsigned Integer components) (Always)",
        "VPMAXal.u32": "Vector Pairwise Maximum (32 bits Unsigned Integer components) (Always)",
        "VPMAXal.f32": "Vector Pairwise Maximum (32 bits Float components) (Always)",
        "VPMAXal.w.s8": "Vector Pairwise Maximum (8 bits Signed Integer components) (Always)",
        "VPMAXal.w.s16": "Vector Pairwise Maximum (16 bits Signed Integer components) (Always)",
        "VPMAXal.w.s32": "Vector Pairwise Maximum (32 bits Signed Integer components) (Always)",
        "VPMAXal.w.u8": "Vector Pairwise Maximum (8 bits Unsigned Integer components) (Always)",
        "VPMAXal.w.u16": "Vector Pairwise Maximum (16 bits Unsigned Integer components) (Always)",
        "VPMAXal.w.u32": "Vector Pairwise Maximum (32 bits Unsigned Integer components) (Always)",
        "VPMAXal.w.f32": "Vector Pairwise Maximum (32 bits Float components) (Always)"
      }
    },
    "VPOP%{c}%{q}%{vsize}": {
      "description": "Vector Pop multiple registers %{vsize} %{q} %{c}",
      "variants": {
        "VPOP": "Vector Pop multiple registers",
        "VPOP.32": "Vector Pop multiple registers (32 bits components)",
        "VPOP.64": "Vector Pop multiple registers (64 bits components)",
        "VPOP.n": "Vector Pop multiple registers (T 16bits encoding)",
        "VPOP.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding)",
        "VPOP.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding)",
        "VPOP.w": "Vector Pop multiple registers (T/A 32bits encoding)",
        "VPOP.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding)",
        "VPOP.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding)",
        "VPOPeq": "Vector Pop multiple registers (If APSR.Z == 1 [Equal])",
        "VPOPeq.32": "Vector Pop multiple registers (32 bits components) (If APSR.Z == 1 [Equal])",
        "VPOPeq.64": "Vector Pop multiple registers (64 bits components) (If APSR.Z == 1 [Equal])",
        "VPOPeq.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VPOPeq.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VPOPeq.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VPOPeq.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VPOPeq.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VPOPeq.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VPOPne": "Vector Pop multiple registers (If APSR.Z == 0 [Not Equal])",
        "VPOPne.32": "Vector Pop multiple registers (32 bits components) (If APSR.Z == 0 [Not Equal])",
        "VPOPne.64": "Vector Pop multiple registers (64 bits components) (If APSR.Z == 0 [Not Equal])",
        "VPOPne.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPOPne.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPOPne.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPOPne.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPOPne.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPOPne.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPOPcs": "Vector Pop multiple registers (If APSR.C == 1 [Carry Set])",
        "VPOPcs.32": "Vector Pop multiple registers (32 bits components) (If APSR.C == 1 [Carry Set])",
        "VPOPcs.64": "Vector Pop multiple registers (64 bits components) (If APSR.C == 1 [Carry Set])",
        "VPOPcs.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPOPcs.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPOPcs.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPOPcs.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPOPcs.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPOPcs.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPOPcc": "Vector Pop multiple registers (If APSR.C == 0 [Carry Clear])",
        "VPOPcc.32": "Vector Pop multiple registers (32 bits components) (If APSR.C == 0 [Carry Clear])",
        "VPOPcc.64": "Vector Pop multiple registers (64 bits components) (If APSR.C == 0 [Carry Clear])",
        "VPOPcc.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPOPcc.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPOPcc.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPOPcc.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPOPcc.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPOPcc.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPOPmi": "Vector Pop multiple registers (If APSR.N == 1 [Minus])",
        "VPOPmi.32": "Vector Pop multiple registers (32 bits components) (If APSR.N == 1 [Minus])",
        "VPOPmi.64": "Vector Pop multiple registers (64 bits components) (If APSR.N == 1 [Minus])",
        "VPOPmi.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VPOPmi.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VPOPmi.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VPOPmi.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VPOPmi.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VPOPmi.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VPOPpl": "Vector Pop multiple registers (If APSR.N == 0 [Plus])",
        "VPOPpl.32": "Vector Pop multiple registers (32 bits components) (If APSR.N == 0 [Plus])",
        "VPOPpl.64": "Vector Pop multiple registers (64 bits components) (If APSR.N == 0 [Plus])",
        "VPOPpl.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VPOPpl.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VPOPpl.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VPOPpl.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VPOPpl.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VPOPpl.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VPOPvs": "Vector Pop multiple registers (If APSR.V == 1 [Overflow])",
        "VPOPvs.32": "Vector Pop multiple registers (32 bits components) (If APSR.V == 1 [Overflow])",
        "VPOPvs.64": "Vector Pop multiple registers (64 bits components) (If APSR.V == 1 [Overflow])",
        "VPOPvs.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VPOPvs.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VPOPvs.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VPOPvs.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VPOPvs.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VPOPvs.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VPOPvc": "Vector Pop multiple registers (If APSR.V == 0 [No Overflow])",
        "VPOPvc.32": "Vector Pop multiple registers (32 bits components) (If APSR.V == 0 [No Overflow])",
        "VPOPvc.64": "Vector Pop multiple registers (64 bits components) (If APSR.V == 0 [No Overflow])",
        "VPOPvc.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPOPvc.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPOPvc.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPOPvc.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPOPvc.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPOPvc.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPOPhi": "Vector Pop multiple registers (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPOPhi.32": "Vector Pop multiple registers (32 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPOPhi.64": "Vector Pop multiple registers (64 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPOPhi.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPOPhi.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPOPhi.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPOPhi.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPOPhi.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPOPhi.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPOPls": "Vector Pop multiple registers (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPOPls.32": "Vector Pop multiple registers (32 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPOPls.64": "Vector Pop multiple registers (64 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPOPls.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPOPls.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPOPls.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPOPls.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPOPls.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPOPls.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPOPge": "Vector Pop multiple registers (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPOPge.32": "Vector Pop multiple registers (32 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPOPge.64": "Vector Pop multiple registers (64 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPOPge.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPOPge.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPOPge.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPOPge.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPOPge.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPOPge.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPOPlt": "Vector Pop multiple registers (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPOPlt.32": "Vector Pop multiple registers (32 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPOPlt.64": "Vector Pop multiple registers (64 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPOPlt.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPOPlt.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPOPlt.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPOPlt.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPOPlt.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPOPlt.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPOPgt": "Vector Pop multiple registers (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPOPgt.32": "Vector Pop multiple registers (32 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPOPgt.64": "Vector Pop multiple registers (64 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPOPgt.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPOPgt.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPOPgt.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPOPgt.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPOPgt.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPOPgt.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPOPle": "Vector Pop multiple registers (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPOPle.32": "Vector Pop multiple registers (32 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPOPle.64": "Vector Pop multiple registers (64 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPOPle.n": "Vector Pop multiple registers (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPOPle.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPOPle.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPOPle.w": "Vector Pop multiple registers (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPOPle.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPOPle.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPOPal": "Vector Pop multiple registers (Always)",
        "VPOPal.32": "Vector Pop multiple registers (32 bits components) (Always)",
        "VPOPal.64": "Vector Pop multiple registers (64 bits components) (Always)",
        "VPOPal.n": "Vector Pop multiple registers (T 16bits encoding) (Always)",
        "VPOPal.n.32": "Vector Pop multiple registers (32 bits components) (T 16bits encoding) (Always)",
        "VPOPal.n.64": "Vector Pop multiple registers (64 bits components) (T 16bits encoding) (Always)",
        "VPOPal.w": "Vector Pop multiple registers (T/A 32bits encoding) (Always)",
        "VPOPal.w.32": "Vector Pop multiple registers (32 bits components) (T/A 32bits encoding) (Always)",
        "VPOPal.w.64": "Vector Pop multiple registers (64 bits components) (T/A 32bits encoding) (Always)"
      }
    },
    "VPUSH%{c}%{q}%{vsize}": {
      "description": "Vector Push multiple registers %{vsize} %{q} %{c}",
      "variants": {
        "VPUSH": "Vector Push multiple registers",
        "VPUSH.32": "Vector Push multiple registers (32 bits components)",
        "VPUSH.64": "Vector Push multiple registers (64 bits components)",
        "VPUSH.n": "Vector Push multiple registers (T 16bits encoding)",
        "VPUSH.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding)",
        "VPUSH.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding)",
        "VPUSH.w": "Vector Push multiple registers (T/A 32bits encoding)",
        "VPUSH.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding)",
        "VPUSH.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding)",
        "VPUSHeq": "Vector Push multiple registers (If APSR.Z == 1 [Equal])",
        "VPUSHeq.32": "Vector Push multiple registers (32 bits components) (If APSR.Z == 1 [Equal])",
        "VPUSHeq.64": "Vector Push multiple registers (64 bits components) (If APSR.Z == 1 [Equal])",
        "VPUSHeq.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VPUSHeq.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VPUSHeq.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VPUSHeq.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VPUSHeq.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VPUSHeq.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VPUSHne": "Vector Push multiple registers (If APSR.Z == 0 [Not Equal])",
        "VPUSHne.32": "Vector Push multiple registers (32 bits components) (If APSR.Z == 0 [Not Equal])",
        "VPUSHne.64": "Vector Push multiple registers (64 bits components) (If APSR.Z == 0 [Not Equal])",
        "VPUSHne.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPUSHne.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPUSHne.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPUSHne.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPUSHne.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPUSHne.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VPUSHcs": "Vector Push multiple registers (If APSR.C == 1 [Carry Set])",
        "VPUSHcs.32": "Vector Push multiple registers (32 bits components) (If APSR.C == 1 [Carry Set])",
        "VPUSHcs.64": "Vector Push multiple registers (64 bits components) (If APSR.C == 1 [Carry Set])",
        "VPUSHcs.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPUSHcs.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPUSHcs.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPUSHcs.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPUSHcs.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPUSHcs.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VPUSHcc": "Vector Push multiple registers (If APSR.C == 0 [Carry Clear])",
        "VPUSHcc.32": "Vector Push multiple registers (32 bits components) (If APSR.C == 0 [Carry Clear])",
        "VPUSHcc.64": "Vector Push multiple registers (64 bits components) (If APSR.C == 0 [Carry Clear])",
        "VPUSHcc.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPUSHcc.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPUSHcc.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPUSHcc.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPUSHcc.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPUSHcc.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VPUSHmi": "Vector Push multiple registers (If APSR.N == 1 [Minus])",
        "VPUSHmi.32": "Vector Push multiple registers (32 bits components) (If APSR.N == 1 [Minus])",
        "VPUSHmi.64": "Vector Push multiple registers (64 bits components) (If APSR.N == 1 [Minus])",
        "VPUSHmi.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VPUSHmi.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VPUSHmi.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VPUSHmi.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VPUSHmi.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VPUSHmi.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VPUSHpl": "Vector Push multiple registers (If APSR.N == 0 [Plus])",
        "VPUSHpl.32": "Vector Push multiple registers (32 bits components) (If APSR.N == 0 [Plus])",
        "VPUSHpl.64": "Vector Push multiple registers (64 bits components) (If APSR.N == 0 [Plus])",
        "VPUSHpl.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VPUSHpl.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VPUSHpl.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VPUSHpl.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VPUSHpl.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VPUSHpl.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VPUSHvs": "Vector Push multiple registers (If APSR.V == 1 [Overflow])",
        "VPUSHvs.32": "Vector Push multiple registers (32 bits components) (If APSR.V == 1 [Overflow])",
        "VPUSHvs.64": "Vector Push multiple registers (64 bits components) (If APSR.V == 1 [Overflow])",
        "VPUSHvs.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VPUSHvs.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VPUSHvs.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VPUSHvs.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VPUSHvs.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VPUSHvs.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VPUSHvc": "Vector Push multiple registers (If APSR.V == 0 [No Overflow])",
        "VPUSHvc.32": "Vector Push multiple registers (32 bits components) (If APSR.V == 0 [No Overflow])",
        "VPUSHvc.64": "Vector Push multiple registers (64 bits components) (If APSR.V == 0 [No Overflow])",
        "VPUSHvc.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPUSHvc.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPUSHvc.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPUSHvc.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPUSHvc.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPUSHvc.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VPUSHhi": "Vector Push multiple registers (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPUSHhi.32": "Vector Push multiple registers (32 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPUSHhi.64": "Vector Push multiple registers (64 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPUSHhi.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPUSHhi.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPUSHhi.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPUSHhi.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPUSHhi.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPUSHhi.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VPUSHls": "Vector Push multiple registers (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPUSHls.32": "Vector Push multiple registers (32 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPUSHls.64": "Vector Push multiple registers (64 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPUSHls.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPUSHls.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPUSHls.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPUSHls.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPUSHls.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPUSHls.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VPUSHge": "Vector Push multiple registers (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPUSHge.32": "Vector Push multiple registers (32 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPUSHge.64": "Vector Push multiple registers (64 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPUSHge.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPUSHge.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPUSHge.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPUSHge.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPUSHge.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPUSHge.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VPUSHlt": "Vector Push multiple registers (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPUSHlt.32": "Vector Push multiple registers (32 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPUSHlt.64": "Vector Push multiple registers (64 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPUSHlt.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPUSHlt.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPUSHlt.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPUSHlt.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPUSHlt.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPUSHlt.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VPUSHgt": "Vector Push multiple registers (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPUSHgt.32": "Vector Push multiple registers (32 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPUSHgt.64": "Vector Push multiple registers (64 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPUSHgt.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPUSHgt.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPUSHgt.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPUSHgt.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPUSHgt.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPUSHgt.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VPUSHle": "Vector Push multiple registers (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPUSHle.32": "Vector Push multiple registers (32 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPUSHle.64": "Vector Push multiple registers (64 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPUSHle.n": "Vector Push multiple registers (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPUSHle.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPUSHle.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPUSHle.w": "Vector Push multiple registers (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPUSHle.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPUSHle.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VPUSHal": "Vector Push multiple registers (Always)",
        "VPUSHal.32": "Vector Push multiple registers (32 bits components) (Always)",
        "VPUSHal.64": "Vector Push multiple registers (64 bits components) (Always)",
        "VPUSHal.n": "Vector Push multiple registers (T 16bits encoding) (Always)",
        "VPUSHal.n.32": "Vector Push multiple registers (32 bits components) (T 16bits encoding) (Always)",
        "VPUSHal.n.64": "Vector Push multiple registers (64 bits components) (T 16bits encoding) (Always)",
        "VPUSHal.w": "Vector Push multiple registers (T/A 32bits encoding) (Always)",
        "VPUSHal.w.32": "Vector Push multiple registers (32 bits components) (T/A 32bits encoding) (Always)",
        "VPUSHal.w.64": "Vector Push multiple registers (64 bits components) (T/A 32bits encoding) (Always)"
      }
    },
    "VQABS%{c}%{q}%{dt}": {
      "description": "Vector Saturating Absolute %{dt} %{q} %{c}",
      "variants": {
        "VQABS.s16": "Vector Saturating Absolute (16 bits Signed Integer components)",
        "VQABS.s32": "Vector Saturating Absolute (32 bits Signed Integer components)",
        "VQABS.s64": "Vector Saturating Absolute (64 bits Signed Integer components)",
        "VQABS.w.s16": "Vector Saturating Absolute (16 bits Signed Integer components)",
        "VQABS.w.s32": "Vector Saturating Absolute (32 bits Signed Integer components)",
        "VQABS.w.s64": "Vector Saturating Absolute (64 bits Signed Integer components)",
        "VQABSal.s16": "Vector Saturating Absolute (16 bits Signed Integer components) (Always)",
        "VQABSal.s32": "Vector Saturating Absolute (32 bits Signed Integer components) (Always)",
        "VQABSal.s64": "Vector Saturating Absolute (64 bits Signed Integer components) (Always)",
        "VQABSal.w.s16": "Vector Saturating Absolute (16 bits Signed Integer components) (Always)",
        "VQABSal.w.s32": "Vector Saturating Absolute (32 bits Signed Integer components) (Always)",
        "VQABSal.w.s64": "Vector Saturating Absolute (64 bits Signed Integer components) (Always)"
      }
    },
    "VQADD%{c}%{q}%{dt}": {
      "description": "Vector Saturating Add %{dt} %{q} %{c}",
      "variants": {
        "VQADD.s8": "Vector Saturating Add (8 bits Signed Integer components)",
        "VQADD.s16": "Vector Saturating Add (16 bits Signed Integer components)",
        "VQADD.s32": "Vector Saturating Add (32 bits Signed Integer components)",
        "VQADD.s64": "Vector Saturating Add (64 bits Signed Integer components)",
        "VQADD.u8": "Vector Saturating Add (8 bits Unsigned Integer components)",
        "VQADD.u16": "Vector Saturating Add (16 bits Unsigned Integer components)",
        "VQADD.u32": "Vector Saturating Add (32 bits Unsigned Integer components)",
        "VQADD.u64": "Vector Saturating Add (64 bits Unsigned Integer components)",
        "VQADD.w.s8": "Vector Saturating Add (8 bits Signed Integer components)",
        "VQADD.w.s16": "Vector Saturating Add (16 bits Signed Integer components)",
        "VQADD.w.s32": "Vector Saturating Add (32 bits Signed Integer components)",
        "VQADD.w.s64": "Vector Saturating Add (64 bits Signed Integer components)",
        "VQADD.w.u8": "Vector Saturating Add (8 bits Unsigned Integer components)",
        "VQADD.w.u16": "Vector Saturating Add (16 bits Unsigned Integer components)",
        "VQADD.w.u32": "Vector Saturating Add (32 bits Unsigned Integer components)",
        "VQADD.w.u64": "Vector Saturating Add (64 bits Unsigned Integer components)",
        "VQADDal.s8": "Vector Saturating Add (8 bits Signed Integer components) (Always)",
        "VQADDal.s16": "Vector Saturating Add (16 bits Signed Integer components) (Always)",
        "VQADDal.s32": "Vector Saturating Add (32 bits Signed Integer components) (Always)",
        "VQADDal.s64": "Vector Saturating Add (64 bits Signed Integer components) (Always)",
        "VQADDal.u8": "Vector Saturating Add (8 bits Unsigned Integer components) (Always)",
        "VQADDal.u16": "Vector Saturating Add (16 bits Unsigned Integer components) (Always)",
        "VQADDal.u32": "Vector Saturating Add (32 bits Unsigned Integer components) (Always)",
        "VQADDal.u64": "Vector Saturating Add (64 bits Unsigned Integer components) (Always)",
        "VQADDal.w.s8": "Vector Saturating Add (8 bits Signed Integer components) (Always)",
        "VQADDal.w.s16": "Vector Saturating Add (16 bits Signed Integer components) (Always)",
        "VQADDal.w.s32": "Vector Saturating Add (32 bits Signed Integer components) (Always)",
        "VQADDal.w.s64": "Vector Saturating Add (64 bits Signed Integer components) (Always)",
        "VQADDal.w.u8": "Vector Saturating Add (8 bits Unsigned Integer components) (Always)",
        "VQADDal.w.u16": "Vector Saturating Add (16 bits Unsigned Integer components) (Always)",
        "VQADDal.w.u32": "Vector Saturating Add (32 bits Unsigned Integer components) (Always)",
        "VQADDal.w.u64": "Vector Saturating Add (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VQDML%{operations}L%{c}%{q}%{dt}": {
      "description": "Vector Saturating Doubling Multiply %{operations} Long %{dt} %{q} %{c}",
      "variants": {
        "VQDMLAL.s16": "Vector Saturating Doubling Multiply Accumulate Long (16 bits Signed Integer components)",
        "VQDMLAL.s32": "Vector Saturating Doubling Multiply Accumulate Long (32 bits Signed Integer components)",
        "VQDMLAL.w.s16": "Vector Saturating Doubling Multiply Accumulate Long (16 bits Signed Integer components)",
        "VQDMLAL.w.s32": "Vector Saturating Doubling Multiply Accumulate Long (32 bits Signed Integer components)",
        "VQDMLALal.s16": "Vector Saturating Doubling Multiply Accumulate Long (16 bits Signed Integer components) (Always)",
        "VQDMLALal.s32": "Vector Saturating Doubling Multiply Accumulate Long (32 bits Signed Integer components) (Always)",
        "VQDMLALal.w.s16": "Vector Saturating Doubling Multiply Accumulate Long (16 bits Signed Integer components) (Always)",
        "VQDMLALal.w.s32": "Vector Saturating Doubling Multiply Accumulate Long (32 bits Signed Integer components) (Always)",
        "VQDMLSL.s16": "Vector Saturating Doubling Multiply Subtract Long (16 bits Signed Integer components)",
        "VQDMLSL.s32": "Vector Saturating Doubling Multiply Subtract Long (32 bits Signed Integer components)",
        "VQDMLSL.w.s16": "Vector Saturating Doubling Multiply Subtract Long (16 bits Signed Integer components)",
        "VQDMLSL.w.s32": "Vector Saturating Doubling Multiply Subtract Long (32 bits Signed Integer components)",
        "VQDMLSLal.s16": "Vector Saturating Doubling Multiply Subtract Long (16 bits Signed Integer components) (Always)",
        "VQDMLSLal.s32": "Vector Saturating Doubling Multiply Subtract Long (32 bits Signed Integer components) (Always)",
        "VQDMLSLal.w.s16": "Vector Saturating Doubling Multiply Subtract Long (16 bits Signed Integer components) (Always)",
        "VQDMLSLal.w.s32": "Vector Saturating Doubling Multiply Subtract Long (32 bits Signed Integer components) (Always)"
      }
    },
    "VQDMULH%{c}%{q}%{dt}": {
      "description": "Vector Saturating Doubling Multiply Returning High Half %{dt} %{q} %{c}",
      "variants": {
        "VQDMULH.s16": "Vector Saturating Doubling Multiply Returning High Half (16 bits Signed Integer components)",
        "VQDMULH.s32": "Vector Saturating Doubling Multiply Returning High Half (32 bits Signed Integer components)",
        "VQDMULH.w.s16": "Vector Saturating Doubling Multiply Returning High Half (16 bits Signed Integer components)",
        "VQDMULH.w.s32": "Vector Saturating Doubling Multiply Returning High Half (32 bits Signed Integer components)",
        "VQDMULHal.s16": "Vector Saturating Doubling Multiply Returning High Half (16 bits Signed Integer components) (Always)",
        "VQDMULHal.s32": "Vector Saturating Doubling Multiply Returning High Half (32 bits Signed Integer components) (Always)",
        "VQDMULHal.w.s16": "Vector Saturating Doubling Multiply Returning High Half (16 bits Signed Integer components) (Always)",
        "VQDMULHal.w.s32": "Vector Saturating Doubling Multiply Returning High Half (32 bits Signed Integer components) (Always)"
      }
    },
    "VQDMULL%{c}%{q}%{dt}": {
      "description": "Vector Saturating Doubling Multiply Long %{dt} %{q} %{c}",
      "variants": {
        "VQDMULL.s16": "Vector Saturating Doubling Multiply Long (16 bits Signed Integer components)",
        "VQDMULL.s32": "Vector Saturating Doubling Multiply Long (32 bits Signed Integer components)",
        "VQDMULL.w.s16": "Vector Saturating Doubling Multiply Long (16 bits Signed Integer components)",
        "VQDMULL.w.s32": "Vector Saturating Doubling Multiply Long (32 bits Signed Integer components)",
        "VQDMULLal.s16": "Vector Saturating Doubling Multiply Long (16 bits Signed Integer components) (Always)",
        "VQDMULLal.s32": "Vector Saturating Doubling Multiply Long (32 bits Signed Integer components) (Always)",
        "VQDMULLal.w.s16": "Vector Saturating Doubling Multiply Long (16 bits Signed Integer components) (Always)",
        "VQDMULLal.w.s32": "Vector Saturating Doubling Multiply Long (32 bits Signed Integer components) (Always)"
      }
    },
    "VQMOVN%{c}%{q}%{dt}": {
      "description": "Vector Move and Narrow %{dt} %{q} %{c}",
      "variants": {
        "VQMOVN.s16": "Vector Move and Narrow (16 bits Signed Integer components)",
        "VQMOVN.s32": "Vector Move and Narrow (32 bits Signed Integer components)",
        "VQMOVN.s64": "Vector Move and Narrow (64 bits Signed Integer components)",
        "VQMOVN.u16": "Vector Move and Narrow (16 bits Unsigned Integer components)",
        "VQMOVN.u32": "Vector Move and Narrow (32 bits Unsigned Integer components)",
        "VQMOVN.u64": "Vector Move and Narrow (64 bits Unsigned Integer components)",
        "VQMOVN.w.s16": "Vector Move and Narrow (16 bits Signed Integer components)",
        "VQMOVN.w.s32": "Vector Move and Narrow (32 bits Signed Integer components)",
        "VQMOVN.w.s64": "Vector Move and Narrow (64 bits Signed Integer components)",
        "VQMOVN.w.u16": "Vector Move and Narrow (16 bits Unsigned Integer components)",
        "VQMOVN.w.u32": "Vector Move and Narrow (32 bits Unsigned Integer components)",
        "VQMOVN.w.u64": "Vector Move and Narrow (64 bits Unsigned Integer components)",
        "VQMOVNal.s16": "Vector Move and Narrow (16 bits Signed Integer components) (Always)",
        "VQMOVNal.s32": "Vector Move and Narrow (32 bits Signed Integer components) (Always)",
        "VQMOVNal.s64": "Vector Move and Narrow (64 bits Signed Integer components) (Always)",
        "VQMOVNal.u16": "Vector Move and Narrow (16 bits Unsigned Integer components) (Always)",
        "VQMOVNal.u32": "Vector Move and Narrow (32 bits Unsigned Integer components) (Always)",
        "VQMOVNal.u64": "Vector Move and Narrow (64 bits Unsigned Integer components) (Always)",
        "VQMOVNal.w.s16": "Vector Move and Narrow (16 bits Signed Integer components) (Always)",
        "VQMOVNal.w.s32": "Vector Move and Narrow (32 bits Signed Integer components) (Always)",
        "VQMOVNal.w.s64": "Vector Move and Narrow (64 bits Signed Integer components) (Always)",
        "VQMOVNal.w.u16": "Vector Move and Narrow (16 bits Unsigned Integer components) (Always)",
        "VQMOVNal.w.u32": "Vector Move and Narrow (32 bits Unsigned Integer components) (Always)",
        "VQMOVNal.w.u64": "Vector Move and Narrow (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VQMOVUN%{c}%{q}%{dt}": {
      "description": "Vector Move Unsigned and Narrow %{dt} %{q} %{c}",
      "variants": {
        "VQMOVUN.s16": "Vector Move Unsigned and Narrow (16 bits Signed Integer components)",
        "VQMOVUN.s32": "Vector Move Unsigned and Narrow (32 bits Signed Integer components)",
        "VQMOVUN.s64": "Vector Move Unsigned and Narrow (64 bits Signed Integer components)",
        "VQMOVUN.w.s16": "Vector Move Unsigned and Narrow (16 bits Signed Integer components)",
        "VQMOVUN.w.s32": "Vector Move Unsigned and Narrow (32 bits Signed Integer components)",
        "VQMOVUN.w.s64": "Vector Move Unsigned and Narrow (64 bits Signed Integer components)",
        "VQMOVUNal.s16": "Vector Move Unsigned and Narrow (16 bits Signed Integer components) (Always)",
        "VQMOVUNal.s32": "Vector Move Unsigned and Narrow (32 bits Signed Integer components) (Always)",
        "VQMOVUNal.s64": "Vector Move Unsigned and Narrow (64 bits Signed Integer components) (Always)",
        "VQMOVUNal.w.s16": "Vector Move Unsigned and Narrow (16 bits Signed Integer components) (Always)",
        "VQMOVUNal.w.s32": "Vector Move Unsigned and Narrow (32 bits Signed Integer components) (Always)",
        "VQMOVUNal.w.s64": "Vector Move Unsigned and Narrow (64 bits Signed Integer components) (Always)"
      }
    },
    "VQNEG%{c}%{q}%{dt}": {
      "description": "Vector Saturate Negate %{dt} %{q} %{c}",
      "variants": {
        "VQNEG.s16": "Vector Saturate Negate (16 bits Signed Integer components)",
        "VQNEG.s32": "Vector Saturate Negate (32 bits Signed Integer components)",
        "VQNEG.s64": "Vector Saturate Negate (64 bits Signed Integer components)",
        "VQNEG.w.s16": "Vector Saturate Negate (16 bits Signed Integer components)",
        "VQNEG.w.s32": "Vector Saturate Negate (32 bits Signed Integer components)",
        "VQNEG.w.s64": "Vector Saturate Negate (64 bits Signed Integer components)",
        "VQNEGal.s16": "Vector Saturate Negate (16 bits Signed Integer components) (Always)",
        "VQNEGal.s32": "Vector Saturate Negate (32 bits Signed Integer components) (Always)",
        "VQNEGal.s64": "Vector Saturate Negate (64 bits Signed Integer components) (Always)",
        "VQNEGal.w.s16": "Vector Saturate Negate (16 bits Signed Integer components) (Always)",
        "VQNEGal.w.s32": "Vector Saturate Negate (32 bits Signed Integer components) (Always)",
        "VQNEGal.w.s64": "Vector Saturate Negate (64 bits Signed Integer components) (Always)"
      }
    },
    "VQRDMULH%{c}%{q}%{dt}": {
      "description": "Vector Saturating Rounding Doubling Multiply Returning High Half %{dt} %{q} %{c}",
      "variants": {
        "VQRDMULH.s16": "Vector Saturating Rounding Doubling Multiply Returning High Half (16 bits Signed Integer components)",
        "VQRDMULH.s32": "Vector Saturating Rounding Doubling Multiply Returning High Half (32 bits Signed Integer components)",
        "VQRDMULH.w.s16": "Vector Saturating Rounding Doubling Multiply Returning High Half (16 bits Signed Integer components)",
        "VQRDMULH.w.s32": "Vector Saturating Rounding Doubling Multiply Returning High Half (32 bits Signed Integer components)",
        "VQRDMULHal.s16": "Vector Saturating Rounding Doubling Multiply Returning High Half (16 bits Signed Integer components) (Always)",
        "VQRDMULHal.s32": "Vector Saturating Rounding Doubling Multiply Returning High Half (32 bits Signed Integer components) (Always)",
        "VQRDMULHal.w.s16": "Vector Saturating Rounding Doubling Multiply Returning High Half (16 bits Signed Integer components) (Always)",
        "VQRDMULHal.w.s32": "Vector Saturating Rounding Doubling Multiply Returning High Half (32 bits Signed Integer components) (Always)"
      }
    },
    "VQRSHL%{c}%{q}%{dt}": {
      "description": "Vector Saturating Rounding Shift Left %{dt} %{q} %{c}",
      "variants": {
        "VQRSHL.s8": "Vector Saturating Rounding Shift Left (8 bits Signed Integer components)",
        "VQRSHL.s16": "Vector Saturating Rounding Shift Left (16 bits Signed Integer components)",
        "VQRSHL.s32": "Vector Saturating Rounding Shift Left (32 bits Signed Integer components)",
        "VQRSHL.s64": "Vector Saturating Rounding Shift Left (64 bits Signed Integer components)",
        "VQRSHL.u8": "Vector Saturating Rounding Shift Left (8 bits Unsigned Integer components)",
        "VQRSHL.u16": "Vector Saturating Rounding Shift Left (16 bits Unsigned Integer components)",
        "VQRSHL.u32": "Vector Saturating Rounding Shift Left (32 bits Unsigned Integer components)",
        "VQRSHL.u64": "Vector Saturating Rounding Shift Left (64 bits Unsigned Integer components)",
        "VQRSHL.w.s8": "Vector Saturating Rounding Shift Left (8 bits Signed Integer components)",
        "VQRSHL.w.s16": "Vector Saturating Rounding Shift Left (16 bits Signed Integer components)",
        "VQRSHL.w.s32": "Vector Saturating Rounding Shift Left (32 bits Signed Integer components)",
        "VQRSHL.w.s64": "Vector Saturating Rounding Shift Left (64 bits Signed Integer components)",
        "VQRSHL.w.u8": "Vector Saturating Rounding Shift Left (8 bits Unsigned Integer components)",
        "VQRSHL.w.u16": "Vector Saturating Rounding Shift Left (16 bits Unsigned Integer components)",
        "VQRSHL.w.u32": "Vector Saturating Rounding Shift Left (32 bits Unsigned Integer components)",
        "VQRSHL.w.u64": "Vector Saturating Rounding Shift Left (64 bits Unsigned Integer components)",
        "VQRSHLal.s8": "Vector Saturating Rounding Shift Left (8 bits Signed Integer components) (Always)",
        "VQRSHLal.s16": "Vector Saturating Rounding Shift Left (16 bits Signed Integer components) (Always)",
        "VQRSHLal.s32": "Vector Saturating Rounding Shift Left (32 bits Signed Integer components) (Always)",
        "VQRSHLal.s64": "Vector Saturating Rounding Shift Left (64 bits Signed Integer components) (Always)",
        "VQRSHLal.u8": "Vector Saturating Rounding Shift Left (8 bits Unsigned Integer components) (Always)",
        "VQRSHLal.u16": "Vector Saturating Rounding Shift Left (16 bits Unsigned Integer components) (Always)",
        "VQRSHLal.u32": "Vector Saturating Rounding Shift Left (32 bits Unsigned Integer components) (Always)",
        "VQRSHLal.u64": "Vector Saturating Rounding Shift Left (64 bits Unsigned Integer components) (Always)",
        "VQRSHLal.w.s8": "Vector Saturating Rounding Shift Left (8 bits Signed Integer components) (Always)",
        "VQRSHLal.w.s16": "Vector Saturating Rounding Shift Left (16 bits Signed Integer components) (Always)",
        "VQRSHLal.w.s32": "Vector Saturating Rounding Shift Left (32 bits Signed Integer components) (Always)",
        "VQRSHLal.w.s64": "Vector Saturating Rounding Shift Left (64 bits Signed Integer components) (Always)",
        "VQRSHLal.w.u8": "Vector Saturating Rounding Shift Left (8 bits Unsigned Integer components) (Always)",
        "VQRSHLal.w.u16": "Vector Saturating Rounding Shift Left (16 bits Unsigned Integer components) (Always)",
        "VQRSHLal.w.u32": "Vector Saturating Rounding Shift Left (32 bits Unsigned Integer components) (Always)",
        "VQRSHLal.w.u64": "Vector Saturating Rounding Shift Left (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VQRSHRN%{c}%{q}%{dt}": {
      "description": "Vector Saturating Rounding Shift Right Narrow %{dt} %{q} %{c}",
      "variants": {
        "VQRSHRN.s16": "Vector Saturating Rounding Shift Right Narrow (16 bits Signed Integer components)",
        "VQRSHRN.s32": "Vector Saturating Rounding Shift Right Narrow (32 bits Signed Integer components)",
        "VQRSHRN.s64": "Vector Saturating Rounding Shift Right Narrow (64 bits Signed Integer components)",
        "VQRSHRN.u16": "Vector Saturating Rounding Shift Right Narrow (16 bits Unsigned Integer components)",
        "VQRSHRN.u32": "Vector Saturating Rounding Shift Right Narrow (32 bits Unsigned Integer components)",
        "VQRSHRN.u64": "Vector Saturating Rounding Shift Right Narrow (64 bits Unsigned Integer components)",
        "VQRSHRN.w.s16": "Vector Saturating Rounding Shift Right Narrow (16 bits Signed Integer components)",
        "VQRSHRN.w.s32": "Vector Saturating Rounding Shift Right Narrow (32 bits Signed Integer components)",
        "VQRSHRN.w.s64": "Vector Saturating Rounding Shift Right Narrow (64 bits Signed Integer components)",
        "VQRSHRN.w.u16": "Vector Saturating Rounding Shift Right Narrow (16 bits Unsigned Integer components)",
        "VQRSHRN.w.u32": "Vector Saturating Rounding Shift Right Narrow (32 bits Unsigned Integer components)",
        "VQRSHRN.w.u64": "Vector Saturating Rounding Shift Right Narrow (64 bits Unsigned Integer components)",
        "VQRSHRNal.s16": "Vector Saturating Rounding Shift Right Narrow (16 bits Signed Integer components) (Always)",
        "VQRSHRNal.s32": "Vector Saturating Rounding Shift Right Narrow (32 bits Signed Integer components) (Always)",
        "VQRSHRNal.s64": "Vector Saturating Rounding Shift Right Narrow (64 bits Signed Integer components) (Always)",
        "VQRSHRNal.u16": "Vector Saturating Rounding Shift Right Narrow (16 bits Unsigned Integer components) (Always)",
        "VQRSHRNal.u32": "Vector Saturating Rounding Shift Right Narrow (32 bits Unsigned Integer components) (Always)",
        "VQRSHRNal.u64": "Vector Saturating Rounding Shift Right Narrow (64 bits Unsigned Integer components) (Always)",
        "VQRSHRNal.w.s16": "Vector Saturating Rounding Shift Right Narrow (16 bits Signed Integer components) (Always)",
        "VQRSHRNal.w.s32": "Vector Saturating Rounding Shift Right Narrow (32 bits Signed Integer components) (Always)",
        "VQRSHRNal.w.s64": "Vector Saturating Rounding Shift Right Narrow (64 bits Signed Integer components) (Always)",
        "VQRSHRNal.w.u16": "Vector Saturating Rounding Shift Right Narrow (16 bits Unsigned Integer components) (Always)",
        "VQRSHRNal.w.u32": "Vector Saturating Rounding Shift Right Narrow (32 bits Unsigned Integer components) (Always)",
        "VQRSHRNal.w.u64": "Vector Saturating Rounding Shift Right Narrow (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VQRSHRUN%{c}%{q}%{dt}": {
      "description": "Vector Saturating Rounding Shift Right Unsigned Narrow %{dt} %{q} %{c}",
      "variants": {
        "VQRSHRUN.s16": "Vector Saturating Rounding Shift Right Unsigned Narrow (16 bits Signed Integer components)",
        "VQRSHRUN.s32": "Vector Saturating Rounding Shift Right Unsigned Narrow (32 bits Signed Integer components)",
        "VQRSHRUN.s64": "Vector Saturating Rounding Shift Right Unsigned Narrow (64 bits Signed Integer components)",
        "VQRSHRUN.w.s16": "Vector Saturating Rounding Shift Right Unsigned Narrow (16 bits Signed Integer components)",
        "VQRSHRUN.w.s32": "Vector Saturating Rounding Shift Right Unsigned Narrow (32 bits Signed Integer components)",
        "VQRSHRUN.w.s64": "Vector Saturating Rounding Shift Right Unsigned Narrow (64 bits Signed Integer components)",
        "VQRSHRUNal.s16": "Vector Saturating Rounding Shift Right Unsigned Narrow (16 bits Signed Integer components) (Always)",
        "VQRSHRUNal.s32": "Vector Saturating Rounding Shift Right Unsigned Narrow (32 bits Signed Integer components) (Always)",
        "VQRSHRUNal.s64": "Vector Saturating Rounding Shift Right Unsigned Narrow (64 bits Signed Integer components) (Always)",
        "VQRSHRUNal.w.s16": "Vector Saturating Rounding Shift Right Unsigned Narrow (16 bits Signed Integer components) (Always)",
        "VQRSHRUNal.w.s32": "Vector Saturating Rounding Shift Right Unsigned Narrow (32 bits Signed Integer components) (Always)",
        "VQRSHRUNal.w.s64": "Vector Saturating Rounding Shift Right Unsigned Narrow (64 bits Signed Integer components) (Always)"
      }
    },
    "VQSHL%{c}%{q}%{dt}": {
      "description": "Vector Saturating Shift Left %{dt} %{q} %{c}",
      "variants": {
        "VQSHL.s8": "Vector Saturating Shift Left (8 bits Signed Integer components)",
        "VQSHL.s16": "Vector Saturating Shift Left (16 bits Signed Integer components)",
        "VQSHL.s32": "Vector Saturating Shift Left (32 bits Signed Integer components)",
        "VQSHL.s64": "Vector Saturating Shift Left (64 bits Signed Integer components)",
        "VQSHL.u8": "Vector Saturating Shift Left (8 bits Unsigned Integer components)",
        "VQSHL.u16": "Vector Saturating Shift Left (16 bits Unsigned Integer components)",
        "VQSHL.u32": "Vector Saturating Shift Left (32 bits Unsigned Integer components)",
        "VQSHL.u64": "Vector Saturating Shift Left (64 bits Unsigned Integer components)",
        "VQSHL.w.s8": "Vector Saturating Shift Left (8 bits Signed Integer components)",
        "VQSHL.w.s16": "Vector Saturating Shift Left (16 bits Signed Integer components)",
        "VQSHL.w.s32": "Vector Saturating Shift Left (32 bits Signed Integer components)",
        "VQSHL.w.s64": "Vector Saturating Shift Left (64 bits Signed Integer components)",
        "VQSHL.w.u8": "Vector Saturating Shift Left (8 bits Unsigned Integer components)",
        "VQSHL.w.u16": "Vector Saturating Shift Left (16 bits Unsigned Integer components)",
        "VQSHL.w.u32": "Vector Saturating Shift Left (32 bits Unsigned Integer components)",
        "VQSHL.w.u64": "Vector Saturating Shift Left (64 bits Unsigned Integer components)",
        "VQSHLal.s8": "Vector Saturating Shift Left (8 bits Signed Integer components) (Always)",
        "VQSHLal.s16": "Vector Saturating Shift Left (16 bits Signed Integer components) (Always)",
        "VQSHLal.s32": "Vector Saturating Shift Left (32 bits Signed Integer components) (Always)",
        "VQSHLal.s64": "Vector Saturating Shift Left (64 bits Signed Integer components) (Always)",
        "VQSHLal.u8": "Vector Saturating Shift Left (8 bits Unsigned Integer components) (Always)",
        "VQSHLal.u16": "Vector Saturating Shift Left (16 bits Unsigned Integer components) (Always)",
        "VQSHLal.u32": "Vector Saturating Shift Left (32 bits Unsigned Integer components) (Always)",
        "VQSHLal.u64": "Vector Saturating Shift Left (64 bits Unsigned Integer components) (Always)",
        "VQSHLal.w.s8": "Vector Saturating Shift Left (8 bits Signed Integer components) (Always)",
        "VQSHLal.w.s16": "Vector Saturating Shift Left (16 bits Signed Integer components) (Always)",
        "VQSHLal.w.s32": "Vector Saturating Shift Left (32 bits Signed Integer components) (Always)",
        "VQSHLal.w.s64": "Vector Saturating Shift Left (64 bits Signed Integer components) (Always)",
        "VQSHLal.w.u8": "Vector Saturating Shift Left (8 bits Unsigned Integer components) (Always)",
        "VQSHLal.w.u16": "Vector Saturating Shift Left (16 bits Unsigned Integer components) (Always)",
        "VQSHLal.w.u32": "Vector Saturating Shift Left (32 bits Unsigned Integer components) (Always)",
        "VQSHLal.w.u64": "Vector Saturating Shift Left (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VQSHLU%{c}%{q}%{dt}": {
      "description": "Vector Saturating Shift Left Unsigned %{dt} %{q} %{c}",
      "variants": {
        "VQSHLU.s8": "Vector Saturating Shift Left Unsigned (8 bits Signed Integer components)",
        "VQSHLU.s16": "Vector Saturating Shift Left Unsigned (16 bits Signed Integer components)",
        "VQSHLU.s32": "Vector Saturating Shift Left Unsigned (32 bits Signed Integer components)",
        "VQSHLU.s64": "Vector Saturating Shift Left Unsigned (64 bits Signed Integer components)",
        "VQSHLU.w.s8": "Vector Saturating Shift Left Unsigned (8 bits Signed Integer components)",
        "VQSHLU.w.s16": "Vector Saturating Shift Left Unsigned (16 bits Signed Integer components)",
        "VQSHLU.w.s32": "Vector Saturating Shift Left Unsigned (32 bits Signed Integer components)",
        "VQSHLU.w.s64": "Vector Saturating Shift Left Unsigned (64 bits Signed Integer components)",
        "VQSHLUal.s8": "Vector Saturating Shift Left Unsigned (8 bits Signed Integer components) (Always)",
        "VQSHLUal.s16": "Vector Saturating Shift Left Unsigned (16 bits Signed Integer components) (Always)",
        "VQSHLUal.s32": "Vector Saturating Shift Left Unsigned (32 bits Signed Integer components) (Always)",
        "VQSHLUal.s64": "Vector Saturating Shift Left Unsigned (64 bits Signed Integer components) (Always)",
        "VQSHLUal.w.s8": "Vector Saturating Shift Left Unsigned (8 bits Signed Integer components) (Always)",
        "VQSHLUal.w.s16": "Vector Saturating Shift Left Unsigned (16 bits Signed Integer components) (Always)",
        "VQSHLUal.w.s32": "Vector Saturating Shift Left Unsigned (32 bits Signed Integer components) (Always)",
        "VQSHLUal.w.s64": "Vector Saturating Shift Left Unsigned (64 bits Signed Integer components) (Always)"
      }
    },
    "VQSHRN%{c}%{q}%{dt}": {
      "description": "Vector Saturating Shift Right Narrow %{dt} %{q} %{c}",
      "variants": {
        "VQSHRN.s16": "Vector Saturating Shift Right Narrow (16 bits Signed Integer components)",
        "VQSHRN.s32": "Vector Saturating Shift Right Narrow (32 bits Signed Integer components)",
        "VQSHRN.s64": "Vector Saturating Shift Right Narrow (64 bits Signed Integer components)",
        "VQSHRN.u16": "Vector Saturating Shift Right Narrow (16 bits Unsigned Integer components)",
        "VQSHRN.u32": "Vector Saturating Shift Right Narrow (32 bits Unsigned Integer components)",
        "VQSHRN.u64": "Vector Saturating Shift Right Narrow (64 bits Unsigned Integer components)",
        "VQSHRN.w.s16": "Vector Saturating Shift Right Narrow (16 bits Signed Integer components)",
        "VQSHRN.w.s32": "Vector Saturating Shift Right Narrow (32 bits Signed Integer components)",
        "VQSHRN.w.s64": "Vector Saturating Shift Right Narrow (64 bits Signed Integer components)",
        "VQSHRN.w.u16": "Vector Saturating Shift Right Narrow (16 bits Unsigned Integer components)",
        "VQSHRN.w.u32": "Vector Saturating Shift Right Narrow (32 bits Unsigned Integer components)",
        "VQSHRN.w.u64": "Vector Saturating Shift Right Narrow (64 bits Unsigned Integer components)",
        "VQSHRNal.s16": "Vector Saturating Shift Right Narrow (16 bits Signed Integer components) (Always)",
        "VQSHRNal.s32": "Vector Saturating Shift Right Narrow (32 bits Signed Integer components) (Always)",
        "VQSHRNal.s64": "Vector Saturating Shift Right Narrow (64 bits Signed Integer components) (Always)",
        "VQSHRNal.u16": "Vector Saturating Shift Right Narrow (16 bits Unsigned Integer components) (Always)",
        "VQSHRNal.u32": "Vector Saturating Shift Right Narrow (32 bits Unsigned Integer components) (Always)",
        "VQSHRNal.u64": "Vector Saturating Shift Right Narrow (64 bits Unsigned Integer components) (Always)",
        "VQSHRNal.w.s16": "Vector Saturating Shift Right Narrow (16 bits Signed Integer components) (Always)",
        "VQSHRNal.w.s32": "Vector Saturating Shift Right Narrow (32 bits Signed Integer components) (Always)",
        "VQSHRNal.w.s64": "Vector Saturating Shift Right Narrow (64 bits Signed Integer components) (Always)",
        "VQSHRNal.w.u16": "Vector Saturating Shift Right Narrow (16 bits Unsigned Integer components) (Always)",
        "VQSHRNal.w.u32": "Vector Saturating Shift Right Narrow (32 bits Unsigned Integer components) (Always)",
        "VQSHRNal.w.u64": "Vector Saturating Shift Right Narrow (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VQSHRUN%{c}%{q}%{dt}": {
      "description": "Vector Saturating Shift Right Unsigned Narrow %{dt} %{q} %{c}",
      "variants": {
        "VQSHRUN.s8": "Vector Saturating Shift Right Unsigned Narrow (8 bits Signed Integer components)",
        "VQSHRUN.s16": "Vector Saturating Shift Right Unsigned Narrow (16 bits Signed Integer components)",
        "VQSHRUN.s32": "Vector Saturating Shift Right Unsigned Narrow (32 bits Signed Integer components)",
        "VQSHRUN.s64": "Vector Saturating Shift Right Unsigned Narrow (64 bits Signed Integer components)",
        "VQSHRUN.w.s8": "Vector Saturating Shift Right Unsigned Narrow (8 bits Signed Integer components)",
        "VQSHRUN.w.s16": "Vector Saturating Shift Right Unsigned Narrow (16 bits Signed Integer components)",
        "VQSHRUN.w.s32": "Vector Saturating Shift Right Unsigned Narrow (32 bits Signed Integer components)",
        "VQSHRUN.w.s64": "Vector Saturating Shift Right Unsigned Narrow (64 bits Signed Integer components)",
        "VQSHRUNal.s8": "Vector Saturating Shift Right Unsigned Narrow (8 bits Signed Integer components) (Always)",
        "VQSHRUNal.s16": "Vector Saturating Shift Right Unsigned Narrow (16 bits Signed Integer components) (Always)",
        "VQSHRUNal.s32": "Vector Saturating Shift Right Unsigned Narrow (32 bits Signed Integer components) (Always)",
        "VQSHRUNal.s64": "Vector Saturating Shift Right Unsigned Narrow (64 bits Signed Integer components) (Always)",
        "VQSHRUNal.w.s8": "Vector Saturating Shift Right Unsigned Narrow (8 bits Signed Integer components) (Always)",
        "VQSHRUNal.w.s16": "Vector Saturating Shift Right Unsigned Narrow (16 bits Signed Integer components) (Always)",
        "VQSHRUNal.w.s32": "Vector Saturating Shift Right Unsigned Narrow (32 bits Signed Integer components) (Always)",
        "VQSHRUNal.w.s64": "Vector Saturating Shift Right Unsigned Narrow (64 bits Signed Integer components) (Always)"
      }
    },
    "VQSUB%{c}%{q}%{dt}": {
      "description": "Vector Saturating Subtract %{dt} %{q} %{c}",
      "variants": {
        "VQSUB.s8": "Vector Saturating Subtract (8 bits Signed Integer components)",
        "VQSUB.s16": "Vector Saturating Subtract (16 bits Signed Integer components)",
        "VQSUB.s32": "Vector Saturating Subtract (32 bits Signed Integer components)",
        "VQSUB.s64": "Vector Saturating Subtract (64 bits Signed Integer components)",
        "VQSUB.u8": "Vector Saturating Subtract (8 bits Unsigned Integer components)",
        "VQSUB.u16": "Vector Saturating Subtract (16 bits Unsigned Integer components)",
        "VQSUB.u32": "Vector Saturating Subtract (32 bits Unsigned Integer components)",
        "VQSUB.u64": "Vector Saturating Subtract (64 bits Unsigned Integer components)",
        "VQSUB.w.s8": "Vector Saturating Subtract (8 bits Signed Integer components)",
        "VQSUB.w.s16": "Vector Saturating Subtract (16 bits Signed Integer components)",
        "VQSUB.w.s32": "Vector Saturating Subtract (32 bits Signed Integer components)",
        "VQSUB.w.s64": "Vector Saturating Subtract (64 bits Signed Integer components)",
        "VQSUB.w.u8": "Vector Saturating Subtract (8 bits Unsigned Integer components)",
        "VQSUB.w.u16": "Vector Saturating Subtract (16 bits Unsigned Integer components)",
        "VQSUB.w.u32": "Vector Saturating Subtract (32 bits Unsigned Integer components)",
        "VQSUB.w.u64": "Vector Saturating Subtract (64 bits Unsigned Integer components)",
        "VQSUBal.s8": "Vector Saturating Subtract (8 bits Signed Integer components) (Always)",
        "VQSUBal.s16": "Vector Saturating Subtract (16 bits Signed Integer components) (Always)",
        "VQSUBal.s32": "Vector Saturating Subtract (32 bits Signed Integer components) (Always)",
        "VQSUBal.s64": "Vector Saturating Subtract (64 bits Signed Integer components) (Always)",
        "VQSUBal.u8": "Vector Saturating Subtract (8 bits Unsigned Integer components) (Always)",
        "VQSUBal.u16": "Vector Saturating Subtract (16 bits Unsigned Integer components) (Always)",
        "VQSUBal.u32": "Vector Saturating Subtract (32 bits Unsigned Integer components) (Always)",
        "VQSUBal.u64": "Vector Saturating Subtract (64 bits Unsigned Integer components) (Always)",
        "VQSUBal.w.s8": "Vector Saturating Subtract (8 bits Signed Integer components) (Always)",
        "VQSUBal.w.s16": "Vector Saturating Subtract (16 bits Signed Integer components) (Always)",
        "VQSUBal.w.s32": "Vector Saturating Subtract (32 bits Signed Integer components) (Always)",
        "VQSUBal.w.s64": "Vector Saturating Subtract (64 bits Signed Integer components) (Always)",
        "VQSUBal.w.u8": "Vector Saturating Subtract (8 bits Unsigned Integer components) (Always)",
        "VQSUBal.w.u16": "Vector Saturating Subtract (16 bits Unsigned Integer components) (Always)",
        "VQSUBal.w.u32": "Vector Saturating Subtract (32 bits Unsigned Integer components) (Always)",
        "VQSUBal.w.u64": "Vector Saturating Subtract (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VRADDHN%{c}%{q}%{dt}": {
      "description": "Vector Rounding Add and Narrow %{dt} %{q} %{c}",
      "variants": {
        "VRADDHN.i16": "Vector Rounding Add and Narrow (16 bits Integer components)",
        "VRADDHN.i32": "Vector Rounding Add and Narrow (32 bits Integer components)",
        "VRADDHN.i64": "Vector Rounding Add and Narrow (64 bits Integer components)",
        "VRADDHN.w.i16": "Vector Rounding Add and Narrow (16 bits Integer components)",
        "VRADDHN.w.i32": "Vector Rounding Add and Narrow (32 bits Integer components)",
        "VRADDHN.w.i64": "Vector Rounding Add and Narrow (64 bits Integer components)",
        "VRADDHNal.i16": "Vector Rounding Add and Narrow (16 bits Integer components) (Always)",
        "VRADDHNal.i32": "Vector Rounding Add and Narrow (32 bits Integer components) (Always)",
        "VRADDHNal.i64": "Vector Rounding Add and Narrow (64 bits Integer components) (Always)",
        "VRADDHNal.w.i16": "Vector Rounding Add and Narrow (16 bits Integer components) (Always)",
        "VRADDHNal.w.i32": "Vector Rounding Add and Narrow (32 bits Integer components) (Always)",
        "VRADDHNal.w.i64": "Vector Rounding Add and Narrow (64 bits Integer components) (Always)"
      }
    },
    "VRECPE%{c}%{q}%{dt}": {
      "description": "Vector Reciprocal Estimate %{dt} %{q} %{c}",
      "variants": {
        "VRECPE.u32": "Vector Reciprocal Estimate (32 bits Unsigned Integer components)",
        "VRECPE.f32": "Vector Reciprocal Estimate (32 bits Float components)",
        "VRECPE.w.u32": "Vector Reciprocal Estimate (32 bits Unsigned Integer components)",
        "VRECPE.w.f32": "Vector Reciprocal Estimate (32 bits Float components)",
        "VRECPEal.u32": "Vector Reciprocal Estimate (32 bits Unsigned Integer components) (Always)",
        "VRECPEal.f32": "Vector Reciprocal Estimate (32 bits Float components) (Always)",
        "VRECPEal.w.u32": "Vector Reciprocal Estimate (32 bits Unsigned Integer components) (Always)",
        "VRECPEal.w.f32": "Vector Reciprocal Estimate (32 bits Float components) (Always)"
      }
    },
    "VRECPS%{c}%{q}%{dt}": {
      "description": "Vector Reciprocal Step %{dt} %{q} %{c}",
      "variants": {
        "VRECPS.f32": "Vector Reciprocal Step (32 bits Float components)",
        "VRECPS.w.f32": "Vector Reciprocal Step (32 bits Float components)",
        "VRECPSal.f32": "Vector Reciprocal Step (32 bits Float components) (Always)",
        "VRECPSal.w.f32": "Vector Reciprocal Step (32 bits Float components) (Always)"
      }
    },
    "VREV%{bwsize}%{c}%{q}%{vsize}": {
      "description": "Vector Reverse in %{bwsize} %{vsize} %{q} %{c}",
      "variants": {
        "VREV.16.8": "Vector Reverse in Halfwords (8 bits components)",
        "VREV.16.16": "Vector Reverse in Halfwords (16 bits components)",
        "VREV.16.32": "Vector Reverse in Halfwords (32 bits components)",
        "VREV.16.w.8": "Vector Reverse in Halfwords (8 bits components)",
        "VREV.16.w.16": "Vector Reverse in Halfwords (16 bits components)",
        "VREV.16.w.32": "Vector Reverse in Halfwords (32 bits components)",
        "VREV.16al.8": "Vector Reverse in Halfwords (8 bits components) (Always)",
        "VREV.16al.16": "Vector Reverse in Halfwords (16 bits components) (Always)",
        "VREV.16al.32": "Vector Reverse in Halfwords (32 bits components) (Always)",
        "VREV.16al.w.8": "Vector Reverse in Halfwords (8 bits components) (Always)",
        "VREV.16al.w.16": "Vector Reverse in Halfwords (16 bits components) (Always)",
        "VREV.16al.w.32": "Vector Reverse in Halfwords (32 bits components) (Always)",
        "VREV.32.8": "Vector Reverse in Words (8 bits components)",
        "VREV.32.16": "Vector Reverse in Words (16 bits components)",
        "VREV.32.32": "Vector Reverse in Words (32 bits components)",
        "VREV.32.w.8": "Vector Reverse in Words (8 bits components)",
        "VREV.32.w.16": "Vector Reverse in Words (16 bits components)",
        "VREV.32.w.32": "Vector Reverse in Words (32 bits components)",
        "VREV.32al.8": "Vector Reverse in Words (8 bits components) (Always)",
        "VREV.32al.16": "Vector Reverse in Words (16 bits components) (Always)",
        "VREV.32al.32": "Vector Reverse in Words (32 bits components) (Always)",
        "VREV.32al.w.8": "Vector Reverse in Words (8 bits components) (Always)",
        "VREV.32al.w.16": "Vector Reverse in Words (16 bits components) (Always)",
        "VREV.32al.w.32": "Vector Reverse in Words (32 bits components) (Always)",
        "VREV.64.8": "Vector Reverse in Doublewords (8 bits components)",
        "VREV.64.16": "Vector Reverse in Doublewords (16 bits components)",
        "VREV.64.32": "Vector Reverse in Doublewords (32 bits components)",
        "VREV.64.w.8": "Vector Reverse in Doublewords (8 bits components)",
        "VREV.64.w.16": "Vector Reverse in Doublewords (16 bits components)",
        "VREV.64.w.32": "Vector Reverse in Doublewords (32 bits components)",
        "VREV.64al.8": "Vector Reverse in Doublewords (8 bits components) (Always)",
        "VREV.64al.16": "Vector Reverse in Doublewords (16 bits components) (Always)",
        "VREV.64al.32": "Vector Reverse in Doublewords (32 bits components) (Always)",
        "VREV.64al.w.8": "Vector Reverse in Doublewords (8 bits components) (Always)",
        "VREV.64al.w.16": "Vector Reverse in Doublewords (16 bits components) (Always)",
        "VREV.64al.w.32": "Vector Reverse in Doublewords (32 bits components) (Always)"
      }
    },
    "VRHADD%{c}%{q}%{dt}": {
      "description": "Vector Rounding Halving Add %{dt} %{q} %{c}",
      "variants": {
        "VRHADD.s8": "Vector Rounding Halving Add (8 bits Signed Integer components)",
        "VRHADD.s16": "Vector Rounding Halving Add (16 bits Signed Integer components)",
        "VRHADD.s32": "Vector Rounding Halving Add (32 bits Signed Integer components)",
        "VRHADD.u8": "Vector Rounding Halving Add (8 bits Unsigned Integer components)",
        "VRHADD.u16": "Vector Rounding Halving Add (16 bits Unsigned Integer components)",
        "VRHADD.u32": "Vector Rounding Halving Add (32 bits Unsigned Integer components)",
        "VRHADD.w.s8": "Vector Rounding Halving Add (8 bits Signed Integer components)",
        "VRHADD.w.s16": "Vector Rounding Halving Add (16 bits Signed Integer components)",
        "VRHADD.w.s32": "Vector Rounding Halving Add (32 bits Signed Integer components)",
        "VRHADD.w.u8": "Vector Rounding Halving Add (8 bits Unsigned Integer components)",
        "VRHADD.w.u16": "Vector Rounding Halving Add (16 bits Unsigned Integer components)",
        "VRHADD.w.u32": "Vector Rounding Halving Add (32 bits Unsigned Integer components)",
        "VRHADDal.s8": "Vector Rounding Halving Add (8 bits Signed Integer components) (Always)",
        "VRHADDal.s16": "Vector Rounding Halving Add (16 bits Signed Integer components) (Always)",
        "VRHADDal.s32": "Vector Rounding Halving Add (32 bits Signed Integer components) (Always)",
        "VRHADDal.u8": "Vector Rounding Halving Add (8 bits Unsigned Integer components) (Always)",
        "VRHADDal.u16": "Vector Rounding Halving Add (16 bits Unsigned Integer components) (Always)",
        "VRHADDal.u32": "Vector Rounding Halving Add (32 bits Unsigned Integer components) (Always)",
        "VRHADDal.w.s8": "Vector Rounding Halving Add (8 bits Signed Integer components) (Always)",
        "VRHADDal.w.s16": "Vector Rounding Halving Add (16 bits Signed Integer components) (Always)",
        "VRHADDal.w.s32": "Vector Rounding Halving Add (32 bits Signed Integer components) (Always)",
        "VRHADDal.w.u8": "Vector Rounding Halving Add (8 bits Unsigned Integer components) (Always)",
        "VRHADDal.w.u16": "Vector Rounding Halving Add (16 bits Unsigned Integer components) (Always)",
        "VRHADDal.w.u32": "Vector Rounding Halving Add (32 bits Unsigned Integer components) (Always)"
      }
    },
    "VRSHL%{c}%{q}%{dt}": {
      "description": "Vector Rounding Shift Left %{dt} %{q} %{c}",
      "variants": {
        "VRSHL.s8": "Vector Rounding Shift Left (8 bits Signed Integer components)",
        "VRSHL.s16": "Vector Rounding Shift Left (16 bits Signed Integer components)",
        "VRSHL.s32": "Vector Rounding Shift Left (32 bits Signed Integer components)",
        "VRSHL.s64": "Vector Rounding Shift Left (64 bits Signed Integer components)",
        "VRSHL.u8": "Vector Rounding Shift Left (8 bits Unsigned Integer components)",
        "VRSHL.u16": "Vector Rounding Shift Left (16 bits Unsigned Integer components)",
        "VRSHL.u32": "Vector Rounding Shift Left (32 bits Unsigned Integer components)",
        "VRSHL.u64": "Vector Rounding Shift Left (64 bits Unsigned Integer components)",
        "VRSHL.w.s8": "Vector Rounding Shift Left (8 bits Signed Integer components)",
        "VRSHL.w.s16": "Vector Rounding Shift Left (16 bits Signed Integer components)",
        "VRSHL.w.s32": "Vector Rounding Shift Left (32 bits Signed Integer components)",
        "VRSHL.w.s64": "Vector Rounding Shift Left (64 bits Signed Integer components)",
        "VRSHL.w.u8": "Vector Rounding Shift Left (8 bits Unsigned Integer components)",
        "VRSHL.w.u16": "Vector Rounding Shift Left (16 bits Unsigned Integer components)",
        "VRSHL.w.u32": "Vector Rounding Shift Left (32 bits Unsigned Integer components)",
        "VRSHL.w.u64": "Vector Rounding Shift Left (64 bits Unsigned Integer components)",
        "VRSHLal.s8": "Vector Rounding Shift Left (8 bits Signed Integer components) (Always)",
        "VRSHLal.s16": "Vector Rounding Shift Left (16 bits Signed Integer components) (Always)",
        "VRSHLal.s32": "Vector Rounding Shift Left (32 bits Signed Integer components) (Always)",
        "VRSHLal.s64": "Vector Rounding Shift Left (64 bits Signed Integer components) (Always)",
        "VRSHLal.u8": "Vector Rounding Shift Left (8 bits Unsigned Integer components) (Always)",
        "VRSHLal.u16": "Vector Rounding Shift Left (16 bits Unsigned Integer components) (Always)",
        "VRSHLal.u32": "Vector Rounding Shift Left (32 bits Unsigned Integer components) (Always)",
        "VRSHLal.u64": "Vector Rounding Shift Left (64 bits Unsigned Integer components) (Always)",
        "VRSHLal.w.s8": "Vector Rounding Shift Left (8 bits Signed Integer components) (Always)",
        "VRSHLal.w.s16": "Vector Rounding Shift Left (16 bits Signed Integer components) (Always)",
        "VRSHLal.w.s32": "Vector Rounding Shift Left (32 bits Signed Integer components) (Always)",
        "VRSHLal.w.s64": "Vector Rounding Shift Left (64 bits Signed Integer components) (Always)",
        "VRSHLal.w.u8": "Vector Rounding Shift Left (8 bits Unsigned Integer components) (Always)",
        "VRSHLal.w.u16": "Vector Rounding Shift Left (16 bits Unsigned Integer components) (Always)",
        "VRSHLal.w.u32": "Vector Rounding Shift Left (32 bits Unsigned Integer components) (Always)",
        "VRSHLal.w.u64": "Vector Rounding Shift Left (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VRSHR%{c}%{q}%{dt}": {
      "description": "Vector Rounding Shift Right %{dt} %{q} %{c}",
      "variants": {
        "VRSHR.s8": "Vector Rounding Shift Right (8 bits Signed Integer components)",
        "VRSHR.s16": "Vector Rounding Shift Right (16 bits Signed Integer components)",
        "VRSHR.s32": "Vector Rounding Shift Right (32 bits Signed Integer components)",
        "VRSHR.s64": "Vector Rounding Shift Right (64 bits Signed Integer components)",
        "VRSHR.u8": "Vector Rounding Shift Right (8 bits Unsigned Integer components)",
        "VRSHR.u16": "Vector Rounding Shift Right (16 bits Unsigned Integer components)",
        "VRSHR.u32": "Vector Rounding Shift Right (32 bits Unsigned Integer components)",
        "VRSHR.u64": "Vector Rounding Shift Right (64 bits Unsigned Integer components)",
        "VRSHR.w.s8": "Vector Rounding Shift Right (8 bits Signed Integer components)",
        "VRSHR.w.s16": "Vector Rounding Shift Right (16 bits Signed Integer components)",
        "VRSHR.w.s32": "Vector Rounding Shift Right (32 bits Signed Integer components)",
        "VRSHR.w.s64": "Vector Rounding Shift Right (64 bits Signed Integer components)",
        "VRSHR.w.u8": "Vector Rounding Shift Right (8 bits Unsigned Integer components)",
        "VRSHR.w.u16": "Vector Rounding Shift Right (16 bits Unsigned Integer components)",
        "VRSHR.w.u32": "Vector Rounding Shift Right (32 bits Unsigned Integer components)",
        "VRSHR.w.u64": "Vector Rounding Shift Right (64 bits Unsigned Integer components)",
        "VRSHRal.s8": "Vector Rounding Shift Right (8 bits Signed Integer components) (Always)",
        "VRSHRal.s16": "Vector Rounding Shift Right (16 bits Signed Integer components) (Always)",
        "VRSHRal.s32": "Vector Rounding Shift Right (32 bits Signed Integer components) (Always)",
        "VRSHRal.s64": "Vector Rounding Shift Right (64 bits Signed Integer components) (Always)",
        "VRSHRal.u8": "Vector Rounding Shift Right (8 bits Unsigned Integer components) (Always)",
        "VRSHRal.u16": "Vector Rounding Shift Right (16 bits Unsigned Integer components) (Always)",
        "VRSHRal.u32": "Vector Rounding Shift Right (32 bits Unsigned Integer components) (Always)",
        "VRSHRal.u64": "Vector Rounding Shift Right (64 bits Unsigned Integer components) (Always)",
        "VRSHRal.w.s8": "Vector Rounding Shift Right (8 bits Signed Integer components) (Always)",
        "VRSHRal.w.s16": "Vector Rounding Shift Right (16 bits Signed Integer components) (Always)",
        "VRSHRal.w.s32": "Vector Rounding Shift Right (32 bits Signed Integer components) (Always)",
        "VRSHRal.w.s64": "Vector Rounding Shift Right (64 bits Signed Integer components) (Always)",
        "VRSHRal.w.u8": "Vector Rounding Shift Right (8 bits Unsigned Integer components) (Always)",
        "VRSHRal.w.u16": "Vector Rounding Shift Right (16 bits Unsigned Integer components) (Always)",
        "VRSHRal.w.u32": "Vector Rounding Shift Right (32 bits Unsigned Integer components) (Always)",
        "VRSHRal.w.u64": "Vector Rounding Shift Right (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VRSHRN%{c}%{q}%{dt}": {
      "description": "Vector Rounding Shift Right and Narrow %{dt} %{q} %{c}",
      "variants": {
        "VRSHRN.i16": "Vector Rounding Shift Right and Narrow (16 bits Integer components)",
        "VRSHRN.i32": "Vector Rounding Shift Right and Narrow (32 bits Integer components)",
        "VRSHRN.i64": "Vector Rounding Shift Right and Narrow (64 bits Integer components)",
        "VRSHRN.w.i16": "Vector Rounding Shift Right and Narrow (16 bits Integer components)",
        "VRSHRN.w.i32": "Vector Rounding Shift Right and Narrow (32 bits Integer components)",
        "VRSHRN.w.i64": "Vector Rounding Shift Right and Narrow (64 bits Integer components)",
        "VRSHRNal.i16": "Vector Rounding Shift Right and Narrow (16 bits Integer components) (Always)",
        "VRSHRNal.i32": "Vector Rounding Shift Right and Narrow (32 bits Integer components) (Always)",
        "VRSHRNal.i64": "Vector Rounding Shift Right and Narrow (64 bits Integer components) (Always)",
        "VRSHRNal.w.i16": "Vector Rounding Shift Right and Narrow (16 bits Integer components) (Always)",
        "VRSHRNal.w.i32": "Vector Rounding Shift Right and Narrow (32 bits Integer components) (Always)",
        "VRSHRNal.w.i64": "Vector Rounding Shift Right and Narrow (64 bits Integer components) (Always)"
      }
    },
    "VRSQRTE%{c}%{q}%{dt}": {
      "description": "Vector Reciprocal Square Root Estimate %{dt} %{q} %{c}",
      "variants": {
        "VRSQRTE.u32": "Vector Reciprocal Square Root Estimate (32 bits Unsigned Integer components)",
        "VRSQRTE.f32": "Vector Reciprocal Square Root Estimate (32 bits Float components)",
        "VRSQRTE.w.u32": "Vector Reciprocal Square Root Estimate (32 bits Unsigned Integer components)",
        "VRSQRTE.w.f32": "Vector Reciprocal Square Root Estimate (32 bits Float components)",
        "VRSQRTEal.u32": "Vector Reciprocal Square Root Estimate (32 bits Unsigned Integer components) (Always)",
        "VRSQRTEal.f32": "Vector Reciprocal Square Root Estimate (32 bits Float components) (Always)",
        "VRSQRTEal.w.u32": "Vector Reciprocal Square Root Estimate (32 bits Unsigned Integer components) (Always)",
        "VRSQRTEal.w.f32": "Vector Reciprocal Square Root Estimate (32 bits Float components) (Always)"
      }
    },
    "VRSQRTS%{c}%{q}%{dt}": {
      "description": "Vector Reciprocal Square Root Step %{dt} %{q} %{c}",
      "variants": {
        "VRSQRTS.f32": "Vector Reciprocal Square Root Step (32 bits Float components)",
        "VRSQRTS.w.f32": "Vector Reciprocal Square Root Step (32 bits Float components)",
        "VRSQRTSal.f32": "Vector Reciprocal Square Root Step (32 bits Float components) (Always)",
        "VRSQRTSal.w.f32": "Vector Reciprocal Square Root Step (32 bits Float components) (Always)"
      }
    },
    "VRSRA%{c}%{q}%{dt}": {
      "description": "Vector Rounding Shift Right and Accumulate %{dt} %{q} %{c}",
      "variants": {
        "VRSRA.s8": "Vector Rounding Shift Right and Accumulate (8 bits Signed Integer components)",
        "VRSRA.s16": "Vector Rounding Shift Right and Accumulate (16 bits Signed Integer components)",
        "VRSRA.s32": "Vector Rounding Shift Right and Accumulate (32 bits Signed Integer components)",
        "VRSRA.s64": "Vector Rounding Shift Right and Accumulate (64 bits Signed Integer components)",
        "VRSRA.u8": "Vector Rounding Shift Right and Accumulate (8 bits Unsigned Integer components)",
        "VRSRA.u16": "Vector Rounding Shift Right and Accumulate (16 bits Unsigned Integer components)",
        "VRSRA.u32": "Vector Rounding Shift Right and Accumulate (32 bits Unsigned Integer components)",
        "VRSRA.u64": "Vector Rounding Shift Right and Accumulate (64 bits Unsigned Integer components)",
        "VRSRA.w.s8": "Vector Rounding Shift Right and Accumulate (8 bits Signed Integer components)",
        "VRSRA.w.s16": "Vector Rounding Shift Right and Accumulate (16 bits Signed Integer components)",
        "VRSRA.w.s32": "Vector Rounding Shift Right and Accumulate (32 bits Signed Integer components)",
        "VRSRA.w.s64": "Vector Rounding Shift Right and Accumulate (64 bits Signed Integer components)",
        "VRSRA.w.u8": "Vector Rounding Shift Right and Accumulate (8 bits Unsigned Integer components)",
        "VRSRA.w.u16": "Vector Rounding Shift Right and Accumulate (16 bits Unsigned Integer components)",
        "VRSRA.w.u32": "Vector Rounding Shift Right and Accumulate (32 bits Unsigned Integer components)",
        "VRSRA.w.u64": "Vector Rounding Shift Right and Accumulate (64 bits Unsigned Integer components)",
        "VRSRAal.s8": "Vector Rounding Shift Right and Accumulate (8 bits Signed Integer components) (Always)",
        "VRSRAal.s16": "Vector Rounding Shift Right and Accumulate (16 bits Signed Integer components) (Always)",
        "VRSRAal.s32": "Vector Rounding Shift Right and Accumulate (32 bits Signed Integer components) (Always)",
        "VRSRAal.s64": "Vector Rounding Shift Right and Accumulate (64 bits Signed Integer components) (Always)",
        "VRSRAal.u8": "Vector Rounding Shift Right and Accumulate (8 bits Unsigned Integer components) (Always)",
        "VRSRAal.u16": "Vector Rounding Shift Right and Accumulate (16 bits Unsigned Integer components) (Always)",
        "VRSRAal.u32": "Vector Rounding Shift Right and Accumulate (32 bits Unsigned Integer components) (Always)",
        "VRSRAal.u64": "Vector Rounding Shift Right and Accumulate (64 bits Unsigned Integer components) (Always)",
        "VRSRAal.w.s8": "Vector Rounding Shift Right and Accumulate (8 bits Signed Integer components) (Always)",
        "VRSRAal.w.s16": "Vector Rounding Shift Right and Accumulate (16 bits Signed Integer components) (Always)",
        "VRSRAal.w.s32": "Vector Rounding Shift Right and Accumulate (32 bits Signed Integer components) (Always)",
        "VRSRAal.w.s64": "Vector Rounding Shift Right and Accumulate (64 bits Signed Integer components) (Always)",
        "VRSRAal.w.u8": "Vector Rounding Shift Right and Accumulate (8 bits Unsigned Integer components) (Always)",
        "VRSRAal.w.u16": "Vector Rounding Shift Right and Accumulate (16 bits Unsigned Integer components) (Always)",
        "VRSRAal.w.u32": "Vector Rounding Shift Right and Accumulate (32 bits Unsigned Integer components) (Always)",
        "VRSRAal.w.u64": "Vector Rounding Shift Right and Accumulate (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VRSUBHN%{c}%{q}%{dt}": {
      "description": "Vector Rounding Subtract and Narrow %{dt} %{q} %{c}",
      "variants": {
        "VRSUBHN.i16": "Vector Rounding Subtract and Narrow (16 bits Integer components)",
        "VRSUBHN.i32": "Vector Rounding Subtract and Narrow (32 bits Integer components)",
        "VRSUBHN.i64": "Vector Rounding Subtract and Narrow (64 bits Integer components)",
        "VRSUBHN.w.i16": "Vector Rounding Subtract and Narrow (16 bits Integer components)",
        "VRSUBHN.w.i32": "Vector Rounding Subtract and Narrow (32 bits Integer components)",
        "VRSUBHN.w.i64": "Vector Rounding Subtract and Narrow (64 bits Integer components)",
        "VRSUBHNal.i16": "Vector Rounding Subtract and Narrow (16 bits Integer components) (Always)",
        "VRSUBHNal.i32": "Vector Rounding Subtract and Narrow (32 bits Integer components) (Always)",
        "VRSUBHNal.i64": "Vector Rounding Subtract and Narrow (64 bits Integer components) (Always)",
        "VRSUBHNal.w.i16": "Vector Rounding Subtract and Narrow (16 bits Integer components) (Always)",
        "VRSUBHNal.w.i32": "Vector Rounding Subtract and Narrow (32 bits Integer components) (Always)",
        "VRSUBHNal.w.i64": "Vector Rounding Subtract and Narrow (64 bits Integer components) (Always)"
      }
    },
    "VSHL%{c}%{q}%{dt}": {
      "description": "Vector Shift Left %{dt} %{q} %{c}",
      "variants": {
        "VSHL.s8": "Vector Shift Left (8 bits Signed Integer components)",
        "VSHL.s16": "Vector Shift Left (16 bits Signed Integer components)",
        "VSHL.s32": "Vector Shift Left (32 bits Signed Integer components)",
        "VSHL.s64": "Vector Shift Left (64 bits Signed Integer components)",
        "VSHL.u8": "Vector Shift Left (8 bits Unsigned Integer components)",
        "VSHL.u16": "Vector Shift Left (16 bits Unsigned Integer components)",
        "VSHL.u32": "Vector Shift Left (32 bits Unsigned Integer components)",
        "VSHL.u64": "Vector Shift Left (64 bits Unsigned Integer components)",
        "VSHL.i8": "Vector Shift Left (8 bits Integer components)",
        "VSHL.i16": "Vector Shift Left (16 bits Integer components)",
        "VSHL.i32": "Vector Shift Left (32 bits Integer components)",
        "VSHL.i64": "Vector Shift Left (64 bits Integer components)",
        "VSHL.w.s8": "Vector Shift Left (8 bits Signed Integer components)",
        "VSHL.w.s16": "Vector Shift Left (16 bits Signed Integer components)",
        "VSHL.w.s32": "Vector Shift Left (32 bits Signed Integer components)",
        "VSHL.w.s64": "Vector Shift Left (64 bits Signed Integer components)",
        "VSHL.w.u8": "Vector Shift Left (8 bits Unsigned Integer components)",
        "VSHL.w.u16": "Vector Shift Left (16 bits Unsigned Integer components)",
        "VSHL.w.u32": "Vector Shift Left (32 bits Unsigned Integer components)",
        "VSHL.w.u64": "Vector Shift Left (64 bits Unsigned Integer components)",
        "VSHL.w.i8": "Vector Shift Left (8 bits Integer components)",
        "VSHL.w.i16": "Vector Shift Left (16 bits Integer components)",
        "VSHL.w.i32": "Vector Shift Left (32 bits Integer components)",
        "VSHL.w.i64": "Vector Shift Left (64 bits Integer components)",
        "VSHLal.s8": "Vector Shift Left (8 bits Signed Integer components) (Always)",
        "VSHLal.s16": "Vector Shift Left (16 bits Signed Integer components) (Always)",
        "VSHLal.s32": "Vector Shift Left (32 bits Signed Integer components) (Always)",
        "VSHLal.s64": "Vector Shift Left (64 bits Signed Integer components) (Always)",
        "VSHLal.u8": "Vector Shift Left (8 bits Unsigned Integer components) (Always)",
        "VSHLal.u16": "Vector Shift Left (16 bits Unsigned Integer components) (Always)",
        "VSHLal.u32": "Vector Shift Left (32 bits Unsigned Integer components) (Always)",
        "VSHLal.u64": "Vector Shift Left (64 bits Unsigned Integer components) (Always)",
        "VSHLal.i8": "Vector Shift Left (8 bits Integer components) (Always)",
        "VSHLal.i16": "Vector Shift Left (16 bits Integer components) (Always)",
        "VSHLal.i32": "Vector Shift Left (32 bits Integer components) (Always)",
        "VSHLal.i64": "Vector Shift Left (64 bits Integer components) (Always)",
        "VSHLal.w.s8": "Vector Shift Left (8 bits Signed Integer components) (Always)",
        "VSHLal.w.s16": "Vector Shift Left (16 bits Signed Integer components) (Always)",
        "VSHLal.w.s32": "Vector Shift Left (32 bits Signed Integer components) (Always)",
        "VSHLal.w.s64": "Vector Shift Left (64 bits Signed Integer components) (Always)",
        "VSHLal.w.u8": "Vector Shift Left (8 bits Unsigned Integer components) (Always)",
        "VSHLal.w.u16": "Vector Shift Left (16 bits Unsigned Integer components) (Always)",
        "VSHLal.w.u32": "Vector Shift Left (32 bits Unsigned Integer components) (Always)",
        "VSHLal.w.u64": "Vector Shift Left (64 bits Unsigned Integer components) (Always)",
        "VSHLal.w.i8": "Vector Shift Left (8 bits Integer components) (Always)",
        "VSHLal.w.i16": "Vector Shift Left (16 bits Integer components) (Always)",
        "VSHLal.w.i32": "Vector Shift Left (32 bits Integer components) (Always)",
        "VSHLal.w.i64": "Vector Shift Left (64 bits Integer components) (Always)"
      }
    },
    "VSHLL%{c}%{q}%{dt}": {
      "description": "Vector Shift Left Long %{dt} %{q} %{c}",
      "variants": {
        "VSHLL.s8": "Vector Shift Left Long (8 bits Signed Integer components)",
        "VSHLL.s16": "Vector Shift Left Long (16 bits Signed Integer components)",
        "VSHLL.s32": "Vector Shift Left Long (32 bits Signed Integer components)",
        "VSHLL.u8": "Vector Shift Left Long (8 bits Unsigned Integer components)",
        "VSHLL.u16": "Vector Shift Left Long (16 bits Unsigned Integer components)",
        "VSHLL.u32": "Vector Shift Left Long (32 bits Unsigned Integer components)",
        "VSHLL.i8": "Vector Shift Left Long (8 bits Integer components)",
        "VSHLL.i16": "Vector Shift Left Long (16 bits Integer components)",
        "VSHLL.i32": "Vector Shift Left Long (32 bits Integer components)",
        "VSHLL.w.s8": "Vector Shift Left Long (8 bits Signed Integer components)",
        "VSHLL.w.s16": "Vector Shift Left Long (16 bits Signed Integer components)",
        "VSHLL.w.s32": "Vector Shift Left Long (32 bits Signed Integer components)",
        "VSHLL.w.u8": "Vector Shift Left Long (8 bits Unsigned Integer components)",
        "VSHLL.w.u16": "Vector Shift Left Long (16 bits Unsigned Integer components)",
        "VSHLL.w.u32": "Vector Shift Left Long (32 bits Unsigned Integer components)",
        "VSHLL.w.i8": "Vector Shift Left Long (8 bits Integer components)",
        "VSHLL.w.i16": "Vector Shift Left Long (16 bits Integer components)",
        "VSHLL.w.i32": "Vector Shift Left Long (32 bits Integer components)",
        "VSHLLal.s8": "Vector Shift Left Long (8 bits Signed Integer components) (Always)",
        "VSHLLal.s16": "Vector Shift Left Long (16 bits Signed Integer components) (Always)",
        "VSHLLal.s32": "Vector Shift Left Long (32 bits Signed Integer components) (Always)",
        "VSHLLal.u8": "Vector Shift Left Long (8 bits Unsigned Integer components) (Always)",
        "VSHLLal.u16": "Vector Shift Left Long (16 bits Unsigned Integer components) (Always)",
        "VSHLLal.u32": "Vector Shift Left Long (32 bits Unsigned Integer components) (Always)",
        "VSHLLal.i8": "Vector Shift Left Long (8 bits Integer components) (Always)",
        "VSHLLal.i16": "Vector Shift Left Long (16 bits Integer components) (Always)",
        "VSHLLal.i32": "Vector Shift Left Long (32 bits Integer components) (Always)",
        "VSHLLal.w.s8": "Vector Shift Left Long (8 bits Signed Integer components) (Always)",
        "VSHLLal.w.s16": "Vector Shift Left Long (16 bits Signed Integer components) (Always)",
        "VSHLLal.w.s32": "Vector Shift Left Long (32 bits Signed Integer components) (Always)",
        "VSHLLal.w.u8": "Vector Shift Left Long (8 bits Unsigned Integer components) (Always)",
        "VSHLLal.w.u16": "Vector Shift Left Long (16 bits Unsigned Integer components) (Always)",
        "VSHLLal.w.u32": "Vector Shift Left Long (32 bits Unsigned Integer components) (Always)",
        "VSHLLal.w.i8": "Vector Shift Left Long (8 bits Integer components) (Always)",
        "VSHLLal.w.i16": "Vector Shift Left Long (16 bits Integer components) (Always)",
        "VSHLLal.w.i32": "Vector Shift Left Long (32 bits Integer components) (Always)"
      }
    },
    "VSHR%{c}%{q}%{dt}": {
      "description": "Vector Shift Right %{dt} %{q} %{c}",
      "variants": {
        "VSHR.s8": "Vector Shift Right (8 bits Signed Integer components)",
        "VSHR.s16": "Vector Shift Right (16 bits Signed Integer components)",
        "VSHR.s32": "Vector Shift Right (32 bits Signed Integer components)",
        "VSHR.s64": "Vector Shift Right (64 bits Signed Integer components)",
        "VSHR.u8": "Vector Shift Right (8 bits Unsigned Integer components)",
        "VSHR.u16": "Vector Shift Right (16 bits Unsigned Integer components)",
        "VSHR.u32": "Vector Shift Right (32 bits Unsigned Integer components)",
        "VSHR.u64": "Vector Shift Right (64 bits Unsigned Integer components)",
        "VSHR.w.s8": "Vector Shift Right (8 bits Signed Integer components)",
        "VSHR.w.s16": "Vector Shift Right (16 bits Signed Integer components)",
        "VSHR.w.s32": "Vector Shift Right (32 bits Signed Integer components)",
        "VSHR.w.s64": "Vector Shift Right (64 bits Signed Integer components)",
        "VSHR.w.u8": "Vector Shift Right (8 bits Unsigned Integer components)",
        "VSHR.w.u16": "Vector Shift Right (16 bits Unsigned Integer components)",
        "VSHR.w.u32": "Vector Shift Right (32 bits Unsigned Integer components)",
        "VSHR.w.u64": "Vector Shift Right (64 bits Unsigned Integer components)",
        "VSHRal.s8": "Vector Shift Right (8 bits Signed Integer components) (Always)",
        "VSHRal.s16": "Vector Shift Right (16 bits Signed Integer components) (Always)",
        "VSHRal.s32": "Vector Shift Right (32 bits Signed Integer components) (Always)",
        "VSHRal.s64": "Vector Shift Right (64 bits Signed Integer components) (Always)",
        "VSHRal.u8": "Vector Shift Right (8 bits Unsigned Integer components) (Always)",
        "VSHRal.u16": "Vector Shift Right (16 bits Unsigned Integer components) (Always)",
        "VSHRal.u32": "Vector Shift Right (32 bits Unsigned Integer components) (Always)",
        "VSHRal.u64": "Vector Shift Right (64 bits Unsigned Integer components) (Always)",
        "VSHRal.w.s8": "Vector Shift Right (8 bits Signed Integer components) (Always)",
        "VSHRal.w.s16": "Vector Shift Right (16 bits Signed Integer components) (Always)",
        "VSHRal.w.s32": "Vector Shift Right (32 bits Signed Integer components) (Always)",
        "VSHRal.w.s64": "Vector Shift Right (64 bits Signed Integer components) (Always)",
        "VSHRal.w.u8": "Vector Shift Right (8 bits Unsigned Integer components) (Always)",
        "VSHRal.w.u16": "Vector Shift Right (16 bits Unsigned Integer components) (Always)",
        "VSHRal.w.u32": "Vector Shift Right (32 bits Unsigned Integer components) (Always)",
        "VSHRal.w.u64": "Vector Shift Right (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VSHRN%{c}%{q}%{dt}": {
      "description": "Vector Shift Right Narrow %{dt} %{q} %{c}",
      "variants": {
        "VSHRN.i16": "Vector Shift Right Narrow (16 bits Integer components)",
        "VSHRN.i32": "Vector Shift Right Narrow (32 bits Integer components)",
        "VSHRN.i64": "Vector Shift Right Narrow (64 bits Integer components)",
        "VSHRN.w.i16": "Vector Shift Right Narrow (16 bits Integer components)",
        "VSHRN.w.i32": "Vector Shift Right Narrow (32 bits Integer components)",
        "VSHRN.w.i64": "Vector Shift Right Narrow (64 bits Integer components)",
        "VSHRNal.i16": "Vector Shift Right Narrow (16 bits Integer components) (Always)",
        "VSHRNal.i32": "Vector Shift Right Narrow (32 bits Integer components) (Always)",
        "VSHRNal.i64": "Vector Shift Right Narrow (64 bits Integer components) (Always)",
        "VSHRNal.w.i16": "Vector Shift Right Narrow (16 bits Integer components) (Always)",
        "VSHRNal.w.i32": "Vector Shift Right Narrow (32 bits Integer components) (Always)",
        "VSHRNal.w.i64": "Vector Shift Right Narrow (64 bits Integer components) (Always)"
      }
    },
    "VSLI%{c}%{q}%{vsize}": {
      "description": "Vector Shift Left and Insert %{vsize} %{q} %{c}",
      "variants": {
        "VSLI.8": "Vector Shift Left and Insert (8 bits components)",
        "VSLI.16": "Vector Shift Left and Insert (16 bits components)",
        "VSLI.32": "Vector Shift Left and Insert (32 bits components)",
        "VSLI.64": "Vector Shift Left and Insert (64 bits components)",
        "VSLI.w.8": "Vector Shift Left and Insert (8 bits components)",
        "VSLI.w.16": "Vector Shift Left and Insert (16 bits components)",
        "VSLI.w.32": "Vector Shift Left and Insert (32 bits components)",
        "VSLI.w.64": "Vector Shift Left and Insert (64 bits components)",
        "VSLIal.8": "Vector Shift Left and Insert (8 bits components) (Always)",
        "VSLIal.16": "Vector Shift Left and Insert (16 bits components) (Always)",
        "VSLIal.32": "Vector Shift Left and Insert (32 bits components) (Always)",
        "VSLIal.64": "Vector Shift Left and Insert (64 bits components) (Always)",
        "VSLIal.w.8": "Vector Shift Left and Insert (8 bits components) (Always)",
        "VSLIal.w.16": "Vector Shift Left and Insert (16 bits components) (Always)",
        "VSLIal.w.32": "Vector Shift Left and Insert (32 bits components) (Always)",
        "VSLIal.w.64": "Vector Shift Left and Insert (64 bits components) (Always)"
      }
    },
    "VSQRT%{c}%{q}%{dt}": {
      "description": "Vector Square Root %{dt} %{q} %{c}",
      "variants": {
        "VSQRT.f32": "Vector Square Root (32 bits Float components)",
        "VSQRT.f64": "Vector Square Root (64 bits Float components)",
        "VSQRT.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding)",
        "VSQRT.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding)",
        "VSQRT.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding)",
        "VSQRT.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding)",
        "VSQRTeq.f32": "Vector Square Root (32 bits Float components) (If APSR.Z == 1 [Equal])",
        "VSQRTeq.f64": "Vector Square Root (64 bits Float components) (If APSR.Z == 1 [Equal])",
        "VSQRTeq.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VSQRTeq.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VSQRTeq.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VSQRTeq.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VSQRTne.f32": "Vector Square Root (32 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VSQRTne.f64": "Vector Square Root (64 bits Float components) (If APSR.Z == 0 [Not Equal])",
        "VSQRTne.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSQRTne.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSQRTne.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSQRTne.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSQRTcs.f32": "Vector Square Root (32 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VSQRTcs.f64": "Vector Square Root (64 bits Float components) (If APSR.C == 1 [Carry Set])",
        "VSQRTcs.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSQRTcs.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSQRTcs.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSQRTcs.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSQRTcc.f32": "Vector Square Root (32 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VSQRTcc.f64": "Vector Square Root (64 bits Float components) (If APSR.C == 0 [Carry Clear])",
        "VSQRTcc.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSQRTcc.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSQRTcc.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSQRTcc.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSQRTmi.f32": "Vector Square Root (32 bits Float components) (If APSR.N == 1 [Minus])",
        "VSQRTmi.f64": "Vector Square Root (64 bits Float components) (If APSR.N == 1 [Minus])",
        "VSQRTmi.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VSQRTmi.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VSQRTmi.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VSQRTmi.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VSQRTpl.f32": "Vector Square Root (32 bits Float components) (If APSR.N == 0 [Plus])",
        "VSQRTpl.f64": "Vector Square Root (64 bits Float components) (If APSR.N == 0 [Plus])",
        "VSQRTpl.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VSQRTpl.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VSQRTpl.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VSQRTpl.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VSQRTvs.f32": "Vector Square Root (32 bits Float components) (If APSR.V == 1 [Overflow])",
        "VSQRTvs.f64": "Vector Square Root (64 bits Float components) (If APSR.V == 1 [Overflow])",
        "VSQRTvs.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VSQRTvs.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VSQRTvs.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VSQRTvs.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VSQRTvc.f32": "Vector Square Root (32 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VSQRTvc.f64": "Vector Square Root (64 bits Float components) (If APSR.V == 0 [No Overflow])",
        "VSQRTvc.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSQRTvc.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSQRTvc.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSQRTvc.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSQRThi.f32": "Vector Square Root (32 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSQRThi.f64": "Vector Square Root (64 bits Float components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSQRThi.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSQRThi.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSQRThi.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSQRThi.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSQRTls.f32": "Vector Square Root (32 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSQRTls.f64": "Vector Square Root (64 bits Float components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSQRTls.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSQRTls.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSQRTls.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSQRTls.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSQRTge.f32": "Vector Square Root (32 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSQRTge.f64": "Vector Square Root (64 bits Float components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSQRTge.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSQRTge.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSQRTge.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSQRTge.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSQRTlt.f32": "Vector Square Root (32 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSQRTlt.f64": "Vector Square Root (64 bits Float components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSQRTlt.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSQRTlt.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSQRTlt.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSQRTlt.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSQRTgt.f32": "Vector Square Root (32 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSQRTgt.f64": "Vector Square Root (64 bits Float components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSQRTgt.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSQRTgt.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSQRTgt.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSQRTgt.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSQRTle.f32": "Vector Square Root (32 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSQRTle.f64": "Vector Square Root (64 bits Float components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSQRTle.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSQRTle.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSQRTle.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSQRTle.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSQRTal.f32": "Vector Square Root (32 bits Float components) (Always)",
        "VSQRTal.f64": "Vector Square Root (64 bits Float components) (Always)",
        "VSQRTal.n.f32": "Vector Square Root (32 bits Float components) (T 16bits encoding) (Always)",
        "VSQRTal.n.f64": "Vector Square Root (64 bits Float components) (T 16bits encoding) (Always)",
        "VSQRTal.w.f32": "Vector Square Root (32 bits Float components) (T/A 32bits encoding) (Always)",
        "VSQRTal.w.f64": "Vector Square Root (64 bits Float components) (T/A 32bits encoding) (Always)"
      }
    },
    "VSRA%{c}%{q}%{dt}": {
      "description": "Vector Shift Right and Accumulate %{dt} %{q} %{c}",
      "variants": {
        "VSRA.s8": "Vector Shift Right and Accumulate (8 bits Signed Integer components)",
        "VSRA.s16": "Vector Shift Right and Accumulate (16 bits Signed Integer components)",
        "VSRA.s32": "Vector Shift Right and Accumulate (32 bits Signed Integer components)",
        "VSRA.s64": "Vector Shift Right and Accumulate (64 bits Signed Integer components)",
        "VSRA.u8": "Vector Shift Right and Accumulate (8 bits Unsigned Integer components)",
        "VSRA.u16": "Vector Shift Right and Accumulate (16 bits Unsigned Integer components)",
        "VSRA.u32": "Vector Shift Right and Accumulate (32 bits Unsigned Integer components)",
        "VSRA.u64": "Vector Shift Right and Accumulate (64 bits Unsigned Integer components)",
        "VSRA.w.s8": "Vector Shift Right and Accumulate (8 bits Signed Integer components)",
        "VSRA.w.s16": "Vector Shift Right and Accumulate (16 bits Signed Integer components)",
        "VSRA.w.s32": "Vector Shift Right and Accumulate (32 bits Signed Integer components)",
        "VSRA.w.s64": "Vector Shift Right and Accumulate (64 bits Signed Integer components)",
        "VSRA.w.u8": "Vector Shift Right and Accumulate (8 bits Unsigned Integer components)",
        "VSRA.w.u16": "Vector Shift Right and Accumulate (16 bits Unsigned Integer components)",
        "VSRA.w.u32": "Vector Shift Right and Accumulate (32 bits Unsigned Integer components)",
        "VSRA.w.u64": "Vector Shift Right and Accumulate (64 bits Unsigned Integer components)",
        "VSRAal.s8": "Vector Shift Right and Accumulate (8 bits Signed Integer components) (Always)",
        "VSRAal.s16": "Vector Shift Right and Accumulate (16 bits Signed Integer components) (Always)",
        "VSRAal.s32": "Vector Shift Right and Accumulate (32 bits Signed Integer components) (Always)",
        "VSRAal.s64": "Vector Shift Right and Accumulate (64 bits Signed Integer components) (Always)",
        "VSRAal.u8": "Vector Shift Right and Accumulate (8 bits Unsigned Integer components) (Always)",
        "VSRAal.u16": "Vector Shift Right and Accumulate (16 bits Unsigned Integer components) (Always)",
        "VSRAal.u32": "Vector Shift Right and Accumulate (32 bits Unsigned Integer components) (Always)",
        "VSRAal.u64": "Vector Shift Right and Accumulate (64 bits Unsigned Integer components) (Always)",
        "VSRAal.w.s8": "Vector Shift Right and Accumulate (8 bits Signed Integer components) (Always)",
        "VSRAal.w.s16": "Vector Shift Right and Accumulate (16 bits Signed Integer components) (Always)",
        "VSRAal.w.s32": "Vector Shift Right and Accumulate (32 bits Signed Integer components) (Always)",
        "VSRAal.w.s64": "Vector Shift Right and Accumulate (64 bits Signed Integer components) (Always)",
        "VSRAal.w.u8": "Vector Shift Right and Accumulate (8 bits Unsigned Integer components) (Always)",
        "VSRAal.w.u16": "Vector Shift Right and Accumulate (16 bits Unsigned Integer components) (Always)",
        "VSRAal.w.u32": "Vector Shift Right and Accumulate (32 bits Unsigned Integer components) (Always)",
        "VSRAal.w.u64": "Vector Shift Right and Accumulate (64 bits Unsigned Integer components) (Always)"
      }
    },
    "VSRI%{c}%{q}%{vsize}": {
      "description": "Vector Shift Right and Insert %{vsize} %{q} %{c}",
      "variants": {
        "VSRI.8": "Vector Shift Right and Insert (8 bits components)",
        "VSRI.16": "Vector Shift Right and Insert (16 bits components)",
        "VSRI.32": "Vector Shift Right and Insert (32 bits components)",
        "VSRI.64": "Vector Shift Right and Insert (64 bits components)",
        "VSRI.w.8": "Vector Shift Right and Insert (8 bits components)",
        "VSRI.w.16": "Vector Shift Right and Insert (16 bits components)",
        "VSRI.w.32": "Vector Shift Right and Insert (32 bits components)",
        "VSRI.w.64": "Vector Shift Right and Insert (64 bits components)",
        "VSRIal.8": "Vector Shift Right and Insert (8 bits components) (Always)",
        "VSRIal.16": "Vector Shift Right and Insert (16 bits components) (Always)",
        "VSRIal.32": "Vector Shift Right and Insert (32 bits components) (Always)",
        "VSRIal.64": "Vector Shift Right and Insert (64 bits components) (Always)",
        "VSRIal.w.8": "Vector Shift Right and Insert (8 bits components) (Always)",
        "VSRIal.w.16": "Vector Shift Right and Insert (16 bits components) (Always)",
        "VSRIal.w.32": "Vector Shift Right and Insert (32 bits components) (Always)",
        "VSRIal.w.64": "Vector Shift Right and Insert (64 bits components) (Always)"
      }
    },
    "VST1%{c}%{q}%{vsize}": {
      "description": "Vector Store (multiple single elements) %{vsize} %{q} %{c}",
      "variants": {
        "VST1.8": "Vector Store (multiple single elements) (8 bits components)",
        "VST1.16": "Vector Store (multiple single elements) (16 bits components)",
        "VST1.32": "Vector Store (multiple single elements) (32 bits components)",
        "VST1.64": "Vector Store (multiple single elements) (64 bits components)",
        "VST1.w.8": "Vector Store (multiple single elements) (8 bits components)",
        "VST1.w.16": "Vector Store (multiple single elements) (16 bits components)",
        "VST1.w.32": "Vector Store (multiple single elements) (32 bits components)",
        "VST1.w.64": "Vector Store (multiple single elements) (64 bits components)",
        "VST1al.8": "Vector Store (multiple single elements) (8 bits components) (Always)",
        "VST1al.16": "Vector Store (multiple single elements) (16 bits components) (Always)",
        "VST1al.32": "Vector Store (multiple single elements) (32 bits components) (Always)",
        "VST1al.64": "Vector Store (multiple single elements) (64 bits components) (Always)",
        "VST1al.w.8": "Vector Store (multiple single elements) (8 bits components) (Always)",
        "VST1al.w.16": "Vector Store (multiple single elements) (16 bits components) (Always)",
        "VST1al.w.32": "Vector Store (multiple single elements) (32 bits components) (Always)",
        "VST1al.w.64": "Vector Store (multiple single elements) (64 bits components) (Always)"
      }
    },
    "VST2%{c}%{q}%{vsize}": {
      "description": "Vector Store (multiple 2-elements structures) %{vsize} %{q} %{c}",
      "variants": {
        "VST2.8": "Vector Store (multiple 2-elements structures) (8 bits components)",
        "VST2.16": "Vector Store (multiple 2-elements structures) (16 bits components)",
        "VST2.32": "Vector Store (multiple 2-elements structures) (32 bits components)",
        "VST2.w.8": "Vector Store (multiple 2-elements structures) (8 bits components)",
        "VST2.w.16": "Vector Store (multiple 2-elements structures) (16 bits components)",
        "VST2.w.32": "Vector Store (multiple 2-elements structures) (32 bits components)",
        "VST2al.8": "Vector Store (multiple 2-elements structures) (8 bits components) (Always)",
        "VST2al.16": "Vector Store (multiple 2-elements structures) (16 bits components) (Always)",
        "VST2al.32": "Vector Store (multiple 2-elements structures) (32 bits components) (Always)",
        "VST2al.w.8": "Vector Store (multiple 2-elements structures) (8 bits components) (Always)",
        "VST2al.w.16": "Vector Store (multiple 2-elements structures) (16 bits components) (Always)",
        "VST2al.w.32": "Vector Store (multiple 2-elements structures) (32 bits components) (Always)"
      }
    },
    "VST3%{c}%{q}%{vsize}": {
      "description": "Vector Store (multiple 3-elements structures) %{vsize} %{q} %{c}",
      "variants": {
        "VST3.8": "Vector Store (multiple 3-elements structures) (8 bits components)",
        "VST3.16": "Vector Store (multiple 3-elements structures) (16 bits components)",
        "VST3.32": "Vector Store (multiple 3-elements structures) (32 bits components)",
        "VST3.w.8": "Vector Store (multiple 3-elements structures) (8 bits components)",
        "VST3.w.16": "Vector Store (multiple 3-elements structures) (16 bits components)",
        "VST3.w.32": "Vector Store (multiple 3-elements structures) (32 bits components)",
        "VST3al.8": "Vector Store (multiple 3-elements structures) (8 bits components) (Always)",
        "VST3al.16": "Vector Store (multiple 3-elements structures) (16 bits components) (Always)",
        "VST3al.32": "Vector Store (multiple 3-elements structures) (32 bits components) (Always)",
        "VST3al.w.8": "Vector Store (multiple 3-elements structures) (8 bits components) (Always)",
        "VST3al.w.16": "Vector Store (multiple 3-elements structures) (16 bits components) (Always)",
        "VST3al.w.32": "Vector Store (multiple 3-elements structures) (32 bits components) (Always)"
      }
    },
    "VST4%{c}%{q}%{vsize}": {
      "description": "Vector Store (multiple 4-elements structures) %{vsize} %{q} %{c}",
      "variants": {
        "VST4.8": "Vector Store (multiple 4-elements structures) (8 bits components)",
        "VST4.16": "Vector Store (multiple 4-elements structures) (16 bits components)",
        "VST4.32": "Vector Store (multiple 4-elements structures) (32 bits components)",
        "VST4.w.8": "Vector Store (multiple 4-elements structures) (8 bits components)",
        "VST4.w.16": "Vector Store (multiple 4-elements structures) (16 bits components)",
        "VST4.w.32": "Vector Store (multiple 4-elements structures) (32 bits components)",
        "VST4al.8": "Vector Store (multiple 4-elements structures) (8 bits components) (Always)",
        "VST4al.16": "Vector Store (multiple 4-elements structures) (16 bits components) (Always)",
        "VST4al.32": "Vector Store (multiple 4-elements structures) (32 bits components) (Always)",
        "VST4al.w.8": "Vector Store (multiple 4-elements structures) (8 bits components) (Always)",
        "VST4al.w.16": "Vector Store (multiple 4-elements structures) (16 bits components) (Always)",
        "VST4al.w.32": "Vector Store (multiple 4-elements structures) (32 bits components) (Always)"
      }
    },
    "VSTM%{c}%{q}%{vsize}": {
      "description": "Vector Store Multiple %{vsize} %{q} %{c}",
      "variants": {
        "VSTM.32": "Vector Store Multiple (32 bits components)",
        "VSTM.64": "Vector Store Multiple (64 bits components)",
        "VSTM.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding)",
        "VSTM.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding)",
        "VSTM.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding)",
        "VSTM.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding)",
        "VSTMeq.32": "Vector Store Multiple (32 bits components) (If APSR.Z == 1 [Equal])",
        "VSTMeq.64": "Vector Store Multiple (64 bits components) (If APSR.Z == 1 [Equal])",
        "VSTMeq.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VSTMeq.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VSTMeq.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VSTMeq.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VSTMne.32": "Vector Store Multiple (32 bits components) (If APSR.Z == 0 [Not Equal])",
        "VSTMne.64": "Vector Store Multiple (64 bits components) (If APSR.Z == 0 [Not Equal])",
        "VSTMne.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSTMne.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSTMne.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSTMne.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSTMcs.32": "Vector Store Multiple (32 bits components) (If APSR.C == 1 [Carry Set])",
        "VSTMcs.64": "Vector Store Multiple (64 bits components) (If APSR.C == 1 [Carry Set])",
        "VSTMcs.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSTMcs.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSTMcs.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSTMcs.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSTMcc.32": "Vector Store Multiple (32 bits components) (If APSR.C == 0 [Carry Clear])",
        "VSTMcc.64": "Vector Store Multiple (64 bits components) (If APSR.C == 0 [Carry Clear])",
        "VSTMcc.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSTMcc.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSTMcc.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSTMcc.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSTMmi.32": "Vector Store Multiple (32 bits components) (If APSR.N == 1 [Minus])",
        "VSTMmi.64": "Vector Store Multiple (64 bits components) (If APSR.N == 1 [Minus])",
        "VSTMmi.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VSTMmi.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VSTMmi.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VSTMmi.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VSTMpl.32": "Vector Store Multiple (32 bits components) (If APSR.N == 0 [Plus])",
        "VSTMpl.64": "Vector Store Multiple (64 bits components) (If APSR.N == 0 [Plus])",
        "VSTMpl.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VSTMpl.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VSTMpl.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VSTMpl.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VSTMvs.32": "Vector Store Multiple (32 bits components) (If APSR.V == 1 [Overflow])",
        "VSTMvs.64": "Vector Store Multiple (64 bits components) (If APSR.V == 1 [Overflow])",
        "VSTMvs.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VSTMvs.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VSTMvs.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VSTMvs.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VSTMvc.32": "Vector Store Multiple (32 bits components) (If APSR.V == 0 [No Overflow])",
        "VSTMvc.64": "Vector Store Multiple (64 bits components) (If APSR.V == 0 [No Overflow])",
        "VSTMvc.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSTMvc.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSTMvc.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSTMvc.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSTMhi.32": "Vector Store Multiple (32 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTMhi.64": "Vector Store Multiple (64 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTMhi.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTMhi.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTMhi.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTMhi.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTMls.32": "Vector Store Multiple (32 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTMls.64": "Vector Store Multiple (64 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTMls.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTMls.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTMls.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTMls.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTMge.32": "Vector Store Multiple (32 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTMge.64": "Vector Store Multiple (64 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTMge.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTMge.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTMge.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTMge.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTMlt.32": "Vector Store Multiple (32 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTMlt.64": "Vector Store Multiple (64 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTMlt.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTMlt.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTMlt.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTMlt.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTMgt.32": "Vector Store Multiple (32 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTMgt.64": "Vector Store Multiple (64 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTMgt.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTMgt.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTMgt.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTMgt.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTMle.32": "Vector Store Multiple (32 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTMle.64": "Vector Store Multiple (64 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTMle.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTMle.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTMle.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTMle.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTMal.32": "Vector Store Multiple (32 bits components) (Always)",
        "VSTMal.64": "Vector Store Multiple (64 bits components) (Always)",
        "VSTMal.n.32": "Vector Store Multiple (32 bits components) (T 16bits encoding) (Always)",
        "VSTMal.n.64": "Vector Store Multiple (64 bits components) (T 16bits encoding) (Always)",
        "VSTMal.w.32": "Vector Store Multiple (32 bits components) (T/A 32bits encoding) (Always)",
        "VSTMal.w.64": "Vector Store Multiple (64 bits components) (T/A 32bits encoding) (Always)"
      }
    },
    "VSTR%{c}%{q}%{vsize}": {
      "description": "Vector Store Register %{vsize} %{q} %{c}",
      "variants": {
        "VSTR.32": "Vector Store Register (32 bits components)",
        "VSTR.64": "Vector Store Register (64 bits components)",
        "VSTR.n.32": "Vector Store Register (32 bits components) (T 16bits encoding)",
        "VSTR.n.64": "Vector Store Register (64 bits components) (T 16bits encoding)",
        "VSTR.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding)",
        "VSTR.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding)",
        "VSTReq.32": "Vector Store Register (32 bits components) (If APSR.Z == 1 [Equal])",
        "VSTReq.64": "Vector Store Register (64 bits components) (If APSR.Z == 1 [Equal])",
        "VSTReq.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VSTReq.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "VSTReq.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VSTReq.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "VSTRne.32": "Vector Store Register (32 bits components) (If APSR.Z == 0 [Not Equal])",
        "VSTRne.64": "Vector Store Register (64 bits components) (If APSR.Z == 0 [Not Equal])",
        "VSTRne.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSTRne.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSTRne.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSTRne.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "VSTRcs.32": "Vector Store Register (32 bits components) (If APSR.C == 1 [Carry Set])",
        "VSTRcs.64": "Vector Store Register (64 bits components) (If APSR.C == 1 [Carry Set])",
        "VSTRcs.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSTRcs.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSTRcs.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSTRcs.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "VSTRcc.32": "Vector Store Register (32 bits components) (If APSR.C == 0 [Carry Clear])",
        "VSTRcc.64": "Vector Store Register (64 bits components) (If APSR.C == 0 [Carry Clear])",
        "VSTRcc.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSTRcc.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSTRcc.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSTRcc.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "VSTRmi.32": "Vector Store Register (32 bits components) (If APSR.N == 1 [Minus])",
        "VSTRmi.64": "Vector Store Register (64 bits components) (If APSR.N == 1 [Minus])",
        "VSTRmi.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VSTRmi.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "VSTRmi.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VSTRmi.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "VSTRpl.32": "Vector Store Register (32 bits components) (If APSR.N == 0 [Plus])",
        "VSTRpl.64": "Vector Store Register (64 bits components) (If APSR.N == 0 [Plus])",
        "VSTRpl.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VSTRpl.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "VSTRpl.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VSTRpl.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "VSTRvs.32": "Vector Store Register (32 bits components) (If APSR.V == 1 [Overflow])",
        "VSTRvs.64": "Vector Store Register (64 bits components) (If APSR.V == 1 [Overflow])",
        "VSTRvs.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VSTRvs.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "VSTRvs.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VSTRvs.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "VSTRvc.32": "Vector Store Register (32 bits components) (If APSR.V == 0 [No Overflow])",
        "VSTRvc.64": "Vector Store Register (64 bits components) (If APSR.V == 0 [No Overflow])",
        "VSTRvc.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSTRvc.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSTRvc.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSTRvc.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "VSTRhi.32": "Vector Store Register (32 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTRhi.64": "Vector Store Register (64 bits components) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTRhi.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTRhi.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTRhi.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTRhi.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "VSTRls.32": "Vector Store Register (32 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTRls.64": "Vector Store Register (64 bits components) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTRls.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTRls.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTRls.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTRls.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "VSTRge.32": "Vector Store Register (32 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTRge.64": "Vector Store Register (64 bits components) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTRge.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTRge.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTRge.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTRge.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "VSTRlt.32": "Vector Store Register (32 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTRlt.64": "Vector Store Register (64 bits components) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTRlt.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTRlt.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTRlt.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTRlt.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "VSTRgt.32": "Vector Store Register (32 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTRgt.64": "Vector Store Register (64 bits components) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTRgt.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTRgt.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTRgt.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTRgt.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "VSTRle.32": "Vector Store Register (32 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTRle.64": "Vector Store Register (64 bits components) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTRle.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTRle.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTRle.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTRle.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "VSTRal.32": "Vector Store Register (32 bits components) (Always)",
        "VSTRal.64": "Vector Store Register (64 bits components) (Always)",
        "VSTRal.n.32": "Vector Store Register (32 bits components) (T 16bits encoding) (Always)",
        "VSTRal.n.64": "Vector Store Register (64 bits components) (T 16bits encoding) (Always)",
        "VSTRal.w.32": "Vector Store Register (32 bits components) (T/A 32bits encoding) (Always)",
        "VSTRal.w.64": "Vector Store Register (64 bits components) (T/A 32bits encoding) (Always)"
      }
    },
    "VSUB%{c}%{q}%{dt}": {
      "description": "Vector Subtract %{dt} %{q} %{c}",
      "variants": {
        "VSUB.i8": "Vector Subtract (8 bits Integer components)",
        "VSUB.i16": "Vector Subtract (16 bits Integer components)",
        "VSUB.i32": "Vector Subtract (32 bits Integer components)",
        "VSUB.i64": "Vector Subtract (64 bits Integer components)",
        "VSUB.f32": "Vector Subtract (32 bits Float components)",
        "VSUB.f64": "Vector Subtract (64 bits Float components)",
        "VSUB.w.i8": "Vector Subtract (8 bits Integer components)",
        "VSUB.w.i16": "Vector Subtract (16 bits Integer components)",
        "VSUB.w.i32": "Vector Subtract (32 bits Integer components)",
        "VSUB.w.i64": "Vector Subtract (64 bits Integer components)",
        "VSUB.w.f32": "Vector Subtract (32 bits Float components)",
        "VSUB.w.f64": "Vector Subtract (64 bits Float components)",
        "VSUBal.i8": "Vector Subtract (8 bits Integer components) (Always)",
        "VSUBal.i16": "Vector Subtract (16 bits Integer components) (Always)",
        "VSUBal.i32": "Vector Subtract (32 bits Integer components) (Always)",
        "VSUBal.i64": "Vector Subtract (64 bits Integer components) (Always)",
        "VSUBal.f32": "Vector Subtract (32 bits Float components) (Always)",
        "VSUBal.f64": "Vector Subtract (64 bits Float components) (Always)",
        "VSUBal.w.i8": "Vector Subtract (8 bits Integer components) (Always)",
        "VSUBal.w.i16": "Vector Subtract (16 bits Integer components) (Always)",
        "VSUBal.w.i32": "Vector Subtract (32 bits Integer components) (Always)",
        "VSUBal.w.i64": "Vector Subtract (64 bits Integer components) (Always)",
        "VSUBal.w.f32": "Vector Subtract (32 bits Float components) (Always)",
        "VSUBal.w.f64": "Vector Subtract (64 bits Float components) (Always)"
      }
    },
    "VSUBHN%{c}%{q}%{dt}": {
      "description": "Vector Subtract and Narrow %{dt} %{q} %{c}",
      "variants": {
        "VSUBHN.i16": "Vector Subtract and Narrow (16 bits Integer components)",
        "VSUBHN.i32": "Vector Subtract and Narrow (32 bits Integer components)",
        "VSUBHN.i64": "Vector Subtract and Narrow (64 bits Integer components)",
        "VSUBHN.w.i16": "Vector Subtract and Narrow (16 bits Integer components)",
        "VSUBHN.w.i32": "Vector Subtract and Narrow (32 bits Integer components)",
        "VSUBHN.w.i64": "Vector Subtract and Narrow (64 bits Integer components)",
        "VSUBHNal.i16": "Vector Subtract and Narrow (16 bits Integer components) (Always)",
        "VSUBHNal.i32": "Vector Subtract and Narrow (32 bits Integer components) (Always)",
        "VSUBHNal.i64": "Vector Subtract and Narrow (64 bits Integer components) (Always)",
        "VSUBHNal.w.i16": "Vector Subtract and Narrow (16 bits Integer components) (Always)",
        "VSUBHNal.w.i32": "Vector Subtract and Narrow (32 bits Integer components) (Always)",
        "VSUBHNal.w.i64": "Vector Subtract and Narrow (64 bits Integer components) (Always)"
      }
    },
    "VSUBL%{c}%{q}%{dt}": {
      "description": "Vector Subtract Long %{dt} %{q} %{c}",
      "variants": {
        "VSUBL.s8": "Vector Subtract Long (8 bits Signed Integer components)",
        "VSUBL.s16": "Vector Subtract Long (16 bits Signed Integer components)",
        "VSUBL.s32": "Vector Subtract Long (32 bits Signed Integer components)",
        "VSUBL.u8": "Vector Subtract Long (8 bits Unsigned Integer components)",
        "VSUBL.u16": "Vector Subtract Long (16 bits Unsigned Integer components)",
        "VSUBL.u32": "Vector Subtract Long (32 bits Unsigned Integer components)",
        "VSUBL.w.s8": "Vector Subtract Long (8 bits Signed Integer components)",
        "VSUBL.w.s16": "Vector Subtract Long (16 bits Signed Integer components)",
        "VSUBL.w.s32": "Vector Subtract Long (32 bits Signed Integer components)",
        "VSUBL.w.u8": "Vector Subtract Long (8 bits Unsigned Integer components)",
        "VSUBL.w.u16": "Vector Subtract Long (16 bits Unsigned Integer components)",
        "VSUBL.w.u32": "Vector Subtract Long (32 bits Unsigned Integer components)",
        "VSUBLal.s8": "Vector Subtract Long (8 bits Signed Integer components) (Always)",
        "VSUBLal.s16": "Vector Subtract Long (16 bits Signed Integer components) (Always)",
        "VSUBLal.s32": "Vector Subtract Long (32 bits Signed Integer components) (Always)",
        "VSUBLal.u8": "Vector Subtract Long (8 bits Unsigned Integer components) (Always)",
        "VSUBLal.u16": "Vector Subtract Long (16 bits Unsigned Integer components) (Always)",
        "VSUBLal.u32": "Vector Subtract Long (32 bits Unsigned Integer components) (Always)",
        "VSUBLal.w.s8": "Vector Subtract Long (8 bits Signed Integer components) (Always)",
        "VSUBLal.w.s16": "Vector Subtract Long (16 bits Signed Integer components) (Always)",
        "VSUBLal.w.s32": "Vector Subtract Long (32 bits Signed Integer components) (Always)",
        "VSUBLal.w.u8": "Vector Subtract Long (8 bits Unsigned Integer components) (Always)",
        "VSUBLal.w.u16": "Vector Subtract Long (16 bits Unsigned Integer components) (Always)",
        "VSUBLal.w.u32": "Vector Subtract Long (32 bits Unsigned Integer components) (Always)"
      }
    },
    "VSUBW%{c}%{q}%{dt}": {
      "description": "Vector Subtract Wide %{dt} %{q} %{c}",
      "variants": {
        "VSUBW.s8": "Vector Subtract Wide (8 bits Signed Integer components)",
        "VSUBW.s16": "Vector Subtract Wide (16 bits Signed Integer components)",
        "VSUBW.s32": "Vector Subtract Wide (32 bits Signed Integer components)",
        "VSUBW.u8": "Vector Subtract Wide (8 bits Unsigned Integer components)",
        "VSUBW.u16": "Vector Subtract Wide (16 bits Unsigned Integer components)",
        "VSUBW.u32": "Vector Subtract Wide (32 bits Unsigned Integer components)",
        "VSUBW.w.s8": "Vector Subtract Wide (8 bits Signed Integer components)",
        "VSUBW.w.s16": "Vector Subtract Wide (16 bits Signed Integer components)",
        "VSUBW.w.s32": "Vector Subtract Wide (32 bits Signed Integer components)",
        "VSUBW.w.u8": "Vector Subtract Wide (8 bits Unsigned Integer components)",
        "VSUBW.w.u16": "Vector Subtract Wide (16 bits Unsigned Integer components)",
        "VSUBW.w.u32": "Vector Subtract Wide (32 bits Unsigned Integer components)",
        "VSUBWal.s8": "Vector Subtract Wide (8 bits Signed Integer components) (Always)",
        "VSUBWal.s16": "Vector Subtract Wide (16 bits Signed Integer components) (Always)",
        "VSUBWal.s32": "Vector Subtract Wide (32 bits Signed Integer components) (Always)",
        "VSUBWal.u8": "Vector Subtract Wide (8 bits Unsigned Integer components) (Always)",
        "VSUBWal.u16": "Vector Subtract Wide (16 bits Unsigned Integer components) (Always)",
        "VSUBWal.u32": "Vector Subtract Wide (32 bits Unsigned Integer components) (Always)",
        "VSUBWal.w.s8": "Vector Subtract Wide (8 bits Signed Integer components) (Always)",
        "VSUBWal.w.s16": "Vector Subtract Wide (16 bits Signed Integer components) (Always)",
        "VSUBWal.w.s32": "Vector Subtract Wide (32 bits Signed Integer components) (Always)",
        "VSUBWal.w.u8": "Vector Subtract Wide (8 bits Unsigned Integer components) (Always)",
        "VSUBWal.w.u16": "Vector Subtract Wide (16 bits Unsigned Integer components) (Always)",
        "VSUBWal.w.u32": "Vector Subtract Wide (32 bits Unsigned Integer components) (Always)"
      }
    },
    "VSWP%{c}%{q}%{dt}": {
      "description": "Vector Swap %{q} %{c}",
      "variants": {
        "VSWP.f16": "Vector Swap",
        "VSWP.f32": "Vector Swap",
        "VSWP.f64": "Vector Swap",
        "VSWP.i8": "Vector Swap",
        "VSWP.i16": "Vector Swap",
        "VSWP.i32": "Vector Swap",
        "VSWP.i64": "Vector Swap",
        "VSWP.s8": "Vector Swap",
        "VSWP.s16": "Vector Swap",
        "VSWP.s32": "Vector Swap",
        "VSWP.s64": "Vector Swap",
        "VSWP.u8": "Vector Swap",
        "VSWP.u16": "Vector Swap",
        "VSWP.u32": "Vector Swap",
        "VSWP.u64": "Vector Swap",
        "VSWP.w.f16": "Vector Swap",
        "VSWP.w.f32": "Vector Swap",
        "VSWP.w.f64": "Vector Swap",
        "VSWP.w.i8": "Vector Swap",
        "VSWP.w.i16": "Vector Swap",
        "VSWP.w.i32": "Vector Swap",
        "VSWP.w.i64": "Vector Swap",
        "VSWP.w.s8": "Vector Swap",
        "VSWP.w.s16": "Vector Swap",
        "VSWP.w.s32": "Vector Swap",
        "VSWP.w.s64": "Vector Swap",
        "VSWP.w.u8": "Vector Swap",
        "VSWP.w.u16": "Vector Swap",
        "VSWP.w.u32": "Vector Swap",
        "VSWP.w.u64": "Vector Swap",
        "VSWPal.f16": "Vector Swap (Always)",
        "VSWPal.f32": "Vector Swap (Always)",
        "VSWPal.f64": "Vector Swap (Always)",
        "VSWPal.i8": "Vector Swap (Always)",
        "VSWPal.i16": "Vector Swap (Always)",
        "VSWPal.i32": "Vector Swap (Always)",
        "VSWPal.i64": "Vector Swap (Always)",
        "VSWPal.s8": "Vector Swap (Always)",
        "VSWPal.s16": "Vector Swap (Always)",
        "VSWPal.s32": "Vector Swap (Always)",
        "VSWPal.s64": "Vector Swap (Always)",
        "VSWPal.u8": "Vector Swap (Always)",
        "VSWPal.u16": "Vector Swap (Always)",
        "VSWPal.u32": "Vector Swap (Always)",
        "VSWPal.u64": "Vector Swap (Always)",
        "VSWPal.w.f16": "Vector Swap (Always)",
        "VSWPal.w.f32": "Vector Swap (Always)",
        "VSWPal.w.f64": "Vector Swap (Always)",
        "VSWPal.w.i8": "Vector Swap (Always)",
        "VSWPal.w.i16": "Vector Swap (Always)",
        "VSWPal.w.i32": "Vector Swap (Always)",
        "VSWPal.w.i64": "Vector Swap (Always)",
        "VSWPal.w.s8": "Vector Swap (Always)",
        "VSWPal.w.s16": "Vector Swap (Always)",
        "VSWPal.w.s32": "Vector Swap (Always)",
        "VSWPal.w.s64": "Vector Swap (Always)",
        "VSWPal.w.u8": "Vector Swap (Always)",
        "VSWPal.w.u16": "Vector Swap (Always)",
        "VSWPal.w.u32": "Vector Swap (Always)",
        "VSWPal.w.u64": "Vector Swap (Always)"
      }
    },
    "VTBL%{c}%{q}.8": {
      "description": "Vector Table Lookup %{q} %{c}",
      "variants": {
        "VTBL.8": "Vector Table Lookup",
        "VTBL.w.8": "Vector Table Lookup",
        "VTBLal.8": "Vector Table Lookup (Always)",
        "VTBLal.w.8": "Vector Table Lookup (Always)"
      }
    },
    "VTBX%{c}%{q}.8": {
      "description": "Vector Table Extension %{q} %{c}",
      "variants": {
        "VTBX.8": "Vector Table Extension",
        "VTBX.w.8": "Vector Table Extension",
        "VTBXal.8": "Vector Table Extension (Always)",
        "VTBXal.w.8": "Vector Table Extension (Always)"
      }
    },
    "VTRN%{c}%{q}%{vsize}": {
      "description": "Vector Transpose %{vsize} %{q} %{c}",
      "variants": {
        "VTRN.8": "Vector Transpose (8 bits components)",
        "VTRN.16": "Vector Transpose (16 bits components)",
        "VTRN.32": "Vector Transpose (32 bits components)",
        "VTRN.w.8": "Vector Transpose (8 bits components)",
        "VTRN.w.16": "Vector Transpose (16 bits components)",
        "VTRN.w.32": "Vector Transpose (32 bits components)",
        "VTRNal.8": "Vector Transpose (8 bits components) (Always)",
        "VTRNal.16": "Vector Transpose (16 bits components) (Always)",
        "VTRNal.32": "Vector Transpose (32 bits components) (Always)",
        "VTRNal.w.8": "Vector Transpose (8 bits components) (Always)",
        "VTRNal.w.16": "Vector Transpose (16 bits components) (Always)",
        "VTRNal.w.32": "Vector Transpose (32 bits components) (Always)"
      }
    },
    "VTST%{c}%{q}%{vsize}": {
      "description": "Vector Test %{vsize} %{q} %{c}",
      "variants": {
        "VTST.8": "Vector Test (8 bits components)",
        "VTST.16": "Vector Test (16 bits components)",
        "VTST.32": "Vector Test (32 bits components)",
        "VTST.w.8": "Vector Test (8 bits components)",
        "VTST.w.16": "Vector Test (16 bits components)",
        "VTST.w.32": "Vector Test (32 bits components)",
        "VTSTal.8": "Vector Test (8 bits components) (Always)",
        "VTSTal.16": "Vector Test (16 bits components) (Always)",
        "VTSTal.32": "Vector Test (32 bits components) (Always)",
        "VTSTal.w.8": "Vector Test (8 bits components) (Always)",
        "VTSTal.w.16": "Vector Test (16 bits components) (Always)",
        "VTSTal.w.32": "Vector Test (32 bits components) (Always)"
      }
    },
    "VUZP%{c}%{q}%{vsize}": {
      "description": "Vector Unzip %{vsize} %{q} %{c}",
      "variants": {
        "VUZP.8": "Vector Unzip (8 bits components)",
        "VUZP.16": "Vector Unzip (16 bits components)",
        "VUZP.32": "Vector Unzip (32 bits components)",
        "VUZP.w.8": "Vector Unzip (8 bits components)",
        "VUZP.w.16": "Vector Unzip (16 bits components)",
        "VUZP.w.32": "Vector Unzip (32 bits components)",
        "VUZPal.8": "Vector Unzip (8 bits components) (Always)",
        "VUZPal.16": "Vector Unzip (16 bits components) (Always)",
        "VUZPal.32": "Vector Unzip (32 bits components) (Always)",
        "VUZPal.w.8": "Vector Unzip (8 bits components) (Always)",
        "VUZPal.w.16": "Vector Unzip (16 bits components) (Always)",
        "VUZPal.w.32": "Vector Unzip (32 bits components) (Always)"
      }
    },
    "VZIP%{c}%{q}%{vsize}": {
      "description": "Vector Zip %{vsize} %{q} %{c}",
      "variants": {
        "VZIP.8": "Vector Zip (8 bits components)",
        "VZIP.16": "Vector Zip (16 bits components)",
        "VZIP.32": "Vector Zip (32 bits components)",
        "VZIP.w.8": "Vector Zip (8 bits components)",
        "VZIP.w.16": "Vector Zip (16 bits components)",
        "VZIP.w.32": "Vector Zip (32 bits components)",
        "VZIPal.8": "Vector Zip (8 bits components) (Always)",
        "VZIPal.16": "Vector Zip (16 bits components) (Always)",
        "VZIPal.32": "Vector Zip (32 bits components) (Always)",
        "VZIPal.w.8": "Vector Zip (8 bits components) (Always)",
        "VZIPal.w.16": "Vector Zip (16 bits components) (Always)",
        "VZIPal.w.32": "Vector Zip (32 bits components) (Always)"
      }
    },
    "WFE%{c}%{q}": {
      "description": "Wait for Event %{q} %{c}",
      "variants": {
        "WFE": "Wait for Event",
        "WFE.n": "Wait for Event (T 16bits encoding)",
        "WFE.w": "Wait for Event (T/A 32bits encoding)",
        "WFEeq": "Wait for Event (If APSR.Z == 1 [Equal])",
        "WFEeq.n": "Wait for Event (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "WFEeq.w": "Wait for Event (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "WFEne": "Wait for Event (If APSR.Z == 0 [Not Equal])",
        "WFEne.n": "Wait for Event (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "WFEne.w": "Wait for Event (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "WFEcs": "Wait for Event (If APSR.C == 1 [Carry Set])",
        "WFEcs.n": "Wait for Event (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "WFEcs.w": "Wait for Event (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "WFEcc": "Wait for Event (If APSR.C == 0 [Carry Clear])",
        "WFEcc.n": "Wait for Event (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "WFEcc.w": "Wait for Event (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "WFEmi": "Wait for Event (If APSR.N == 1 [Minus])",
        "WFEmi.n": "Wait for Event (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "WFEmi.w": "Wait for Event (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "WFEpl": "Wait for Event (If APSR.N == 0 [Plus])",
        "WFEpl.n": "Wait for Event (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "WFEpl.w": "Wait for Event (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "WFEvs": "Wait for Event (If APSR.V == 1 [Overflow])",
        "WFEvs.n": "Wait for Event (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "WFEvs.w": "Wait for Event (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "WFEvc": "Wait for Event (If APSR.V == 0 [No Overflow])",
        "WFEvc.n": "Wait for Event (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "WFEvc.w": "Wait for Event (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "WFEhi": "Wait for Event (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "WFEhi.n": "Wait for Event (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "WFEhi.w": "Wait for Event (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "WFEls": "Wait for Event (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "WFEls.n": "Wait for Event (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "WFEls.w": "Wait for Event (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "WFEge": "Wait for Event (If APSR.N == APSR.V [Signed Greater or Equal])",
        "WFEge.n": "Wait for Event (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "WFEge.w": "Wait for Event (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "WFElt": "Wait for Event (If APSR.N != APSR.V [Signed Lesser Than])",
        "WFElt.n": "Wait for Event (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "WFElt.w": "Wait for Event (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "WFEgt": "Wait for Event (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "WFEgt.n": "Wait for Event (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "WFEgt.w": "Wait for Event (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "WFEle": "Wait for Event (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "WFEle.n": "Wait for Event (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "WFEle.w": "Wait for Event (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "WFEal": "Wait for Event (Always)",
        "WFEal.n": "Wait for Event (T 16bits encoding) (Always)",
        "WFEal.w": "Wait for Event (T/A 32bits encoding) (Always)"
      }
    },
    "WFI%{c}%{q}": {
      "description": "Wait for Interrupt %{q} %{c}",
      "variants": {
        "WFI": "Wait for Interrupt",
        "WFI.n": "Wait for Interrupt (T 16bits encoding)",
        "WFI.w": "Wait for Interrupt (T/A 32bits encoding)",
        "WFIeq": "Wait for Interrupt (If APSR.Z == 1 [Equal])",
        "WFIeq.n": "Wait for Interrupt (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "WFIeq.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "WFIne": "Wait for Interrupt (If APSR.Z == 0 [Not Equal])",
        "WFIne.n": "Wait for Interrupt (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "WFIne.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "WFIcs": "Wait for Interrupt (If APSR.C == 1 [Carry Set])",
        "WFIcs.n": "Wait for Interrupt (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "WFIcs.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "WFIcc": "Wait for Interrupt (If APSR.C == 0 [Carry Clear])",
        "WFIcc.n": "Wait for Interrupt (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "WFIcc.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "WFImi": "Wait for Interrupt (If APSR.N == 1 [Minus])",
        "WFImi.n": "Wait for Interrupt (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "WFImi.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "WFIpl": "Wait for Interrupt (If APSR.N == 0 [Plus])",
        "WFIpl.n": "Wait for Interrupt (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "WFIpl.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "WFIvs": "Wait for Interrupt (If APSR.V == 1 [Overflow])",
        "WFIvs.n": "Wait for Interrupt (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "WFIvs.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "WFIvc": "Wait for Interrupt (If APSR.V == 0 [No Overflow])",
        "WFIvc.n": "Wait for Interrupt (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "WFIvc.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "WFIhi": "Wait for Interrupt (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "WFIhi.n": "Wait for Interrupt (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "WFIhi.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "WFIls": "Wait for Interrupt (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "WFIls.n": "Wait for Interrupt (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "WFIls.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "WFIge": "Wait for Interrupt (If APSR.N == APSR.V [Signed Greater or Equal])",
        "WFIge.n": "Wait for Interrupt (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "WFIge.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "WFIlt": "Wait for Interrupt (If APSR.N != APSR.V [Signed Lesser Than])",
        "WFIlt.n": "Wait for Interrupt (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "WFIlt.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "WFIgt": "Wait for Interrupt (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "WFIgt.n": "Wait for Interrupt (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "WFIgt.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "WFIle": "Wait for Interrupt (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "WFIle.n": "Wait for Interrupt (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "WFIle.w": "Wait for Interrupt (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "WFIal": "Wait for Interrupt (Always)",
        "WFIal.n": "Wait for Interrupt (T 16bits encoding) (Always)",
        "WFIal.w": "Wait for Interrupt (T/A 32bits encoding) (Always)"
      }
    },
    "YIELD%{c}%{q}": {
      "description": "Yield %{q} %{c}",
      "variants": {
        "YIELD": "Yield",
        "YIELD.n": "Yield (T 16bits encoding)",
        "YIELD.w": "Yield (T/A 32bits encoding)",
        "YIELDeq": "Yield (If APSR.Z == 1 [Equal])",
        "YIELDeq.n": "Yield (T 16bits encoding) (If APSR.Z == 1 [Equal])",
        "YIELDeq.w": "Yield (T/A 32bits encoding) (If APSR.Z == 1 [Equal])",
        "YIELDne": "Yield (If APSR.Z == 0 [Not Equal])",
        "YIELDne.n": "Yield (T 16bits encoding) (If APSR.Z == 0 [Not Equal])",
        "YIELDne.w": "Yield (T/A 32bits encoding) (If APSR.Z == 0 [Not Equal])",
        "YIELDcs": "Yield (If APSR.C == 1 [Carry Set])",
        "YIELDcs.n": "Yield (T 16bits encoding) (If APSR.C == 1 [Carry Set])",
        "YIELDcs.w": "Yield (T/A 32bits encoding) (If APSR.C == 1 [Carry Set])",
        "YIELDcc": "Yield (If APSR.C == 0 [Carry Clear])",
        "YIELDcc.n": "Yield (T 16bits encoding) (If APSR.C == 0 [Carry Clear])",
        "YIELDcc.w": "Yield (T/A 32bits encoding) (If APSR.C == 0 [Carry Clear])",
        "YIELDmi": "Yield (If APSR.N == 1 [Minus])",
        "YIELDmi.n": "Yield (T 16bits encoding) (If APSR.N == 1 [Minus])",
        "YIELDmi.w": "Yield (T/A 32bits encoding) (If APSR.N == 1 [Minus])",
        "YIELDpl": "Yield (If APSR.N == 0 [Plus])",
        "YIELDpl.n": "Yield (T 16bits encoding) (If APSR.N == 0 [Plus])",
        "YIELDpl.w": "Yield (T/A 32bits encoding) (If APSR.N == 0 [Plus])",
        "YIELDvs": "Yield (If APSR.V == 1 [Overflow])",
        "YIELDvs.n": "Yield (T 16bits encoding) (If APSR.V == 1 [Overflow])",
        "YIELDvs.w": "Yield (T/A 32bits encoding) (If APSR.V == 1 [Overflow])",
        "YIELDvc": "Yield (If APSR.V == 0 [No Overflow])",
        "YIELDvc.n": "Yield (T 16bits encoding) (If APSR.V == 0 [No Overflow])",
        "YIELDvc.w": "Yield (T/A 32bits encoding) (If APSR.V == 0 [No Overflow])",
        "YIELDhi": "Yield (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "YIELDhi.n": "Yield (T 16bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "YIELDhi.w": "Yield (T/A 32bits encoding) (If APSR.C == 1 AND APSR.Z == 0 [Unsigned Higher])",
        "YIELDls": "Yield (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "YIELDls.n": "Yield (T 16bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "YIELDls.w": "Yield (T/A 32bits encoding) (If APSR.C == 0 OR APSR.Z == 1 [Unsigned Lower])",
        "YIELDge": "Yield (If APSR.N == APSR.V [Signed Greater or Equal])",
        "YIELDge.n": "Yield (T 16bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "YIELDge.w": "Yield (T/A 32bits encoding) (If APSR.N == APSR.V [Signed Greater or Equal])",
        "YIELDlt": "Yield (If APSR.N != APSR.V [Signed Lesser Than])",
        "YIELDlt.n": "Yield (T 16bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "YIELDlt.w": "Yield (T/A 32bits encoding) (If APSR.N != APSR.V [Signed Lesser Than])",
        "YIELDgt": "Yield (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "YIELDgt.n": "Yield (T 16bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "YIELDgt.w": "Yield (T/A 32bits encoding) (If APSR.N == APSR.V AND APSR.Z == 0 [Signed Greater Than])",
        "YIELDle": "Yield (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "YIELDle.n": "Yield (T 16bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "YIELDle.w": "Yield (T/A 32bits encoding) (If APSR.N != APSR.V OR APSR.Z != 0 [Signed Lesser or Equal])",
        "YIELDal": "Yield (Always)",
        "YIELDal.n": "Yield (T 16bits encoding) (Always)",
        "YIELDal.w": "Yield (T/A 32bits encoding) (Always)"
      }
    }
  }
}
